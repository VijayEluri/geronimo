Index: modules/saaj/test/org/apache/axis2/saaj/SOAPEnvelopeTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/SOAPEnvelopeTest.java	(revision 749891)
+++ modules/saaj/test/org/apache/axis2/saaj/SOAPEnvelopeTest.java	(working copy)
@@ -21,6 +21,8 @@
 
 import junit.framework.TestCase;
 
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.soap.Detail;
 import javax.xml.soap.DetailEntry;
 import javax.xml.soap.MessageFactory;
@@ -28,6 +30,7 @@
 import javax.xml.soap.Name;
 import javax.xml.soap.Node;
 import javax.xml.soap.SOAPBody;
+import javax.xml.soap.SOAPBodyElement;
 import javax.xml.soap.SOAPConstants;
 import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPEnvelope;
@@ -38,7 +41,21 @@
 import javax.xml.soap.SOAPMessage;
 import javax.xml.soap.SOAPPart;
 import javax.xml.soap.Text;
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMResult;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.sax.SAXSource;
+
+import org.w3c.dom.Comment;  
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.xml.sax.InputSource; 
+
 import java.io.ByteArrayInputStream;
+import java.io.StringReader;
 import java.util.Iterator;
 
 public class SOAPEnvelopeTest extends TestCase {
@@ -59,6 +76,8 @@
                     "</shw:Address>\n" +
                     "</soapenv:Body>\n" +
                     "</soapenv:Envelope>";
+    
+    private static final String XML_INPUT_1 = "<root><a><!-- this is a test with a comment node --></a></root>";
 
     public SOAPEnvelopeTest(String name) {
         super(name);
@@ -565,4 +584,106 @@
             fail("Unexpected Exception: " + e.getMessage());
         }
     }
-}
\ No newline at end of file
+    
+    public void testTransform() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPBody body = message.getSOAPBody();
+        Source source = new DOMSource(createDocument());
+        Result result = new DOMResult(body);
+        TransformerFactory transformerFactory = TransformerFactory.newInstance();
+        Transformer transformer = transformerFactory.newTransformer();
+        transformer.transform(source, result);
+        
+        assertEquals(1, body.getChildNodes().getLength());
+        Iterator iter = body.getChildElements();
+        assertTrue(iter.hasNext()); 
+        Object obj = iter.next();
+        assertTrue(obj instanceof SOAPBodyElement);  
+        SOAPElement soapElement = (SOAPElement)obj;
+        assertEquals("http://example.com", soapElement.getNamespaceURI());
+        assertEquals("GetLastTradePrice", soapElement.getLocalName());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof SOAPElement);  
+        soapElement = (SOAPElement)obj;
+        assertEquals("", soapElement.getNamespaceURI());
+        assertEquals("symbol", soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof Text);  
+        Text text = (Text)obj;
+        assertEquals("DEF", text.getData());
+        assertFalse(iter.hasNext());
+    }
+    
+    private Element createDocument() throws Exception {
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
+        Document document = documentBuilder.newDocument();
+        Element getLastTradePrice = document.createElementNS("http://example.com", "m:GetLastTradePrice");        
+        Element symbol = document.createElement("symbol");
+        getLastTradePrice.appendChild(symbol);
+        org.w3c.dom.Text def = document.createTextNode("DEF");
+        symbol.appendChild(def);
+        document.appendChild(getLastTradePrice);
+        return getLastTradePrice;
+    }
+    
+    public void testTransformWithComments() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPBody body = message.getSOAPBody();
+        Source source = new SAXSource(new InputSource(new StringReader(XML_INPUT_1)));
+        DOMResult result = new DOMResult(body);
+        TransformerFactory transformerFactory = TransformerFactory.newInstance();
+        Transformer transformer = transformerFactory.newTransformer();
+        transformer.transform(source, result);
+        
+        // test DOM
+        org.w3c.dom.Node rootNode = result.getNode();
+        org.w3c.dom.Node node = rootNode.getFirstChild();
+        assertTrue(node instanceof Element);
+        assertEquals("root", node.getNodeName());
+        
+        node = node.getFirstChild();
+        assertTrue(node instanceof Element);
+        assertEquals("a", node.getNodeName());
+        
+        node = node.getFirstChild();
+        assertTrue(node instanceof Comment);
+        assertEquals("this is a test with a comment node", node.getNodeValue().trim());
+        
+        // test SAAJ
+        assertEquals(1, body.getChildNodes().getLength());
+        Iterator iter = body.getChildElements();
+        assertTrue(iter.hasNext()); 
+        Object obj = iter.next();
+        assertTrue(obj instanceof SOAPBodyElement);  
+        SOAPElement soapElement = (SOAPElement)obj;
+        assertEquals("root", soapElement.getLocalName());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof SOAPElement);  
+        soapElement = (SOAPElement)obj;
+        assertEquals("a", soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof Text);  
+        Text text = (Text)obj;
+        assertTrue(text.isComment());
+        assertEquals("this is a test with a comment node", text.getData().trim());
+        assertFalse(iter.hasNext());        
+    }
+}
Index: modules/saaj/test/org/apache/axis2/saaj/SOAPHeaderTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/SOAPHeaderTest.java	(revision 749891)
+++ modules/saaj/test/org/apache/axis2/saaj/SOAPHeaderTest.java	(working copy)
@@ -33,6 +33,11 @@
 import javax.xml.soap.SOAPHeaderElement;
 import javax.xml.soap.SOAPMessage;
 import javax.xml.soap.SOAPPart;
+import javax.xml.soap.Text;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 
@@ -360,4 +365,52 @@
             fail("Unexpected Exception: " + e.getMessage());
         }
     }
+    
+    public void testAppendChild() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPHeader soapHeader = message.getSOAPHeader();
+        
+        assertEquals(0, soapHeader.getChildNodes().getLength());
+        assertFalse(soapHeader.getChildElements().hasNext());
+        
+        Document doc = soapHeader.getOwnerDocument();        
+        String namespace = "http://example.com";
+        String localName = "GetLastTradePrice";
+        Element getLastTradePrice = doc.createElementNS(namespace, localName);        
+        Element symbol = doc.createElement("symbol");
+        symbol.setAttribute("foo", "bar");
+        getLastTradePrice.appendChild(symbol);
+        org.w3c.dom.Text def = doc.createTextNode("DEF");
+        symbol.appendChild(def);
+                        
+        soapHeader.appendChild(getLastTradePrice);
+                
+        assertEquals(1, soapHeader.getChildNodes().getLength());
+        Iterator iter = soapHeader.getChildElements();
+        assertTrue(iter.hasNext()); 
+        Object obj = iter.next();
+        // must be SOAPHeaderElement
+        assertTrue(obj instanceof SOAPHeaderElement);  
+        SOAPElement soapElement = (SOAPElement)obj;
+        assertEquals(namespace, soapElement.getNamespaceURI());
+        assertEquals(localName, soapElement.getLocalName());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof SOAPElement);  
+        soapElement = (SOAPElement)obj;
+        assertEquals(null, soapElement.getNamespaceURI());
+        assertEquals("symbol", soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof Text);  
+        Text text = (Text)obj;
+        assertEquals("DEF", text.getData());
+        assertFalse(iter.hasNext());   
+    }
 }
\ No newline at end of file
Index: modules/saaj/test/org/apache/axis2/saaj/SOAPElementTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/SOAPElementTest.java	(revision 749891)
+++ modules/saaj/test/org/apache/axis2/saaj/SOAPElementTest.java	(working copy)
@@ -20,6 +20,8 @@
 
 import junit.framework.TestCase;
 import org.apache.axiom.om.impl.dom.NodeImpl;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
 
 import javax.xml.namespace.QName;
 import javax.xml.soap.MessageFactory;
@@ -766,4 +768,84 @@
             fail("Error : " + e);
         }
     }
+    
+    public void testAppendChild() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPBody soapBody = message.getSOAPBody();
+
+        QName qname1 = new QName("http://wombat.ztrade.com",
+                                 "GetLastTradePrice", "ztrade");
+        SOAPElement child = soapBody.addChildElement(qname1);
+        
+        assertFalse(child.getChildElements().hasNext());
+        
+        Document doc = child.getOwnerDocument();        
+        String namespace = "http://example.com";
+        String localName = "GetLastTradePrice";
+        Element getLastTradePrice = doc.createElementNS(namespace, localName);        
+        Element symbol = doc.createElement("symbol");
+        symbol.setAttribute("foo", "bar");
+        getLastTradePrice.appendChild(symbol);
+        org.w3c.dom.Text def = doc.createTextNode("DEF");
+        symbol.appendChild(def);
+                
+        child.appendChild(getLastTradePrice);
+        
+        Iterator iter = child.getChildElements();
+        assertTrue(iter.hasNext()); 
+        Object obj = iter.next();
+        assertTrue(obj instanceof SOAPElement);  
+        SOAPElement soapElement = (SOAPElement)obj;
+        assertEquals(namespace, soapElement.getNamespaceURI());
+        assertEquals(localName, soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof SOAPElement);  
+        soapElement = (SOAPElement)obj;
+        assertEquals(null, soapElement.getNamespaceURI());
+        assertEquals("symbol", soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof Text);  
+        Text text = (Text)obj;
+        assertEquals("DEF", text.getData());
+        assertFalse(iter.hasNext());               
+    }
+    
+    public void testRemoveChild() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPBody soapBody = message.getSOAPBody();
+
+        assertFalse(soapBody.getChildElements().hasNext());
+        
+        QName qname1 = new QName("http://wombat.ztrade.com",
+                                 "GetLastTradePrice", "ztrade");
+        SOAPElement child = soapBody.addChildElement(qname1);
+        child.addTextNode("foo");
+        
+        assertTrue(child.getChildElements().hasNext());
+        
+        Node textNode = (Node)child.getChildElements().next();
+        assertTrue(textNode instanceof Text);
+        
+        /* 
+        child.removeChild(textNode);
+        
+        assertFalse(child.getChildElements().hasNext());
+        */
+        
+        assertTrue(soapBody.getChildElements().hasNext());
+        
+        soapBody.removeChild(child);
+        
+        assertFalse(soapBody.getChildElements().hasNext());
+    }
 }
Index: modules/saaj/test/org/apache/axis2/saaj/SOAPBodyTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/SOAPBodyTest.java	(revision 749891)
+++ modules/saaj/test/org/apache/axis2/saaj/SOAPBodyTest.java	(working copy)
@@ -262,5 +262,53 @@
         }
     }
 
-
+    public void testAppendChild() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPBody soapBody = message.getSOAPBody();
+        
+        assertEquals(0, soapBody.getChildNodes().getLength());
+        assertFalse(soapBody.getChildElements().hasNext());
+                      
+        Document doc = soapBody.getOwnerDocument();        
+        String namespace = "http://example.com";
+        String localName = "GetLastTradePrice";
+        Element getLastTradePrice = doc.createElementNS(namespace, localName);        
+        Element symbol = doc.createElement("symbol");
+        symbol.setAttribute("foo", "bar");
+        getLastTradePrice.appendChild(symbol);
+        org.w3c.dom.Text def = doc.createTextNode("DEF");
+        symbol.appendChild(def);
+                        
+        soapBody.appendChild(getLastTradePrice);
+        
+        assertEquals(1, soapBody.getChildNodes().getLength());
+        Iterator iter = soapBody.getChildElements();
+        assertTrue(iter.hasNext()); 
+        Object obj = iter.next();
+        // must be SOAPBodyElement
+        assertTrue(obj instanceof SOAPBodyElement);  
+        SOAPElement soapElement = (SOAPElement)obj;
+        assertEquals(namespace, soapElement.getNamespaceURI());
+        assertEquals(localName, soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof SOAPElement);  
+        soapElement = (SOAPElement)obj;
+        assertEquals(null, soapElement.getNamespaceURI());
+        assertEquals("symbol", soapElement.getLocalName());
+        assertFalse(iter.hasNext());
+        
+        iter = soapElement.getChildElements();
+        assertTrue(iter.hasNext()); 
+        obj = iter.next();
+        assertTrue(obj instanceof Text);  
+        Text text = (Text)obj;
+        assertEquals("DEF", text.getData());
+        assertFalse(iter.hasNext());   
+    }
+        
 }
Index: modules/saaj/test/org/apache/axis2/saaj/TextTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/TextTest.java	(revision 749891)
+++ modules/saaj/test/org/apache/axis2/saaj/TextTest.java	(working copy)
@@ -20,6 +20,7 @@
 package org.apache.axis2.saaj;
 
 import junit.framework.TestCase;
+import org.w3c.dom.Comment;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 
@@ -179,8 +180,10 @@
             isComment = ((Text)node).isComment();
             if (i == 1 || i == 3) {
                 assertEquals(true, isComment);
+                assertTrue(node instanceof Comment);
             } else {
                 assertEquals(false, isComment);
+                assertFalse(node instanceof Comment);
             }
         }
     }
Index: modules/saaj/test/org/apache/axis2/saaj/SOAPPartTest.java
===================================================================
--- modules/saaj/test/org/apache/axis2/saaj/SOAPPartTest.java	(revision 749891)
+++ modules/saaj/test/org/apache/axis2/saaj/SOAPPartTest.java	(working copy)
@@ -21,6 +21,7 @@
 import junit.framework.TestCase;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -28,6 +29,7 @@
 import javax.xml.soap.Name;
 import javax.xml.soap.SOAPBody;
 import javax.xml.soap.SOAPElement;
+import javax.xml.soap.SOAPEnvelope;
 import javax.xml.soap.SOAPHeader;
 import javax.xml.soap.SOAPHeaderElement;
 import javax.xml.soap.SOAPMessage;
@@ -42,9 +44,9 @@
  */
 public class SOAPPartTest extends TestCase {
 
-    public void testAddSource() {
+    public void testAddSource() throws Exception {
         DOMSource domSource;
-        try {
+
             /*
             FileReader testFile = new FileReader(new File(System.getProperty("basedir",".")+"/test-resources" + File.separator + "soap-part.xml"));
             StAXOMBuilder stAXOMBuilder =
@@ -76,9 +78,7 @@
             Iterator iter2 = body.getChildElements();
             getContents(iter2, "");
 
-        } catch (Exception e) {
-            fail("Unexpected Exception : " + e);
-        }
+
     }
 
     public void getContents(Iterator iterator, String indent) {
@@ -186,4 +186,44 @@
             fail("Unexpected Exception " + e);
         }
     }
+    
+    public void testNodeTypes() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPPart soapPart = message.getSOAPPart();     
+
+        assertTrue("first child", soapPart.getFirstChild() instanceof SOAPEnvelope);
+        assertTrue("last child", soapPart.getLastChild() instanceof SOAPEnvelope);
+                
+        NodeList nodes = soapPart.getChildNodes();
+        
+        assertEquals(1, nodes.getLength());
+        for (int i = 0; i < nodes.getLength(); i++) {
+            assertTrue(nodes.item(i) instanceof SOAPEnvelope);
+        }             
+    }
+    
+    public void testRemoveChild1() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPPart soapPart = message.getSOAPPart();  
+                                
+        assertTrue("soap env before", soapPart.getFirstChild() instanceof SOAPEnvelope);
+        
+        soapPart.removeChild(soapPart.getFirstChild());
+        
+        assertTrue("soap env after", soapPart.getFirstChild() == null);
+    }
+    
+    public void testRemoveChild2() throws Exception {
+        MessageFactory fact = MessageFactory.newInstance();
+        SOAPMessage message = fact.createMessage();
+        SOAPPart soapPart = message.getSOAPPart();  
+                                
+        assertTrue("soap env before", soapPart.getFirstChild() instanceof SOAPEnvelope);
+        
+        soapPart.removeChild(soapPart.getEnvelope());
+        
+        assertTrue("soap env after", soapPart.getFirstChild() == null);
+    }
 }
Index: modules/saaj/src/org/apache/axis2/saaj/SOAPBodyImpl.java
===================================================================
--- modules/saaj/src/org/apache/axis2/saaj/SOAPBodyImpl.java	(revision 749891)
+++ modules/saaj/src/org/apache/axis2/saaj/SOAPBodyImpl.java	(working copy)
@@ -96,6 +96,22 @@
         return childEle;
     }
 
+    protected Element appendElement(ElementImpl child) throws SOAPException {    
+        String namespaceURI = child.getNamespaceURI();
+        String prefix = child.getPrefix();
+
+        SOAPBodyElementImpl childEle = new SOAPBodyElementImpl(child);
+
+        childEle.element.setUserData(SAAJ_NODE, childEle, null);
+        if (namespaceURI != null && namespaceURI.trim().length() > 0) {
+            childEle.element.setNamespace(childEle.element.declareNamespace(namespaceURI, prefix));
+        }
+        element.appendChild(childEle.element);
+        ((NodeImpl)childEle.element.getParentNode()).setUserData(SAAJ_NODE, this, null);
+        childEle.setParentElement(this);
+        return childEle;
+    }
+    
     public SOAPElement addChildElement(SOAPElement soapElement) throws SOAPException {
         String namespaceURI = soapElement.getNamespaceURI();
         String prefix = soapElement.getPrefix();
@@ -412,7 +428,7 @@
         }
         if (node instanceof org.w3c.dom.Comment) {
             org.w3c.dom.Comment domText = (org.w3c.dom.Comment)node;
-            return new TextImplEx("<!--" + domText.getData() + "-->", parent);
+            return new CommentImpl(domText.getData(), parent);
         }
         Element domEle = ((Element)node);
         int indexOfColon = domEle.getTagName().indexOf(":");
Index: modules/saaj/src/org/apache/axis2/saaj/NodeImplEx.java
===================================================================
--- modules/saaj/src/org/apache/axis2/saaj/NodeImplEx.java	(revision 749891)
+++ modules/saaj/src/org/apache/axis2/saaj/NodeImplEx.java	(working copy)
@@ -160,30 +160,37 @@
      * @return the SAAJ Node corresponding to the domNode
      */
     javax.xml.soap.Node toSAAJNode(org.w3c.dom.Node domNode) {
+        return toSAAJNode(domNode, this);
+    }
+    
+    /**
+     * Converts or extracts the SAAJ node from the given DOM Node (domNode)
+     *
+     * @param domNode
+     * @return the SAAJ Node corresponding to the domNode
+     */
+    static javax.xml.soap.Node toSAAJNode(org.w3c.dom.Node domNode, Node parentNode) {
         if (domNode == null) {
             return null;
         }
+        Node saajNode = (Node)((NodeImpl)domNode).getUserData(SAAJ_NODE);
+        if (saajNode == null) {  // if SAAJ node has not been set in userData, try to construct it
+            return toSAAJNode2(domNode, parentNode);
+        }
+        // update siblings for text nodes
         if (domNode instanceof org.w3c.dom.Text || domNode instanceof org.w3c.dom.Comment) {
             org.w3c.dom.Node prevSiblingDOMNode = domNode.getPreviousSibling();
             org.w3c.dom.Node nextSiblingDOMNode = domNode.getNextSibling();
-
-            TextImplEx saajTextNode = (TextImplEx)((NodeImpl)domNode).getUserData(SAAJ_NODE);
-            if (saajTextNode == null) {
-                // if SAAJ node has not been set in userData, try to construct it
-                return toSAAJNode2(domNode);
-            }
+            
+            TextImplEx saajTextNode = (TextImplEx)saajNode;
+            
             saajTextNode.setPreviousSibling(prevSiblingDOMNode);
             saajTextNode.setNextSibling(nextSiblingDOMNode);
-            return saajTextNode;
         }
-        Node saajNode = (Node)((NodeImpl)domNode).getUserData(SAAJ_NODE);
-        if (saajNode == null) {  // if SAAJ node has not been set in userData, try to construct it
-            return toSAAJNode2(domNode);
-        }
         return saajNode;
     }
 
-    private javax.xml.soap.Node toSAAJNode2(org.w3c.dom.Node domNode) {
+    private static javax.xml.soap.Node toSAAJNode2(org.w3c.dom.Node domNode, Node parentNode) {
         if (domNode == null) {
             return null;
         }
@@ -201,9 +208,7 @@
             org.w3c.dom.Node prevSiblingDOMNode = comment.getPreviousSibling();
             org.w3c.dom.Node nextSiblingDOMNode = comment.getNextSibling();
             SOAPElementImpl parent = new SOAPElementImpl((ElementImpl)domNode.getParentNode());
-            TextImplEx saajTextNode = new TextImplEx("<!--" +
-                    comment.getData() +
-                    "-->",
+            CommentImpl saajTextNode = new CommentImpl(comment.getData(),
                                                      parent, prevSiblingDOMNode,
                                                      nextSiblingDOMNode);
             ((NodeImpl)domNode).setUserData(SAAJ_NODE, saajTextNode, null);
Index: modules/saaj/src/org/apache/axis2/saaj/SOAPPartImpl.java
===================================================================
--- modules/saaj/src/org/apache/axis2/saaj/SOAPPartImpl.java	(revision 749891)
+++ modules/saaj/src/org/apache/axis2/saaj/SOAPPartImpl.java	(working copy)
@@ -841,7 +841,7 @@
      * been removed from the tree, this is <code>null</code>.
      */
     public Node getParentNode() {
-        return document.getParentNode();
+        return toSAAJNode(document.getParentNode());
     }
 
     /**
@@ -849,17 +849,22 @@
      * this is a <code>NodeList</code> containing no nodes.
      */
     public NodeList getChildNodes() {
-        return document.getChildNodes();
+        NodeList childNodes = document.getChildNodes();
+        NodeListImpl nodes = new NodeListImpl();
+        for (int i = 0; i < childNodes.getLength(); i++) {
+            nodes.addNode(toSAAJNode(childNodes.item(i)));
+        }
+        return nodes;
     }
 
     /** The first child of this node. If there is no such node, this returns <code>null</code>. */
     public Node getFirstChild() {
-        return document.getFirstChild();
+        return toSAAJNode(document.getFirstChild());
     }
 
     /** The last child of this node. If there is no such node, this returns <code>null</code>. */
     public Node getLastChild() {
-        return document.getLastChild();
+        return toSAAJNode(document.getLastChild());
     }
 
     /**
@@ -867,7 +872,7 @@
      * <code>null</code>.
      */
     public Node getPreviousSibling() {
-        return document.getPreviousSibling();
+        return toSAAJNode(document.getPreviousSibling());
     }
 
     /**
@@ -875,7 +880,7 @@
      * <code>null</code>.
      */
     public Node getNextSibling() {
-        return document.getNextSibling();
+        return toSAAJNode(document.getNextSibling());
     }
 
     /**
@@ -954,6 +959,11 @@
      *                      this node.
      */
     public Node removeChild(Node oldChild) throws DOMException {
+        if (oldChild instanceof SOAPElementImpl) {
+            oldChild = ((SOAPElementImpl)oldChild).getElement();
+        } else if (oldChild instanceof TextImplEx) {
+            // TODO: handle text nodes somehow
+        }
         return document.removeChild(oldChild);
     }
 
@@ -1222,4 +1232,8 @@
     public void setValue(String value) {
     	throw new IllegalStateException("Cannot set value of SOAPPart.");
     }
+    
+    javax.xml.soap.Node toSAAJNode(org.w3c.dom.Node domNode) {
+        return NodeImplEx.toSAAJNode(domNode, this);
+    }
 }
Index: modules/saaj/src/org/apache/axis2/saaj/SOAPHeaderImpl.java
===================================================================
--- modules/saaj/src/org/apache/axis2/saaj/SOAPHeaderImpl.java	(revision 749891)
+++ modules/saaj/src/org/apache/axis2/saaj/SOAPHeaderImpl.java	(working copy)
@@ -30,6 +30,7 @@
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12Factory;
 import org.apache.axiom.soap.impl.dom.soap12.SOAP12HeaderBlockImpl;
 import org.apache.axis2.namespace.Constants;
+import org.w3c.dom.Element;
 
 import javax.xml.namespace.QName;
 import javax.xml.soap.Name;
@@ -127,6 +128,30 @@
         return soapHeaderElement;
     }
 
+    protected Element appendElement(ElementImpl child) throws SOAPException {     
+        OMNamespace ns = new NamespaceImpl(child.getNamespaceURI(),
+                                           child.getPrefix());
+        SOAPHeaderBlock headerBlock = null;
+        if (this.element.getOMFactory() instanceof SOAP11Factory) {
+            headerBlock = new SOAP11HeaderBlockImpl(child.getLocalName(), ns,
+                                                    omSOAPHeader,
+                                                    (SOAPFactory)this.element.getOMFactory());
+        } else {
+            headerBlock = new SOAP12HeaderBlockImpl(child.getLocalName(), ns,
+                                                    omSOAPHeader,
+                                                    (SOAPFactory)this.element.getOMFactory());
+
+        }
+     
+        element.setUserData(SAAJ_NODE, this, null);
+        
+        SOAPHeaderElementImpl soapHeaderElement = new SOAPHeaderElementImpl(headerBlock);
+        copyContents(soapHeaderElement, child);
+        soapHeaderElement.element.setUserData(SAAJ_NODE, soapHeaderElement, null);
+        soapHeaderElement.setParentElement(this);
+        return soapHeaderElement;
+    }
+    
     /**
      * Creates a new <CODE>SOAPHeaderElement</CODE> object initialized with the specified name and
      * adds it to this <CODE>SOAPHeader</CODE> object.
Index: modules/saaj/src/org/apache/axis2/saaj/SOAPElementImpl.java
===================================================================
--- modules/saaj/src/org/apache/axis2/saaj/SOAPElementImpl.java	(revision 749891)
+++ modules/saaj/src/org/apache/axis2/saaj/SOAPElementImpl.java	(working copy)
@@ -35,6 +35,7 @@
 import org.w3c.dom.Attr;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.Document;
+import org.w3c.dom.Element;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
@@ -848,4 +849,81 @@
     public NamedNodeMap getAttributes() {
         return element.getAttributes();
     }
+        
+    public Node removeChild(Node oldChild) throws DOMException {
+        if (oldChild instanceof SOAPElementImpl) {
+            oldChild = ((SOAPElementImpl)oldChild).getElement();
+        } else if (oldChild instanceof TextImplEx) {
+            // TODO: handle text nodes somehow
+        }
+        return element.removeChild(oldChild);
+    }
+    
+    public Node appendChild(Node child) throws DOMException {        
+        if (getOwnerDocument() != child.getOwnerDocument()) {
+            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, "Wrong document");
+        }
+        try {
+            if (child instanceof Text) {
+                return appendText((Text)child);
+            } else if (child instanceof ElementImpl) {
+                return appendElement((ElementImpl)child);
+            }
+        } catch (SOAPException e) {
+            DOMException ex = 
+                new DOMException(DOMException.HIERARCHY_REQUEST_ERR, e.getMessage());
+            ex.initCause(e);
+            throw ex;
+        }
+        
+        return super.appendChild(child);        
+    }
+    
+    protected Text appendText(Text child) throws SOAPException {
+        String text = child.getData();
+        Text textNode = getOwnerDocument().createTextNode(text);
+        NodeImpl node = ((NodeImpl)element.appendChild(textNode));
+        TextImplEx saajTextNode = new TextImplEx(text, this);
+        node.setUserData(SAAJ_NODE, saajTextNode, null);
+        return saajTextNode;
+    }
+    
+    protected Element appendElement(ElementImpl child) throws SOAPException {
+        String namespaceURI = child.getNamespaceURI();
+        String prefix = child.getPrefix();
+
+        SOAPElementImpl childEle = new SOAPElementImpl(child);
+        
+        childEle.element.setUserData(SAAJ_NODE, childEle, null);
+        if (namespaceURI != null && namespaceURI.trim().length() > 0) {
+            childEle.element.setNamespace(childEle.element.declareNamespace(namespaceURI, prefix));
+        }
+        element.appendChild(childEle.element);
+        ((NodeImpl)childEle.element.getParentNode()).setUserData(SAAJ_NODE, this, null);
+        childEle.setParentElement(this);
+        return childEle;
+    }
+    
+    protected void copyContents(SOAPElementImpl childEle, Node child) throws SOAPException {
+        NamedNodeMap attributes = child.getAttributes();
+        for (int i = 0; i < attributes.getLength(); i++) {
+            Attr node = (Attr)attributes.item(i);
+            QName name;
+            if (node.getPrefix() == null) {
+                name = new QName(node.getNamespaceURI(), 
+                                 node.getLocalName());
+            } else {
+                name = new QName(node.getNamespaceURI(), 
+                                 node.getLocalName(),
+                                 node.getPrefix());
+            }
+            childEle.addAttribute(name, node.getValue());
+        }
+
+        NodeList children = child.getChildNodes();        
+        for (int i = 0; i < children.getLength(); i++) {
+            Node node = children.item(i);
+            childEle.appendChild(node);
+        }
+    }
 }
