<?xml version="1.0" encoding="UTF-8"?>

<!-- $Revision: 1.57 $ $Date: 2004/01/25 17:55:32 $ -->

<project default="default"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven"
    xmlns:define="jelly:define"
    xmlns:deploy="geronimo:deploy"
    xmlns:aggregate="local:aggregate"
    xmlns:modules="local:modules">

    <j:set var="release.id" value="${pom.standardToLegacyId(pom.id)}-${pom.currentVersion}"/>

    <goal name="deploy:server">
        <j:set var="g.repo" value="${maven.repo.local}/geronimo/jars"/>
        <ant:echo message="in deploy:server"/>
        <deploy:deploy
            deployconfigid="org/apache/geronimo/Server"
            deployoutfile="target/Server.car"
            deployurl="${g.repo}/geronimo-security-package-DEV.jar,${g.repo}/geronimo-transaction-package-DEV.jar,${g.repo}/geronimo-connector-package-DEV.jar"/>
        <ant:echo message="did deploy:test"/>
    </goal>
    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <goal name="modules:reactor:init">
        <!--
           | Determine the includes which the reactor will use.
           |
           | Uses 4 properties to control which modules will be include:
           |
           | modules.types      Comma seperated list of module types (ie. specs or modules)
           | modules.includes   Comma seperated list of module names (ie. common, core, ...)
           | modules            Same as modules.includes, modules.includes initializes to this value
           | modules.excludes   Comma seperated list of module names to exclude
           |
           | The end result is that modules.reactor.includes is set to the project.xml files
           | to include.  This is the value the reactor will use.
           |
           | Example, to only build the common and core modules:
           |
           | maven -Dmodules=common,core
         -->

        <j:if test="${context.getVariable('module.types') == null}">
            <j:set var="module.types" value="modules,specs"/>
        </j:if>

        <j:if test="${context.getVariable('modules') == null}">
            <!-- The default is to build everything -->
            <j:set var="modules" value="*"/>
        </j:if>

        <j:if test="${context.getVariable('module.includes') == null}">
            <j:set var="module.includes" value="${modules}"/>
        </j:if>

        <j:if test="${context.getVariable('module.excludes') == null}">
            <j:set var="module.excludes" value=""/>
        </j:if>

        <u:tokenize var="types" delim=",">${module.types}</u:tokenize>

        <ant:fileScanner var="scanner">
            <ant:fileset dir="${basedir}">
                <j:forEach var="type" items="${types}">
                    <j:choose>
                        <j:when test="${context.getVariable('module.includes') == '*'}">
                            <ant:include name="${type}/*/project.xml"/>
                        </j:when>
                        <j:otherwise>
                            <u:tokenize var="includes" delim=",">${module.includes}</u:tokenize>
                            <j:forEach var="include" items="${includes}">
                                <u:available file="${basedir}/${type}/${include}/project.xml">
                                    <ant:include name="${type}/${include}/project.xml"/>
                                </u:available>
                            </j:forEach>
                        </j:otherwise>
                    </j:choose>

                    <j:choose>
                        <j:when test="${context.getVariable('module.excludes') == '*'}">
                            <ant:exclude name="${type}/*/project.xml"/>
                        </j:when>
                        <j:otherwise>
                            <u:tokenize var="excludes" delim=",">${module.excludes}</u:tokenize>
                            <j:forEach var="exclude" items="${excludes}">
                                <u:available file="${basedir}/${type}/${exclude}/project.xml">
                                    <ant:exclude name="${type}/${exclude}/project.xml"/>
                                </u:available>
                            </j:forEach>
                        </j:otherwise>
                    </j:choose>
                </j:forEach>
            </ant:fileset>
        </ant:fileScanner>

        <!-- Setup the includes which will be used by the reactor -->
        <j:forEach var="file" items="${scanner.iterator()}">
            <!--
               | Would be nice if reactor would take a file set, but for now just remove
               | the baseddir portion of the file's name.  So this will essentially strip off
               | ${basedir}
             -->
            <j:set var="filename"
                value="${file.parentFile.parentFile.name}/${file.parentFile.name}/${file.name}"/>
            <j:choose>
                <j:when test="${context.getVariable('modules.reactor.includes') == null}">
                    <j:set var="modules.reactor.includes" value="${filename}"/>
                </j:when>
                <j:otherwise>
                    <j:set var="modules.reactor.includes" value="${modules.reactor.includes},${filename}"/>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </goal>

    <!-- Helper tags for modules -->
    <define:taglib uri="local:modules">

        <define:tag name="reactor">
            <j:if test="${aggregate != null}">
                <j:set var="modules.aggregate.skip" value="true"/>
                <j:if test="${aggregate}">
                    <j:set var="modules.aggregate.skip" value="false"/>
                </j:if>
            </j:if>

            <attainGoal name="modules:reactor:init"/>

            <j:choose>
                <j:when test="${goals != null}">
                    <maven:reactor
                        basedir="${basedir}"
                        includes="${modules.reactor.includes}"
                        banner="Executing (${goals}):"
                        ignoreFailures="false"
                        goals="${goals}"
                        postProcessing="true"
                        />
                </j:when>
                <j:when test="${goals == null}">
                    <maven:reactor
                        basedir="${basedir}"
                        includes="${modules.reactor.includes}"
                        banner="Executing (${goals}):"
                        ignoreFailures="false"
                        postProcessing="true"
                        />
                </j:when>
            </j:choose>

            <!-- Set reactor projects in parent scope so goals have access to it -->
            <j:set var="reactorProjects" value="${reactorProjects}" scope="parent"/>

            <!-- Optionaly perform module aggregation -->
            <j:if test="${context.getVariable('modules.aggregate.skip') != 'true'}">
                <attainGoal name="modules:aggregate"/>
            </j:if>
        </define:tag>

    </define:taglib>

    <goal name="modules:reactor">
        <modules:reactor/>
    </goal>

    <goal name="modules:default">
        <modules:reactor goals="default"/>
    </goal>

    <goal name="modules:build">
        <modules:reactor goals="build"/>
    </goal>

    <goal name="modules:site">
        <modules:reactor goals="site" aggregate="false"/>
    </goal>

    <goal name="modules:javadoc">
        <modules:reactor goals="javadoc" aggregate="false"/>
    </goal>

    <goal name="modules:clover">
        <modules:reactor goals="clover" aggregate="false"/>
    </goal>

    <goal name="modules:clean">
        <modules:reactor goals="clean" aggregate="false"/>
    </goal>

    <goal name="modules:clobber">
        <modules:reactor goals="clobber" aggregate="false"/>
    </goal>

    <goal name="modules:jar:deploy">
        <modules:reactor goals="jar:deploy"/>
    </goal>

    <preGoal name="clean:clean">
        <!-- Do not clean modules if are clobbering them -->
        <j:if test="${clobbering != 'true'}">
            <attainGoal name="modules:clean"/>
        </j:if>
    </preGoal>

    <preGoal name="clobber">
        <j:set var="clobbering" value="true"/>
        <attainGoal name="modules:clobber"/>
    </preGoal>

    <goal name="jar:deploy">
        <attainGoal name="modules:jar:deploy"/>
    </goal>

    <goal name="default">
        <attainGoal name="modules:default"/>
    </goal>


    <!-- ========================= -->
    <!-- Module Output Aggregation -->
    <!-- ========================= -->

    <goal name="aggregate">
        <attainGoal name="modules:reactor"/>
        <attainGoal name="modules:aggregate"/>
    </goal>

    <!-- Helper tags for module aggregation -->
    <define:taglib uri="local:aggregate">

        <define:tag name="copy">
            <u:available file="${source}" xmlns="jelly:ant">
                <mkdir dir="${target}"/>
                <copy todir="${target}">
                    <fileset dir="${source}">
                        <include name="${include}"/>
                    </fileset>
                </copy>
            </u:available>
        </define:tag>

        <define:tag name="scripts">
            <aggregate:copy
                source="${module.root}/src/bin"
                target="${aggregate.dir}/bin"
                include="**/*"/>
        </define:tag>

        <define:tag name="config">
            <aggregate:copy
                source="${module.root}/src/conf"
                target="${aggregate.dir}/etc"
                include="**/*"/>
        </define:tag>

        <define:tag name="deploy">
            <aggregate:copy
                source="${module.root}/src/deploy"
                target="${aggregate.dir}/deploy"
                include="**/*"/>
        </define:tag>

        <define:tag name="libraries">
            <aggregate:copy
                source="${module.root}/target"
                target="${aggregate.dir}/lib"
                include="*.jar"/>
        </define:tag>

        <define:tag name="default">
            <j:if test="${scripts == null || scripts == 'true'}">
                <aggregate:scripts/>
            </j:if>

            <j:if test="${config == null || config == 'true'}">
                <aggregate:config/>
            </j:if>

            <j:if test="${deploy == null || deploy == 'true'}">
                <aggregate:deploy/>
            </j:if>

            <j:if test="${libraries == null || libraries == 'true'}">
                <aggregate:libraries/>
            </j:if>
        </define:tag>

    </define:taglib>

    <goal name="modules:aggregate"
        description="Aggregates module target output.">

        <ant:echo>Aggregating modules...</ant:echo>

        <!-- Setup the target aggregation directory -->
        <j:set var="aggregate.dir" value="${basedir}/target/${release.id}"/>
        <ant:mkdir dir="${aggregate.dir}"/>

        <j:forEach var="module" items="${reactorProjects}">
            <ant:echo>Processing ${module.id}...</ant:echo>

            <!-- Get the modules root directory -->
            <j:set var="module.root" value="${module.file.parent}"/>

            <!-- Invoke the aggregation hook -->
            <j:set var="hook_name" value="modules:aggregate:${module.id}"/>
            <!-- If there is no goal defined then use the default -->
            <j:set var="werkzProject" value="${org.apache.commons.jelly.werkz.Project}"/>
            <j:if test="${werkzProject.getGoal(hook_name) == null}">
                <j:set var="hook_name" value="modules:aggregate:default"/>
            </j:if>
            <attainGoal name="${hook_name}"/>

            <!-- Process dependencies -->
            <j:forEach var="artifact" items="${module.artifacts}">
                <j:set var="dependency" value="${artifact.dependency}"/>
                <j:if test="${dependency.getProperty('runtime') == 'true'}">
                    <ant:echo>Processing dependency: ${dependency.id}</ant:echo>

                    <j:choose>
                        <j:when test="${dependency.getProperty('destinations') == null}">
                            <j:set var="destinations" value="lib"/>
                        </j:when>
                        <j:otherwise>
                            <j:set var="destinations" value="${dependency.getProperty('destinations')}"/>
                        </j:otherwise>
                    </j:choose>

                    <u:tokenize var="destinationSet" delim="," trim="true">${destinations}</u:tokenize>

                    <j:forEach var="destination" items="${destinationSet}" trim="true">
                        <j:set var="targetDir" value="${aggregate.dir}/${destination.trim()}"/>
                        <ant:mkdir dir="${targetDir}"/>
                        <ant:copy todir="${targetDir}" file="${artifact.path}"/>
                    </j:forEach>
                </j:if>
            </j:forEach>
        </j:forEach>

        <!-- Cleanse some stuff -->
        <u:available file="${aggregate.dir}/bin" xmlns="jelly:ant">
            <!-- Fix permissions -->
            <chmod perm="ugo+x">
                <fileset dir="${aggregate.dir}/bin">
                    <include name="*"/>
                    <exclude name="*.bat"/>
                    <exclude name="*.cmd"/>
                </fileset>
            </chmod>
            <chmod perm="ugo-x">
                <fileset dir="${aggregate.dir}/bin">
                    <include name="*.bat"/>
                    <include name="*.cmd"/>
                </fileset>
            </chmod>

            <!-- Fix CRLF -->
            <fixcrlf srcdir="${aggregate.dir}/bin" eol="lf" eof="remove">
                <include name="*"/>
                <exclude name="*.bat"/>
                <exclude name="*.cmd"/>
            </fixcrlf>
            <fixcrlf srcdir="${aggregate.dir}/bin" eol="crlf">
                <include name="*.bat"/>
                <include name="*.cmd"/>
            </fixcrlf>
        </u:available>
    </goal>


    <!-- =============================== -->
    <!-- Module Output Aggregation Hooks -->
    <!-- =============================== -->

    <goal name="modules:aggregate:default">
        <aggregate:default/>
    </goal>

    <goal name="modules:aggregate:geronimo:geronimo-web">
        <!-- Do not do the default libraries stuff -->
        <aggregate:default libraries="false"/>

        <!-- Put geronimo-web into deploy/jetty/lib -->
        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/deploy/jetty/lib"
            include="*.jar"/>
    </goal>

    <goal name="modules:aggregate:geronimo:geronimo-kernel">
        <!-- Do not do the default libraries stuff -->
        <aggregate:default libraries="false"/>

        <!-- Put geronimo-kernel into deploy/bootlib -->
        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/bootlib"
            include="*.jar"/>
    </goal>

    <goal name="modules:aggregate:geronimo-spec:geronimo-spec-j2ee-deployment">
        <!-- Do not do the default libraries stuff -->
        <aggregate:default libraries="false"/>

        <!-- Put j2ee-deployment into deploy/bootlib -->
        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/bootlib"
            include="*.jar"/>
    </goal>

    <goal name="modules:aggregate:geronimo:geronimo-web-console">
        <!-- Do not do the default libraries stuff -->
        <aggregate:default libraries="false"/>

        <!-- Put geronimo-web-console into deploy/jetty/lib -->
        <aggregate:copy
            source="${module.root}/target"
            target="${aggregate.dir}/deploy/jetty"
            include="*.war"/>
    </goal>


    <!-- =============================== -->
    <!-- Documentation & Site Generation -->
    <!-- =============================== -->

    <goal name="javadoc">
        <attainGoal name="modules:javadoc"/>
    </goal>

    <preGoal name="xdoc:jelly-transform">
        <attainGoal name="html2xdoc"/>
        <attainGoal name="faq"/>
    </preGoal>

    <!-- Turn off reports for the top-level project -->
    <postGoal name="xdoc:register-reports">
        <attainGoal name="maven-license-plugin:deregister"/>
        <attainGoal name="maven-checkstyle-plugin:deregister"/>
        <attainGoal name="maven-pmd-plugin:deregister"/>
        <attainGoal name="maven-simian-plugin:deregister"/>
        <attainGoal name="maven-jdepend-plugin:deregister"/>
        <attainGoal name="maven-statcvs-plugin:deregister"/>
        <attainGoal name="maven-jxr-plugin:deregister"/>
        <attainGoal name="maven-javadoc-plugin:deregister"/>
        <attainGoal name="maven-junit-report-plugin:deregister"/>
        <attainGoal name="maven-clover-plugin:deregister"/>

        <!-- Run some useful top-level reports -->
        <!--<attainGoal name="maven-changelog-plugin:deregister"/>-->
        <!--<attainGoal name="maven-file-activity-plugin:deregister"/>-->
        <!--<attainGoal name="maven-developer-activity-plugin:deregister"/>-->
    </postGoal>

    <preGoal name="site">
        <attainGoal name="modules:aggregate:site"/>
    </preGoal>

    <goal name="modules:aggregate:site" prereqs="modules:site"
        description="Copy the generated websites of all the modules into the root project">

        <ant:echo>Aggregating module site documentation...</ant:echo>

        <!-- Setup the target aggregation directory -->
        <j:set var="aggregate.dir" value="${basedir}/target/docs"/>
        <ant:mkdir dir="${aggregate.dir}"/>

        <j:forEach var="module" items="${reactorProjects}">
            <ant:echo>Processing ${module.id}...</ant:echo>

            <!-- Get the modules root directory -->
            <j:set var="module.root" value="${module.file.parent}"/>

            <!-- Setup the target dir under docs -->
            <j:set var="moduleDirName">${module.file.parentFile.name}</j:set>
            <j:set var="moduleTypeDirName">${module.file.parentFile.parentFile.name}</j:set>
            <j:set var="outputDir">${aggregate.dir}/${moduleTypeDirName}/${moduleDirName}</j:set>

            <!-- Copy module docs -->
            <ant:echo>Copying docs to ${outputDir}...</ant:echo>
            <ant:mkdir dir="${outputDir}"/>
            <ant:copy todir="${outputDir}">
                <ant:fileset dir="${module.root}/target/docs"/>
            </ant:copy>
        </j:forEach>
    </goal>

    <goal name="site:tocvs"
        description="Creates the entire website and copies it to the local CVS repository so that it can be checked in to update the Incubator site">

        <j:jelly xmlns="jelly:ant">

            <j:if test="${empty(geronimo.cvs.docdir)}">
                <j:set var="geronimo.cvs.docdir" value="../incubator-site/build/site/projects/geronimo"/>
            </j:if>

            <mkdir dir="${geronimo.cvs.docdir}"/>
            <copy todir="${geronimo.cvs.docdir}">
                <fileset dir="${basedir}/target/docs"/>
            </copy>

        </j:jelly>
    </goal>


    <!-- ==================================================== -->
    <!-- Helper to run Apache Geronimo from the current build -->
    <!-- ==================================================== -->

    <goal name="run">
        <ant:echo>Run targets are currently disabled.  Please, check out the last working revision last_geronimombean.</ant:echo>

        <!--
           | Should really execute the system script but for now...
         -->
<!--        <j:set var="run.dir" value="${basedir}/target/${release.id}"/>-->
<!--        <j:jelly xmlns="jelly:ant">-->
<!--            <java-->
<!--                classname="org.codehaus.classworlds.Launcher"-->
<!--                fork="true"-->
<!--                maxmemory="128m"-->
<!--                failonerror="true"-->
<!--                dir="${run.dir}">-->
<!---->
<!--                <classpath>-->
<!--                    <pathelement location="${run.dir}/lib/classworlds-SNAPSHOT.jar"/>-->
<!--                    <pathelement location="${run.dir}/lib/geronimo-core-rmiclassloaderspi.jar"/>-->
<!--                </classpath>-->
<!---->
<!--                <sysproperty key="classworlds.conf" value="${run.dir}/etc/classworlds.conf"/>-->
<!--                <sysproperty key="program.name" value="maven:run"/>-->
<!--                <sysproperty key="twiddle.home" value="${run.dir}"/>-->
<!--                <sysproperty key="java.rmi.server.RMIClassLoaderSpi" value="org.apache.geronimo.rmi.RMIClassLoaderSpiImpl"/>-->
<!--                <arg value="geronimo/start"/>-->
<!--            </java>-->
<!--        </j:jelly>-->
    </goal>

    <goal name="run:main">
        <ant:echo>Run targets are currently disabled.  Please, check out the last working revision last_geronimombean.</ant:echo>

<!--        <j:set var="run.dir" value="${basedir}/target/${release.id}"/>-->
<!---->
<!--        <j:jelly xmlns="jelly:ant">-->
<!---->
<!--            <property environment="env"/>-->
<!--            <java classname="org.apache.geronimo.kernel.Main"-->
<!--                fork="true"-->
<!--                maxmemory="256m"-->
<!--                failonerror="true"-->
<!--                dir="${run.dir}">-->
<!---->
<!--                <jvmarg value="-ea"/>-->
<!--                <classpath>-->
<!--                    <pathelement path="${env.JAVA_HOME}/lib/tools.jar"/>-->
<!--                    <pathelement path="${run.dir}/etc"/>-->
<!--                    <fileset dir="${run.dir}/bootlib">-->
<!--                        <include name="*.jar"/>-->
<!--                    </fileset>-->
<!---->
                    <!-- temporary addition allows RMI to be used, such as with the JMX RMI connector -->
<!--                    <pathelement location="${run.dir}/lib/geronimo-core-rmiclassloaderspi.jar"/>-->
<!--                </classpath>-->
<!---->
<!--                <sysproperty key="program.name" value="maven:run"/>-->
<!--                <sysproperty key="java.rmi.server.RMIClassLoaderSpi" value="org.apache.geronimo.rmi.RMIClassLoaderSpiImpl"/>-->
<!--            </java>-->
<!--        </j:jelly>-->
    </goal>

    <goal name="debug:main">
        <j:set var="run.dir" value="${basedir}/target/${release.id}"/>
        <j:jelly xmlns="jelly:ant">

            <property environment="env"/>
            <java classname="org.apache.geronimo.kernel.Main"
                fork="true"
                maxmemory="128m"
                failonerror="true"
                dir="${run.dir}">


                <classpath>
                    <pathelement path="${env.JAVA_HOME}/lib/tools.jar"/>
                    <pathelement path="${run.dir}/etc"/>
                    <fileset dir="${run.dir}/bootlib">
                        <include name="*.jar"/>
                    </fileset>

                    <!-- temporary addition allows RMI to be used, such as with the JMX RMI connector -->
                    <pathelement location="${run.dir}/lib/geronimo-core-rmiclassloaderspi.jar"/>
                </classpath>

                <jvmarg value="-Xdebug"/>
                <jvmarg value="-Xnoagent"/>
                <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y"/>

                <sysproperty key="java.compiler" value="NONE"/>
                <sysproperty key="program.name" value="maven:run"/>
                <sysproperty key="java.rmi.server.RMIClassLoaderSpi" value="org.apache.geronimo.rmi.RMIClassLoaderSpiImpl"/>
            </java>
        </j:jelly>
    </goal>

    <goal name="bootstrap:run">
        <j:set var="run.dir" value="${basedir}/modules"/>

        <j:jelly xmlns="jelly:ant">

            <property environment="env"/>
            <java classname="org.apache.geronimo.deployment.Bootstrap"
                fork="true"
                maxmemory="256m"
                failonerror="true"
                dir="${run.dir}">

                <jvmarg value="-ea"/>
                <classpath>
                    <pathelement path="${env.JAVA_HOME}/lib/tools.jar"/>
                    <!--pathelement path="${run.dir}/etc"/-->
                    <fileset dir="${maven.repo.local}/cglib/jars">
                          <include name="cglib-HEAD-20031111.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/commons-logging/jars">
                          <include name="commons-logging-1.0.3.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/log4j/jars">
                          <include name="log4j-1.2.8.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/mx4j/jars">
                          <include name="mx4j-SNAPSHOT.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/xerces/jars">
                          <include name="xercesImpl-2.6.0.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/xml-apis/jars">
                          <include name="xml-apis-1.0.b2.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/xml-commons-resolver/jars">
                          <include name="xml-commons-resolver-1.1.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/geronimo/jars">
                        <include name="geronimo-kernel-${pom.currentVersion}.jar"/>
                        <include name="geronimo-deployment-${pom.currentVersion}.jar"/>
                        <include name="geronimo-common-${pom.currentVersion}.jar"/>
                        <!-- not needed for boot, but I'm not sure how to load otherwise-->
                        <include name="geronimo-web-${pom.currentVersion}.jar"/>
                        <include name="geronimo-core-${pom.currentVersion}.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/geronimo-spec/jars">
                        <include name="geronimo-spec-jta-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-j2ee-connector-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-j2ee-jacc-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-jsp-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-servlet-${pom.currentVersion}.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/jetty/jars">
                          <include name="jetty-SNAPSHOT.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/ant/jars">
                          <include name="ant-1.5.2.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/tomcat/jars">
                        <include name="jasper-compiler-4.0.4.jar"/>
                        <include name="jasper-runtime-4.0.4.jar"/>
                    </fileset>
                    <!-- security -->
                    <fileset dir="${maven.repo.local}/regexp/jars">
                          <include name="regexp-1.3-dev.jar"/>
                    </fileset>
                    <!-- connector work manager -->
                    <fileset dir="${maven.repo.local}/concurrent/jars">
                          <include name="concurrent-1.3.2.jar"/>
                    </fileset>
                    <!-- connector openjca loading test -->
                    <!-- uncomment if you want to load this connector.  Also set the path in bootstrapped-service.xml-->
                    <!--fileset dir="${maven.repo.local}/openejb-jca/jars">
                          <include name="openejb-jca-DEV.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/hsqldb/jars">
                          <include name="hsqldb-1.7.1.jar"/>
                    </fileset-->
                    <!-- WebDAV, not required for boot. To be fixed.-->
                    <fileset dir="${maven.repo.local}/tomcat/jars">
                          <include name="catalina-5.0.16.jar"/>
                          <include name="catalina-optional-5.0.16.jar"/>
                          <include name="naming-common-5.0.16.jar"/>
                          <include name="naming-resources-5.0.16.jar"/>
                          <include name="servlets-common-5.0.16.jar"/>
                          <include name="servlets-default-5.0.16.jar"/>
                          <include name="servlets-webdav-5.0.16.jar"/>
                          <include name="tomcat-util-5.0.16.jar"/>
                    </fileset>
                </classpath>

                <arg value="file:${run.dir}/deployment/src/test-resources/etc/bootstrapped-service.xml"/>

            </java>
        </j:jelly>
    </goal>

    <goal name="bootstrap:debug">
        <j:set var="run.dir" value="${basedir}/modules"/>
        <j:jelly xmlns="jelly:ant">

            <property environment="env"/>
            <java classname="org.apache.geronimo.deployment.Bootstrap"
                fork="true"
                maxmemory="256m"
                failonerror="true"
                dir="${run.dir}">


                <classpath>
                    <pathelement path="${env.JAVA_HOME}/lib/tools.jar"/>
                    <!--pathelement path="${run.dir}/etc"/-->
                    <fileset dir="${maven.repo.local}/cglib/jars">
                          <include name="cglib-HEAD-20031111.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/commons-logging/jars">
                          <include name="commons-logging-1.0.3.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/log4j/jars">
                          <include name="log4j-1.2.8.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/mx4j/jars">
                          <include name="mx4j-SNAPSHOT.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/xerces/jars">
                          <include name="xercesImpl-2.6.0.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/xml-apis/jars">
                          <include name="xml-apis-1.0.b2.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/xml-commons-resolver/jars">
                          <include name="xml-commons-resolver-1.1.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/geronimo/jars">
                        <include name="geronimo-kernel-${pom.currentVersion}.jar"/>
                        <include name="geronimo-deployment-${pom.currentVersion}.jar"/>
                        <include name="geronimo-common-${pom.currentVersion}.jar"/>
                        <!-- not needed for boot, but I'm not sure how to load otherwise-->
                        <include name="geronimo-web-${pom.currentVersion}.jar"/>
                        <include name="geronimo-core-${pom.currentVersion}.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/geronimo-spec/jars">
                        <include name="geronimo-spec-jta-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-j2ee-connector-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-j2ee-jacc-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-jsp-${pom.currentVersion}.jar"/>
                        <include name="geronimo-spec-servlet-${pom.currentVersion}.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/jetty/jars">
                          <include name="jetty-SNAPSHOT.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/ant/jars">
                          <include name="ant-1.5.2.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/tomcat/jars">
                        <include name="jasper-compiler-4.0.4.jar"/>
                        <include name="jasper-runtime-4.0.4.jar"/>
                    </fileset>
                    <!-- security -->
                    <fileset dir="${maven.repo.local}/regexp/jars">
                          <include name="regexp-1.3-dev.jar"/>
                    </fileset>
                    <!-- connector work manager -->
                    <fileset dir="${maven.repo.local}/concurrent/jars">
                          <include name="concurrent-1.3.2.jar"/>
                    </fileset>
                    <!-- connector openjca loading test -->
                    <!-- uncomment if you want to load this connector.  Also set the path in bootstrapped-service.xml-->
                    <!--fileset dir="${maven.repo.local}/openejb-jca/jars">
                          <include name="openejb-jca-DEV.jar"/>
                    </fileset>
                    <fileset dir="${maven.repo.local}/hsqldb/jars">
                          <include name="hsqldb-1.7.1.jar"/>
                    </fileset-->
                    <!-- WebDAV, not required for boot. To be fixed.-->
                    <fileset dir="${maven.repo.local}/tomcat/jars">
                          <include name="catalina-5.0.16.jar"/>
                          <include name="catalina-optional-5.0.16.jar"/>
                          <include name="naming-common-5.0.16.jar"/>
                          <include name="naming-resources-5.0.16.jar"/>
                          <include name="servlets-common-5.0.16.jar"/>
                          <include name="servlets-default-5.0.16.jar"/>
                          <include name="servlets-webdav-5.0.16.jar"/>
                          <include name="tomcat-util-5.0.16.jar"/>
                    </fileset>
                </classpath>

                <arg value="file:${run.dir}/deployment/src/test-resources/etc/bootstrapped-service.xml"/>

                <jvmarg value="-Xdebug"/>
                <jvmarg value="-Xnoagent"/>
                <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y"/>

                <sysproperty key="java.compiler" value="NONE"/>
                <sysproperty key="program.name" value="maven:run"/>
                <sysproperty key="java.rmi.server.RMIClassLoaderSpi" value="org.apache.geronimo.rmi.RMIClassLoaderSpiImpl"/>
            </java>
        </j:jelly>
    </goal>

</project>
