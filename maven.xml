<?xml version="1.0" encoding="UTF-8"?>

<!-- $Revision: 1.28 $ $Date: 2003/08/27 20:40:51 $ -->

<project default="default"
  xmlns:j="jelly:core"
  xmlns:u="jelly:util"
  xmlns:ant="jelly:ant"
  xmlns:maven="jelly:maven"
  xmlns:define="jelly:define"
  xmlns:aggregate="local:aggregate"
  xmlns:modules="local:modules">
  
  <j:set var="release.id" value="${pom.standardToLegacyId(pom.id)}-${pom.currentVersion}"/>
  
  <!-- ======= -->
  <!-- Modules -->
  <!-- ======= -->
  
  <!-- Helper tags for modules -->
  <define:taglib uri="local:modules">
    
    <define:tag name="reactor">
      <j:if test="${aggregate != null}">
        <j:set var="modules.aggregate.skip" value="true"/>
        <j:if test="${aggregate}">
          <j:set var="modules.aggregate.skip" value="false"/>
        </j:if>
      </j:if>
      
      <!--
         | TODO: Need to make this more friendly for including a few modules
       -->
       
      <j:if test="${empty(module)}">
        <j:set var="module" value="*"/>
      </j:if>
      
      <j:if test="${context.getVariable('modules.includes') == null}">
        <j:set var="modules.includes" value="modules/${module}/project.xml,specs/${module}/project.xml"/>
      </j:if>
      
      <j:if test="${context.getVariable('modules.excludes') == null}">
        <j:set var="modules.excludes" value="modules/xbeans/project.xml"/>
      </j:if>
      
      <j:choose>
        <j:when test="${goals != null}">
          <maven:reactor
              basedir="${basedir}"
              includes="${modules.includes}"
              excludes="${modules.excludes}"
              banner="Executing (${goals}):"
              ignoreFailures="false"
              goals="${goals}"
              postProcessing="true"
          />
        </j:when>
        <j:when test="${goals == null}">
          <maven:reactor
              basedir="${basedir}"
              includes="${modules.includes}"
              excludes="${modules.excludes}"
              banner="Executing (${goals}):"
              ignoreFailures="false"
              postProcessing="true"
          />
        </j:when>
      </j:choose>
      
      <!-- Optionaly perform module aggregation -->
      <j:if test="${context.getVariable('modules.aggregate.skip') != 'true'}">
        <j:set var="reactorProjects" value="${reactorProjects}" scope="parent"/>
        <attainGoal name="modules:aggregate"/>
      </j:if>
    </define:tag>
  
  </define:taglib>
  
  <goal name="modules:reactor">
    <modules:reactor/>
  </goal>
  
  <goal name="modules:default">
    <modules:reactor goals="default"/>
  </goal>
  
  <goal name="modules:build">
    <modules:reactor goals="build"/>
  </goal>
   
  <goal name="modules:site">
    <modules:reactor goals="site" aggregate="false"/>
  </goal>
  
  <goal name="modules:javadoc">
    <modules:reactor goals="javadoc" aggregate="false"/>
  </goal>
  
  <goal name="modules:clean">
    <modules:reactor goals="clean" aggregate="false"/>
  </goal>
  
  <goal name="modules:clobber">
    <modules:reactor goals="clobber" aggregate="false"/>
  </goal>
  
  <goal name="modules:jar:deploy">
    <modules:reactor goals="jar:deploy"/>
  </goal>
  
  <preGoal name="clean:clean">
    <!-- Do not clean modules if are clobbering them -->
    <j:if test="${clobbering != 'true'}">
      <attainGoal name="modules:clean"/>
    </j:if>
  </preGoal>
  
  <preGoal name="clobber">
    <j:set var="clobbering" value="true"/>
    <attainGoal name="modules:clobber"/>
  </preGoal>
  
  <goal name="jar:deploy">
    <attainGoal name="modules:jar:deploy"/>
  </goal>
  
  <goal name="default">
    <attainGoal name="modules:default"/>
  </goal>
  
  
  <!-- ========================= -->
  <!-- Module Output Aggregation -->
  <!-- ========================= -->
  
  <!-- Helper tags for module aggregation -->
  <define:taglib uri="local:aggregate">
    
    <define:tag name="copy">
      <u:available file="${source}" xmlns="jelly:ant">
        <mkdir dir="${target}"/>
        <copy todir="${target}">
          <fileset dir="${source}">
            <include name="${include}"/>
          </fileset>
        </copy>
      </u:available>
    </define:tag>
    
    <define:tag name="scripts">
      <aggregate:copy
        source="${module.root}/src/bin"
        target="${aggregate.dir}/bin"
        include="**/*"/>
    </define:tag>
    
    <define:tag name="config">
      <aggregate:copy
        source="${module.root}/src/conf"
        target="${aggregate.dir}/etc"
        include="**/*"/>
    </define:tag>
    
    <define:tag name="libraries">
      <aggregate:copy
        source="${module.root}/target"
        target="${aggregate.dir}/lib"
        include="*.jar"/>
    </define:tag>
    
    <define:tag name="default">
      <aggregate:scripts/>
      <aggregate:config/>
      <aggregate:libraries/>
    </define:tag>
    
  </define:taglib>
  
  <goal name="modules:aggregate"
        description="Aggregates module target output.">
        
    <ant:echo>Aggregating modules...</ant:echo>
    
    <!-- Setup the target aggregation directory -->
    <j:set var="aggregate.dir" value="${basedir}/target/${release.id}"/>
    <ant:mkdir dir="${aggregate.dir}"/>
    
    <j:forEach var="module" items="${reactorProjects}">
      <ant:echo>Processing ${module.id}...</ant:echo>
      
      <!-- Get the modules root directory -->
      <j:set var="module.root" value="${module.file.parent}"/>
      
      <!-- Invoke the aggregation hook -->
      <j:set var="hook.name" value="modules:aggregate:${module.id}"/>
      <!-- If there is no goal defined then use the default -->
      <j:if test="${org.apache.commons.jelly.werkz.Project.getGoal(hook.name) == null}">
        <j:set var="hook.name" value="modules:aggregate:default"/>
      </j:if>
      <attainGoal name="${hook.name}"/>
      
      <!-- Process dependencies -->
      <j:forEach var="artifact" items="${module.artifacts}">
        <j:set var="dependency" value="${artifact.dependency}"/>
        <j:if test="${dependency.getProperty('runtime') == 'true'}">
          <ant:echo>Processing dependency: ${dependency.id}</ant:echo>
          
          <!--
             | TODO: Figure out a better way to allow artifact destination
             |       to vary, but for now just dump them into lib
           -->
          
          <ant:mkdir dir="${aggregate.dir}/lib"/>
          <ant:copy todir="${aggregate.dir}/lib" file="${artifact.path}"/>
        </j:if>
      </j:forEach>
    </j:forEach>
    
    <!-- Cleanse some stuff -->
    <u:available file="${aggregate.dir}/bin">
      <!-- Fix permissions -->
      <chmod perm="ugo+x">
        <fileset dir="${aggregate.dir}/bin">
          <include name="*"/>
          <exclude name="*.bat"/>
          <exclude name="*.cmd"/>
        </fileset>
      </chmod>
      <chmod perm="ugo-x">
        <fileset dir="${aggregate.dir}/bin">
          <include name="*.bat"/>
          <include name="*.cmd"/>
        </fileset>
      </chmod>
      
      <!-- Fix CRLF -->
      <fixcrlf srcdir="${aggregate.dir}/bin" eol="lf" eof="remove">
        <include name="*"/>
        <exclude name="*.bat"/>
        <exclude name="*.cmd"/>
      </fixcrlf>
      <fixcrlf srcdir="${aggregate.dir}/bin" eol="crlf">
        <include name="*.bat"/>
        <include name="*.cmd"/>
      </fixcrlf>
    </u:available>
  </goal>
  
  
  <!-- =============================== -->
  <!-- Module Output Aggregation Hooks -->
  <!-- =============================== -->
  
  <goal name="modules:aggregate:default">
    <aggregate:default/>
  </goal>
  
  <!--
  <goal name="modules:aggregate:geronimo:geronimo-common">
    <aggregate:default/>
  </goal>
  
  <goal name="modules:aggregate:geronimo:geronimo-twiddle">
    <aggregate:scripts/>
    <aggregate:config/>
    <aggregate:libraries/>
  </goal>
  
  <goal name="modules:aggregate:geronimo:geronimo-core">
    <aggregate:default/>
  </goal>
  -->
  
  
  <!-- =============================== -->
  <!-- Documentation & Site Generation -->
  <!-- =============================== -->
  
  <goal name="javadoc">
    <attainGoal name="modules:javadoc"/>
  </goal>
  
  <preGoal name="xdoc:jelly-transform">
    <attainGoal name="html2xdoc"/>
    <attainGoal name="faq"/>
  </preGoal>
  
  <!-- Turn off reports for the top-level project -->
  <postGoal name="xdoc:register-reports">
    <attainGoal name="maven-license-plugin:deregister"/>
    <attainGoal name="maven-checkstyle-plugin:deregister"/>
    <attainGoal name="maven-pmd-plugin:deregister"/>
    <attainGoal name="maven-simian-plugin:deregister"/>
    <attainGoal name="maven-jdepend-plugin:deregister"/>
    <attainGoal name="maven-statcvs-plugin:deregister"/>
    <attainGoal name="maven-jxr-plugin:deregister"/>
    <attainGoal name="maven-javadoc-plugin:deregister"/>
    <attainGoal name="maven-junit-report-plugin:deregister"/>
    <attainGoal name="maven-clover-plugin:deregister"/>
    
    <!-- Run some useful top-level reports -->
    <!--<attainGoal name="maven-changelog-plugin:deregister"/>-->
    <!--<attainGoal name="maven-file-activity-plugin:deregister"/>-->
    <!--<attainGoal name="maven-developer-activity-plugin:deregister"/>-->
  </postGoal>
  
  <preGoal name="site">
    <attainGoal name="modules:copy-site"/>
  </preGoal>
  
  <goal name="modules:copy-site" prereqs="modules:site"
    description="Copy the generated websites of all the modules into the root project">
    
    <!-- a dummy scope tag to change XML namespace to ant -->
    <j:scope xmlns="jelly:ant">
      
      <fileScanner var="scanner">
        <fileset dir="${basedir}"
          includes="${modules.includes}"
          excludes="${modules.excludes}"/>
      </fileScanner>
      
      <j:forEach var="file" items="${scanner.iterator()}">
        <j:set var="name">${file.parentFile.name}</j:set>
        <j:set var="type">${file.parentFile.parentFile.name}</j:set>
        <j:set var="outDir">${basedir}/target/docs/${type}/${name}</j:set>
        
        <echo>Copying module ${name} documentation to ${outDir}</echo>
        <mkdir dir="${outDir}"/>
        <copy todir="${outDir}">
          <fileset dir="${basedir}/${type}/${name}/target/docs"/>
        </copy>
      </j:forEach>
      
    </j:scope>
  </goal>
  
  <goal name="site:tocvs"
    description="Creates the entire website and copies it to the local CVS repository so that it can be checked in to update the Incubator site">
    
    <!-- a dummy scope tag to change XML namespace to ant -->
    <j:scope xmlns="jelly:ant">
    
      <j:if test="${empty(geronimo.cvs.docdir)}">
        <j:set var="geronimo.cvs.docdir" value="../incubator-site/build/site/projects/geronimo"/>
      </j:if>
      
      <mkdir dir="${geronimo.cvs.docdir}"/>
      <copy todir="${geronimo.cvs.docdir}">
        <fileset dir="${basedir}/target/docs"/>
      </copy>
      
    </j:scope>
  </goal>
  
  
  <!-- ==================================================== -->
  <!-- Helper to run Apache Geronimo from the current build -->
  <!-- ==================================================== -->
  
  <goal name="run">
    <j:set var="run.dir" value="${basedir}/target/${release.id}"/>
    
    <!--
       | Should really execute the system script but for now...
     -->
    
    <j:jelly xmlns="jelly:ant">
      <java
        classname="com.werken.classworlds.Launcher"
        fork="true"
        maxmemory="128m"
        failonerror="true"
        dir="${run.dir}">
        
        <classpath>
          <pathelement location="${run.dir}/lib/classworlds-SNAPSHOT.jar"/>
        </classpath>
        
        <sysproperty key="classworlds.conf" value="${run.dir}/etc/classworlds.conf"/>
        <sysproperty key="program.name" value="maven:run"/>
        <sysproperty key="twiddle.home" value="${run.dir}"/>
        
        <arg value="geronimo/start"/>
      </java>
    </j:jelly>
  </goal>

  <goal name="run:main">
    <j:set var="run.dir" value="${basedir}/target/${release.id}"/>
    <!--
       | Should really execute the system script but for now...
     -->
    <j:jelly xmlns="jelly:ant">

        <java classname="org.apache.geronimo.Main" 
            fork="true"
            maxmemory="128m"
            failonerror="true"
            dir="${run.dir}">

        <classpath>
          <pathelement path="${run.dir}/etc"/>
          <fileset dir="${run.dir}/lib">
            <include name="*.jar"/>
            <exclude name="xerces-2.4.0.jar"/>
          </fileset>              
        </classpath>

        <sysproperty key="program.name" value="maven:run"/>
        <sysproperty key="geronimo.home" value="file:${run.dir}/"/>

      </java>
    </j:jelly>
  </goal>
 
</project>
