<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2004 The Apache Software Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<xs:schema
        targetNamespace="http://geronimo.apache.org/xml/ns/config-list-1.0"
        xmlns:list="http://geronimo.apache.org/xml/ns/config-list-1.0"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        elementFormDefault="qualified"
        attributeFormDefault="unqualified"
        >
    <xs:annotation>
        <xs:documentation>
            Schema for a list of Geronimo configurations available at some
            external site (namely, a Maven 2 repository).
        </xs:documentation>
    </xs:annotation>

    <!--   Top-level elements   -->

    <xs:element name="geronimo-plugin-list" type="list:config-listType">
        <xs:annotation>
            <xs:documentation>
                The geronimo-plugin-list root element is used for the config file present
                in the root directory of a Maven repository supporting Geronimo plugin
                downloads. This will be scanned by Geronimo clients to determine what
                plugins are available on that server.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="geronimo-plugin" type="list:configuration-descriptorType">
        <xs:annotation>
            <xs:documentation>
                The geronimo-configuration root element is used as the config file
                submitted with an individual Geronimo configuration to the plugin
                repository. It will be merged into the plugin list for the repository
                when the submitted plugin is accepted.

                It is also used for the metadata packed into a configuration when
                a configuration archive is downloaded from an online repository
                for local installation, in which case it should be packed into the
                archive at META-INF/geronimo-plugin.xml
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <!--   Data types used in this schema   -->

    <!-- Format for a list of available configurations provided by a remote repository -->
    <xs:complexType name="config-listType">
        <xs:sequence>
            <xs:element name="configuration" type="list:configurationType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        The list of configurations available in the current plugin repository.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="backup-repository" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Each backup-repository is a URL to check for any dependencies that
                        were not found in the current repository. That can be used, for
                        example, to host Geronimo configurations at one site and common
                        third-party JARs at another.

                        The repository where this file came from will be checked first for
                        every artifact, and if an artifact is not found there, each of the
                        repositories listed here will be checked in the order listed until
                        the artifact is found.

                        Note that while the primary repository may be protected by HTTP
                        Basic authentication, the backup repositories must either use the
                        same username and password as the primary or use no authentication.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="configurationType">
        <xs:sequence>
            <xs:element name="name" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        A human-readable name for this configuration. This will be used to identify
                        the configuration to a user when giving them a list of configurations to
                        select from.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="config-id" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The Geronimo configId for this configuration, which uniquely identifies
                        it, and also is used to construct a path to download it if necessary
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="category" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        A category name for this configuration. The user interface typically groups
                        configurations by their category name, so this should match the value for other
                        configurations in the same category.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="description" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        A description of this component. This will be displayed when the user
                        looks for more information about this component. It typically includes
                        a description of what it does, what if any third-party software it's
                        based on, why it would be interesting to use it, etc.

                        Currently this should be plain text, where whitespace is not significant
                        except an entirely blank line indicates a paragraph break (like this
                        documentation, for example). This may change to a more structured format
                        in the future, if we can agree on what that ought to be.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="license" type="list:licenseType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        The name of the license that applies to this plugin, usually composed of a
                        license class (if any) followed by the name and version of a license:
                        BSD -- Apache Software License (ASL) 2.0
                        GPL -- Lesser General Public License (LGPL) 2

                        If there is more than one license listed then that means the user may choose
                        among any of the available licenses.

                        Contains a mandatory true/false attribute indicating whether this license
                        is OSI-approved (e.g. whether the plugin is open source).

                        Note that the license declared here applies only to the current component.
                        Any dependencies may be licensed separately.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="geronimo-version" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Indicates a version of the Geronimo base server that this component can run in.
                        If no geronimo-version is listed, that means the component can run in any version
                        of Geronimo so long as the prerequisites, parents, and dependencies are present.
                        If one or more geronimo-version elements are listed, then the current version of
                        Geronimo must match one of them in order for this component to be installable.

                        This is applied as an exact match: 1.2 does not match 1.2.1 or 1.2-SNAPSHOT
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="jvm-version" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Indicates a version of the JVM that this component can run in. If no jvm-version
                        is listed, that means the component can run in any version of the JVM supported
                        by Geronimo so long as the prerequisites, parents, and dependencies are present.
                        If one or more jvm-version elements are listed, then the JVM that Geronimo is
                        currently running on must match one of them in order for this component to be
                        installable. (It does not stop you from restarting Geronimo on a different JVM
                        version once the components is already installed.)

                        This is not normally used, but must be for components that use CORBA or
                        serialized QNames, etc.

                        This is applied as a prefix match: 1.4 matches 1.4.2 or 1.4.2_10
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="prerequisite" type="list:prerequisiteType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        A dependency of this configuration that must be previously installed if this
                        configuration is to be considered to be installable. This is generally the
                        same as the dependency element (for example, it may refer to a configuration
                        by configId or a JAR by repository ID) except that the dependency will not
                        be downloaded on demand and must have been previously installed.

                        This is currently used for a web application to specify the web container it
                        runs in (so we don't show Tomcat downloads for a Jetty installation, etc.). It
                        may be used for similar things in the future if more distribution choices are
                        added to Geronimo.

                        It is also used by the public Geronimo plugin repository in cases where the
                        dependencies cannot be redistributed (e.g. a dependency on a commercial JDBC
                        driver JAR which must be manually acquired and installed).

                        It is also used when a user must set something up (like a database pool or
                        security realm) to point to a custom resource in their environment before the
                        component can be installed.

                        This is applied as an exact match, except that the version number may be
                        omitted, in which case any matching version of the dependency will work.

                        It has an optional resource-type attribute indicating to the user what type
                        of prerequisite this is (for cases where they're expected to set something up
                        as opposed to just downloading a JAR). e.g. it could be set to "JDBC Pool".
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="dependency" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        The configId of another configuration or the repository ID of a 3rd party JAR
                        that this configuration depends on. That means that the dependency must be
                        downloaded and installed if this configuration is selected.

                        Note: If the dependency referred to here is a configuration, it may have
                        additional dependencies that will need to be downloaded and installed. If the
                        dependency referred to here is just a JAR, it will not be consulted for
                        transitive dependencies -- it's assumed that a configuration lists all the
                        JARs it actually depends on.

                        This is applied as an exact match, except that the version number may be
                        omitted, in which case any matching version of the dependency will work.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="licenseType">
        <xs:annotation>
            <xs:documentation>
                See configurationType/license above
            </xs:documentation>
        </xs:annotation>

        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="osi-approved" use="required" type="xs:boolean">
                    <xs:annotation>
                        <xs:documentation>
                            Indicates whether this license is OSI-approved, which is to say, whether
                            the plugin is open source. Typically this is true for all licenses
                            you'd expect to be open source, and false for proprietary plugins.

                            If there's some doubt, visit http://www.opensource.org/licenses/index.php
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="prerequisiteType">
        <xs:sequence>
            <xs:element name="id" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The Config ID of the prerequisite. This is used to check whether
                        it's available on the server that you're downloading the plugin
                        into. It may omit some portions of the Config ID to be more
                        accomodating (e.g. "*/MyDBPool/*/*" to identify a database pool
                        instead of "console/MyDBPool/1.0/car").

                        Note that the values here may take the non-standard syntax of
                        * instead of the empty string for a missing value, which will
                        hopefully make the wildcard format more user-friendly.
                        (On the theory that "Please install */MyDBPool/*/*" should make
                        more sense than "Please install /MyDBPool//" for an average user)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="resource-type" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Describes the type of resource that the prerequisite is. Examples
                        include:

                        JDBC Driver
                        JDBC Pool
                        JMS Resource Group
                        JavaMail

                        This is mainly used for prerequisites where the user needs to set
                        something up and you want to indicate what. So for example, you
                        could say "console/myapp-pool/*/jar" is a prerequisite with resource
                        type "JDBC Pool" and then the user should understand that they can
                        install your plugin if they create a JDBC pool called "myapp-pool"
                        in the console, or manually deploy a pool with configId
                        "console/myapp-pool/(something)/jar"

                        Another option in that case would be to use a dependency on a JDBC
                        pool configuration you provide, but then it would have to use the
                        system database (and run a DDL script on the first connect) in order
                        to be installable in an arbitrary Geronimo server. That would be a
                        better approach for demonstration applications, whereas the
                        prerequisite on a user-installed pool would be a better approach for
                        production applications.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="description" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        A description for the user about why this is a prerequisite and what
                        they should do to set it up. Here are a couple examples:

                        This plugin of SomeApp is configured for the Jetty version of
                        Geronimo. It cannot be installed on the Tomcat version of Geronimo.
                        There's a separate plugin for the Tomcat version of Geronimo.

                        SomeApp requires a database connection pool. Supported databases
                        are PostgreSQL and MySQL. Please configure a database connection
                        pool with the name "SomeAppPool" and then run the associated create
                        script from http://someapp.com/db-scripts/ before installing this
                        plugin.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!-- Format for the config file for a single configuration download -->
    <xs:complexType name="configuration-descriptorType">
        <xs:sequence>
            <xs:element name="configuration" type="list:configurationType">
                <xs:annotation>
                    <xs:documentation>
                        The metadata for this configuration
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="source-repository" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The base URL for the repository that this configuration was
                        downloaded from.  This will be used as the primary
                        repository for downloading additional dependencies, etc.

                        If this descriptor is being put together for submission to
                        a repository, etc. then this value may be omitted.  When an
                        individual configuration is downloaded from a repository
                        for offline installation, it must be present.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="backup-repository" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Each backup-repository is a URL to check for any dependencies that
                        were not found in the current repository. That can be used, for
                        example, to host Geronimo configurations at one site and common
                        third-party JARs at another.

                        The repository where this file came from will be checked first for
                        every artifact, and if an artifact is not found there, each of the
                        repositories listed here will be checked in the order listed until
                        the artifact is found.

                        Note that while the primary repository may be protected by HTTP
                        Basic authentication, the backup repositories must either use the
                        same username and password as the primary or use no authentication.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
