/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Apache Geronimo" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Apache Geronimo", nor may "Apache" appear in their name, without
 *    prior written permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * ====================================================================
 */
package org.apache.geronimo.gbean;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 * Describes a GBean.
 *
 * @version $Revision: 1.8 $ $Date: 2004/02/24 18:41:45 $
 */
public final class GBeanInfo implements Serializable {
    /**
     * Static helper to try to get the GBeanInfo from the class supplied.
     * @param className name of the class to get the GBeanInfo from
     * @param classLoader the class loader use to load the specifiec class
     * @return GBeanInfo generated by supplied class
     * @throws org.apache.geronimo.gbean.InvalidConfigurationException if there is a problem getting the GBeanInfo from the class
     */
    public static GBeanInfo getGBeanInfo(String className, ClassLoader classLoader) throws InvalidConfigurationException {
        Class clazz;
        try {
            clazz = classLoader.loadClass(className);
        } catch (ClassNotFoundException e) {
            throw new InvalidConfigurationException("Could not load class " + className, e);
        }
        Method method;
        try {
            method = clazz.getDeclaredMethod("getGBeanInfo", new Class[]{});
        } catch (NoSuchMethodException e) {
            throw new InvalidConfigurationException("Class does not have a getGBeanInfo() method: " + className);
        }
        try {
            return (GBeanInfo) method.invoke(clazz, new Object[]{});
        } catch (Exception e) {
            throw new InvalidConfigurationException("Could not get GBeanInfo from class: " + className, e);
        }
    }

    private final String name;
    private final String className;
    private final Set attributes;
    private final GConstructorInfo constructor;
    private final Set operations;
    private final Set notifications;
    private final Set references;

    public GBeanInfo(String className, Collection attributes, GConstructorInfo constructor, Collection operations, Set references, Set notifications) {
        this(className, className, attributes, constructor, operations, references, notifications);
    }

    public GBeanInfo(String name, String className, Collection attributes, GConstructorInfo constructor, Collection operations, Set references, Set notifications) {
        this.name = name;
        this.className = className;
        if(attributes == null) {
            this.attributes = Collections.EMPTY_SET;
        } else {
            this.attributes = Collections.unmodifiableSet(new HashSet(attributes));
        }
        if (constructor == null) {
            this.constructor = new GConstructorInfo(Collections.EMPTY_LIST, Collections.EMPTY_LIST);
        } else {
            this.constructor = constructor;
        }
        if(operations == null) {
            this.operations = Collections.EMPTY_SET;
        } else {
            this.operations = Collections.unmodifiableSet(new HashSet(operations));
        }
        if(references == null) {
            this.references = Collections.EMPTY_SET;
        } else {
            this.references = Collections.unmodifiableSet(new HashSet(references));
        }
        if (notifications == null) {
            this.notifications = Collections.EMPTY_SET;
        } else {
            this.notifications = Collections.unmodifiableSet(new HashSet(notifications));
        }
    }

    public String getName() {
        return name;
    }

    public String getClassName() {
        return className;
    }

    public Set getAttributes() {
        return attributes;
    }

    public List getPersistentAttributes() {
        List attrs = new ArrayList();
        for (Iterator i = attributes.iterator(); i.hasNext();) {
            GAttributeInfo info = (GAttributeInfo) i.next();
            if (info.isPersistent()) {
                attrs.add(info);
            }
        }
        return attrs;
    }

    public GConstructorInfo getConstructor() {
        return constructor;
    }

    public Set getOperations() {
        return operations;
    }

    public Set getNotifications() {
        return notifications;
    }

    public Set getReferences() {
        return references;
    }

    public String toString() {
        StringBuffer result = new StringBuffer("[GBeanInfo: id=").append(super.toString()).append(" name=").append(name);
        for (Iterator iterator = attributes.iterator(); iterator.hasNext();) {
            GAttributeInfo geronimoAttributeInfo = (GAttributeInfo) iterator.next();
            result.append("\n    attribute: ").append(geronimoAttributeInfo);
        }
        for (Iterator iterator = operations.iterator(); iterator.hasNext();) {
            GOperationInfo geronimoOperationInfo = (GOperationInfo) iterator.next();
            result.append("\n    operation: ").append(geronimoOperationInfo);
        }
        for (Iterator iterator = references.iterator(); iterator.hasNext();) {
            GReferenceInfo referenceInfo = (GReferenceInfo) iterator.next();
            result.append("\n    reference: ").append(referenceInfo);
        }
        result.append("]");
        return result.toString();
    }
}