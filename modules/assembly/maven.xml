<?xml version="1.0" encoding="ISO-8859-1"?>
<!--

    Copyright 2004-2005 The Apache Software Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- $Rev$ $Date$ -->

<project default="default"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:ant="jelly:ant"
    xmlns:define="jelly:define"
    xmlns:velocity="jelly:velocity"
    xmlns:bootstrap="geronimo:bootstrap"
    xmlns:deploy="geronimo:deploy"
    xmlns:artifact="artifact"
    xmlns:m="jelly:maven"
    >

    <!-- ================= -->
    <!-- Global Properties -->
    <!-- ================= -->

    <!-- Determine what the top-level project root is -->
    <j:set var="project.root" value="${pom.parentBasedir().getParentFile().getCanonicalFile()}"/>

    <!-- ==================== -->
    <!-- Default Global Goals -->
    <!-- ==================== -->

    <goal name="default">
        <attainGoal name="build"/>
    </goal>


    <goal name="build">
        <attainGoal name="assembly:install"/>
    </goal>

    <goal name="rebuild">
        <attainGoal name="clean"/>
        <attainGoal name="build"/>
    </goal>

    <goal name="tomcat">
        <j:set var="geronimo.web.container" value="tomcat"/>
        <attainGoal name="rebuild"/>
    </goal>

    <goal name="assembly:prepare-filesystem"
        description="Builds the binary distribution file system.">

        <!--

        This is the directory where everything is copied to so that it can
        be archived.

        -->

        <j:if test="${context.getVariable('geronimo.assembly.clean') == 'true'}">
            <ant:delete dir="${geronimo.assembly.dir}"/>
        </j:if>
        <ant:mkdir dir="${geronimo.assembly.dir}"/>

        <ant:echo>
        +-------------------------------------------------------+
        | C R E A T I N G  B I N A R Y  D I S T R I B U T I O N |
        +-------------------------------------------------------+
        </ant:echo>

        <!-- Add all txt fines and the status file to the binary -->
        <ant:copy todir="${geronimo.assembly.dir}">
            <fileset dir="${project.root}" includes="*.txt,STATUS"/>
            <ant:fileset dir="${project.root}">
                <ant:include name="*.txt"/>
                <ant:include name="STATUS"/>
            </ant:fileset>
        </ant:copy>

        <!-- Copy  the runtime dependencies into lib and create a classpath for the server.jar file -->
        <j:set var="libDir" value="${geronimo.assembly.dir}/lib"/>
        <ant:mkdir dir="${libDir}"/>
        <ant:mkdir dir="${libDir}/endorsed"/>
        <ant:mkdir dir="${libDir}/ext"/>

        <j:forEach var="artifact" items="${pom.artifacts}">
            <j:set var="dependency" value="${artifact.dependency}"/>
            <j:if test="${dependency.getProperty('lib') == 'true'}">
                <ant:copy todir="${libDir}" file="${artifact.path}"/>
                <j:set var="classpathEntry" value="../lib/${artifact.name}"/>
            </j:if>
            <j:if test="${dependency.getProperty('endorsed') == 'true'}">
                <ant:copy todir="${libDir}/endorsed" file="${artifact.path}"/>
                <j:set var="classpathEntry" value="../lib/endorsed/${artifact.name}"/>
            </j:if>
            <j:if test="${dependency.getProperty('server') == 'true'}">
                <j:set var="server.classpath" value="${server.classpath} ${classpathEntry}"/>
            </j:if>
            <j:if test="${dependency.getProperty('client') == 'true'}">
                <j:set var="client.classpath" value="${client.classpath} ${classpathEntry}"/>
            </j:if>
            <j:if test="${dependency.getProperty('deploy') == 'true'}">
                <j:set var="deploy.classpath" value="${deploy.classpath} ${classpathEntry}"/>
            </j:if>
        </j:forEach>

        <!-- Add XML schemas -->
        <ant:mkdir dir="${geronimo.assembly.dir}/schema"/>
        <ant:copy todir="${geronimo.assembly.dir}/schema" flatten="true">
            <ant:fileset dir="${project.root}/modules/j2ee-schema">
                <ant:include name="src/j2ee_1_4schema/*.xsd"/>
		<ant:include name="src/j2ee_1_3dtd/*.dtd"/>
		<ant:include name="src/j2ee_1_2dtd/*.dtd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/deployment">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/j2ee-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/web-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/jetty-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/tomcat-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/connector-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/naming-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/security-builder">
                <ant:include name="src/schema/geronimo*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/service-builder">
                <ant:include name="src/schema/geronimo*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="${project.root}/modules/client-builder">
                <ant:include name="src/schema/*.xsd"/>
            </ant:fileset>
            <ant:fileset dir="src/etc"/>
        </ant:copy>

        <!-- extract XML schemas from OpenEJB jars -->
        <ant:unzip src="${maven.repo.local}/openejb/jars/openejb-pkgen-builder-${openejb_version}.jar"
            dest="${geronimo.assembly.dir}">
            <ant:patternset>
                <ant:include name="META-INF/schema/openejb-pkgen*.xsd"/>
            </ant:patternset>
        </ant:unzip>
        <ant:unzip src="${maven.repo.local}/openejb/jars/openejb-builder-${openejb_version}.jar"
            dest="${geronimo.assembly.dir}">
            <ant:patternset>
                <ant:include name="META-INF/schema/openejb-jar*.xsd"/>
                <ant:include name="META-INF/schema/corba-css-config*.xsd"/>
                <ant:include name="META-INF/schema/corba-tss-config*.xsd"/>
            </ant:patternset>
        </ant:unzip>
        <ant:move todir="${geronimo.assembly.dir}/schema">
            <ant:fileset dir="${geronimo.assembly.dir}/META-INF/schema">
                <ant:include name="*.xsd"/>
            </ant:fileset>
        </ant:move>
        <ant:delete dir="${geronimo.assembly.dir}/META-INF"/>

        <!-- copy in data files -->
        <ant:copy todir="${geronimo.assembly.dir}/var">
            <ant:fileset dir="src/var"/>
        </ant:copy>

        <!-- For LDAP -->
        <ant:mkdir dir="${geronimo.assembly.dir}/var/ldap"/>
        <ant:mkdir dir="${geronimo.assembly.dir}/var/ldap/conf"/>
        <ant:copy todir="${geronimo.assembly.dir}/var/ldap/conf"
            file="${project.root}/modules/directory/src/var/directory.xml"/>

        <!-- Add tomcat files -->
        <ant:copy todir="${geronimo.assembly.dir}/var/catalina/conf"
            file="${project.root}/modules/tomcat/src/var/web.xml"/>
        <ant:copy todir="${geronimo.assembly.dir}/var/catalina/ROOT">
            <ant:fileset dir="${project.root}/modules/tomcat/src/var/ROOT"/>
        </ant:copy>

        <!-- Load the repository -->
        <ant:mkdir dir="${geronimo.assembly.dir}/repository"/>
        <ant:copy todir="${geronimo.assembly.dir}/repository">
            <ant:fileset dir="${maven.repo.local}">
                <j:forEach var="artifact" items="${pom.artifacts}">
                    <j:set var="dependency" value="${artifact.dependency}"/>
                    <j:if test="${dependency.getProperty('repository') == 'true'}">
                        <ant:include name="${dependency.getArtifactDirectory()}/${dependency.getType()}s/${dependency.getArtifact()}"/>
                    </j:if>
                </j:forEach>
            </ant:fileset>
        </ant:copy>
        <ant:copy todir="${geronimo.assembly.dir}/repository">
            <mapper type="glob" from="${maven.repo.local}*" to="*"/>
            <ant:fileset dir="${maven.repo.local}">
                <j:forEach var="artifact" items="${pom.artifacts}">
                    <j:set var="dependency" value="${artifact.dependency}"/>
                    <j:if test="${dependency.getProperty('repository') == 'true'}">
                        <ant:fileset include="${artifact.path}"/>
                    </j:if>
                </j:forEach>
            </ant:fileset>
        </ant:copy>

        <!-- ============================================== -->
        <!-- Preprocess all mungible content using velocity -->
        <!-- ============================================== -->

        <!-- Write out a copy of config.xml with substitution variables intact -->
        <ant:mkdir dir="${geronimo.assembly.dir}/var/config"/>
        <velocity:merge basedir="${basedir}/src/var/config"
            template="config.xml"
            name="${geronimo.assembly.dir}/var/config/config.template.xml"/>
<!--        <attainGoal name="assembly:izpack-prepare"/>-->
        <!-- Substitution variables for default hostname, ports, etc. -->
        <j:set var="PlanServerHostname" value="0.0.0.0"/>
        <j:set var="PlanNamingPort" value="1099"/>
        <j:set var="PlanOpenEJBPort" value="4201"/>
        <j:set var="PlanClientAddresses" value="127.0.0.1"/>
        <j:set var="PlanIIOPPort" value="9000"/>
        <j:set var="PlanCOSNamingHost" value="localhost"/>
        <j:set var="PlanCOSNamingPort" value="1050"/>
        <!-- why aren't these used? -->
        <!--        <j:set var="PlanORBHost" value="0.0.0.0"/>-->
        <!--        <j:set var="PlanORBPort" value="2001"/>-->
        <j:set var="PlanORBSSLHost" value="localhost"/>
        <j:set var="PlanORBSSLPort" value="2001"/>
        <j:set var="PlanActiveMQPort" value="61616"/>
        <j:set var="PlanDerbyPort" value="1527"/>
        <j:set var="PlanRemoteLoginPort" value="4242"/>
        <j:set var="PlanLdapPort" value="1389"/>
        <j:set var="PlanJettyWebBuilderDefaultNamespace" value="http://geronimo.apache.org/xml/ns/j2ee/web/jetty-1.0"/>
        <j:set var="PlanTomcatWebBuilderDefaultNamespace" value="http://geronimo.apache.org/xml/ns/j2ee/web/tomcat-1.0"/>
        <j:set var="PlanHTTPPortPrimary" value="8080"/>
        <j:set var="PlanHTTPSPortPrimary" value="8443"/>
        <j:set var="PlanAJPPortPrimary" value="8009"/>
        <j:set var="PlanHTTPPortSecondary" value="8090"/>
        <j:set var="PlanHTTPSPortSecondary" value="8453"/>
        <j:set var="PlanAJPPortSecondary" value="8019"/>
        <j:if test="${context.getVariable('geronimo.web.container').equals('jetty')}">
            <echo>JETTY CONTAINER</echo>
            <j:set var="PlanWebServerName" value="Jetty"/>
            <j:set var="PlanWebBuilderDefaultNamespace" value="http://geronimo.apache.org/xml/ns/j2ee/web/jetty-1.0"/>
            <j:set var="PlanHTTPPort" value="8080"/>
            <j:set var="PlanHTTPSPort" value="8443"/>
            <j:set var="PlanAJPPort" value="8009"/>
            <j:set var="PlanHTTPPort2" value="8090"/>
            <j:set var="PlanHTTPSPort2" value="8453"/>
            <j:set var="PlanAJPPort2" value="8019"/>
        </j:if>
        <j:if test="${context.getVariable('geronimo.web.container').equals('tomcat')}">
            <echo>TOMCAT CONTAINER</echo>
            <j:set var="PlanWebServerName" value="Tomcat"/>
            <j:set var="PlanWebBuilderDefaultNamespace" value="http://geronimo.apache.org/xml/ns/j2ee/web/tomcat-1.0"/>
            <j:set var="PlanHTTPPort" value="8090"/>
            <j:set var="PlanHTTPSPort" value="8453"/>
            <j:set var="PlanAJPPort" value="8019"/>
            <j:set var="PlanHTTPPort2" value="8080"/>
            <j:set var="PlanHTTPSPort2" value="8443"/>
            <j:set var="PlanAJPPort2" value="8009"/>
        </j:if>

        <fileScanner var="plans">
            <fileset dir="${basedir}/src/plan">
                <include name="*-plan.xml"/>
            </fileset>
        </fileScanner>

        <!-- Prepare the web container -->
        <ant:mkdir dir="${basedir}/target/tmp"/>

        <ant:mkdir dir="${basedir}/target/plan"/>
        <j:forEach var="plan" items="${plans.iterator()}">
            <j:set var="planName" value="${plan.name}"/>
            <echo>Preprocessing plan ${planName}</echo>
            <velocity:merge
                basedir="${basedir}/src/plan"
                template="${planName}"
                name="${basedir}/target/plan/${planName}"/>
        </j:forEach>

        <fileScanner var="configs">
            <fileset dir="${basedir}/src/var/config">
                <include name="config*.xml"/>
            </fileset>
        </fileScanner>

        <j:forEach var="config" items="${configs.iterator()}">
            <j:set var="configName" value="${config.name}"/>
            <echo>Preprocessing config ${configName}</echo>
            <velocity:merge
                basedir="${basedir}/src/var/config"
                template="${configName}"
                name="${geronimo.assembly.dir}/var/config/${configName}"/>
        </j:forEach>

        <ant:copy tofile="${geronimo.assembly.dir}/var/config/config.both.xml" file="${geronimo.assembly.dir}/var/config/config.xml"/>

        <!-- copy the final plans -->
        <ant:mkdir dir="${geronimo.assembly.dir}/doc"/>
        <ant:mkdir dir="${geronimo.assembly.dir}/doc/plan"/>
        <ant:copy todir="${geronimo.assembly.dir}/doc/plan">
            <ant:fileset dir="${basedir}/target/plan"/>
        </ant:copy>

        <!-- Copy the scripts to the bin dir -->
        <ant:copy todir="${geronimo.assembly.dir}/bin" overwrite="true">
            <ant:fileset dir="src/scripts">
                <include name="*.sh"/>
                <include name="*.bat"/>
            </ant:fileset>
        </ant:copy>
        <ant:chmod dir="${geronimo.assembly.dir}/bin" perm="ugo+x" includes="*.sh"/>

        <!-- ============================================== -->
        <!-- Bootstrap the deployer and server              -->
        <!-- ============================================== -->
        <ant:echo>Bootstrapping service deployer</ant:echo>
        <ant:mkdir dir="${geronimo.assembly.dir}/bin"/>
        <ant:mkdir dir="${geronimo.assembly.dir}/config-store"/>

        <define:taglib uri="geronimo:bootstrap">
            <define:jellybean
                name="bootstrap"
                className="org.apache.geronimo.deployment.Bootstrap"
                method="bootstrap"/>
        </define:taglib>

        <bootstrap:bootstrap
            deployerJar="${geronimo.assembly.dir}/bin/deployer.jar"
            storeDir="${geronimo.assembly.dir}/config-store"
            repositoryDir="${geronimo.assembly.dir}/repository"
            deployerSystemPlan="${basedir}/target/plan/deployer-system-plan.xml"
            j2eeDeployerPlan="${basedir}/target/plan/j2ee-deployer-plan.xml"
            deployerClassPath="${deploy.classpath}"
            deployerGBean="geronimo.deployer:name=Deployer,J2EEApplication=null,J2EEModule=org/apache/geronimo/OfflineDeployer,j2eeType=Deployer,J2EEServer=deployer"
            deploymentFactory="org.apache.geronimo.deployment.plugin.factories.DeploymentFactoryImpl"
            />

        <!-- build the system configuration and server.jar -->
        <ant:echo file="${basedir}/target/deploy-commands">package --classPath "${server.classpath}" --mainClass org.apache.geronimo.system.main.Daemon --endorsedDirs lib/endorsed --extensionDirs lib/ext --install target/plan/system-plan.xml ${geronimo.assembly.dir}/bin/server.jar${line.separator}</ant:echo>
        
        <!-- build the RMINaming configuration -->
        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/naming-server-plan.xml${line.separator}" />

        <!-- build the J2EEServer configuration -->
        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/j2ee-server-plan.xml${line.separator}" />

        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/j2ee-security-plan.xml${line.separator}" />

        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/j2ee-jetty-plan.xml${line.separator}" />

        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/j2ee-tomcat-plan.xml${line.separator}" />
       
        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/j2ee-runtime-deployer-plan.xml${line.separator}" />

        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute ${basedir}/target/plan/j2ee-jetty-runtime-deployer-plan.xml${line.separator}" />
        
        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute ${basedir}/target/plan/j2ee-tomcat-runtime-deployer-plan.xml${line.separator}" />

        <!-- build the system configuration and client.jar -->
        <ant:echo file="${basedir}/target/deploy-commands" append="true">package --mainClass org.apache.geronimo.system.main.ClientCommandLine --classPath "${client.classpath}" --endorsedDirs ${libDir}/endorsed --install target/plan/client-system-plan.xml ${geronimo.assembly.dir}/bin/client.jar${line.separator}</ant:echo>

        <ant:echo file="${basedir}/target/deploy-commands" append="true"
             message="distribute target/plan/j2ee-client-plan.xml${line.separator}" />
        
        <!-- to debug this deployer call, include these jvmargs right after the -ea arg
        <ant:jvmarg value="-Xdebug"/>
        <ant:jvmarg value="-Xnoagent"/>
        <ant:jvmarg value="-Djava.compiler=NONE"/>
        <ant:jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>
        -->

        <!-- Run all the commands we just queued up -->
        <ant:java fork="true" jar="${geronimo.assembly.dir}/bin/deployer.jar" failonerror="true">
            <ant:jvmarg value="-ea"/>
            <ant:arg value="--offline"/>
            <ant:arg value="command-file"/>
            <ant:arg value="${basedir}/target/deploy-commands"/>
        </ant:java>

        <!-- ============================================== -->
        <!-- Deploy all configurations to live server       -->
        <!-- ============================================== -->

        <attainGoal name="online.deploy"/>
        <attainGoal name="init-database"/>

    </goal>

    <goal name="assembly:izpack-prepare">
        <!-- this is not complete: after assembly we copy everything into the installer dir -->
        <!-- TODO use the zip file instead of copying -->
        <!-- Copy over the IzPack Installer files -->
        <ant:mkdir dir="${basedir}/target/installer"/>
        <ant:mkdir dir="${basedir}/target/tmp"/>

        <!-- unpack the zip into the install dir -->
        <ant:unzip src="${basedir}/target/distributions/geronimo-${geronimo_version}.zip"
            dest="${basedir}/target/tmp"/>
        <ant:copy todir="${basedir}/target/installer">
            <ant:fileset dir="${basedir}/target/tmp/geronimo-${geronimo_version}"/>
        </ant:copy>
        <fileScanner var="installFiles">
            <fileset dir="${basedir}/src/izpack">
                <include name="*.xml"/>
            </fileset>
        </fileScanner>
        <j:set var="GeronimoVersion" value="${geronimo_version}"/>
        <j:set var="ReleaseNotesVersion" value="1.0-M5"/>
        <j:forEach var="installer" items="${installFiles.iterator()}">
            <j:set var="installerName" value="${installer.name}"/>
            <echo>Processing installer file ${installerName}</echo>
            <velocity:merge
                basedir="${basedir}/src/izpack"
                template="${installerName}"
                name="${basedir}/target/installer/${installerName}"/>
        </j:forEach>

        <!-- Write out a copy of config.xml with substitution variables intact -->
        <velocity:merge basedir="${basedir}/src/var/config"
            template="config.xml"
            name="${basedir}/target/installer/var/config/config.xml"/>

        <!-- Prepare the Installer directory -->
        <ant:echo file="${basedir}/target/installer/var/security/users.properties" message="$${SecurityDefaultUser}=$${SecurityDefaultPassword}"/>
        <ant:echo file="${basedir}/target/installer/var/security/groups.properties" message="admin=$${SecurityDefaultUser}"/>
    </goal>

    <goal name="online.deploy">
        <j:if test="${context.getVariable('geronimo.assembly.minimal') != 'true'}">
            <j:if test="${context.getVariable('enable.debug') == 'true'}">
                <j:set var="geronimo.server.debug.options" value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>
            </j:if>
            <deploy:startRemoteServer
                geronimoTarget="${geronimo.assembly.dir}"
                vmArgs="${geronimo.server.debug.options} -Xmx512m -Djava.rmi.server.RMIClassLoaderSpi=org.apache.geronimo.system.rmi.RMIClassLoaderSpiImpl"
                configs="org/apache/geronimo/Security org/apache/geronimo/RuntimeDeployer org/apache/geronimo/JettyRuntimeDeployer org/apache/geronimo/TomcatRuntimeDeployer"/>
            <ant:echo message="Waiting for server at: ${geronimo.assembly.dir}"/>
            <deploy:waitForStarted
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                maxtries="125"
                username="system"
                password="manager"
                id="org/apache/geronimo/TomcatRuntimeDeployer"/>
            <!-- wait for started does not assure that child services are started so we must sleep -->
            <u:sleep millis="7000"/>
            <echo message="server has started"/>

            <!--            <deploy:distribute-->
            <!--                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"-->
            <!--                username="system"-->
            <!--                password="manager"-->
            <!--                plan="${basedir}/target/plan/j2ee-jetty-plan.xml"-->
            <!--            />-->
            <!--            <deploy:distribute-->
            <!--                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"-->
            <!--                username="system"-->
            <!--                password="manager"-->
            <!--                plan="${basedir}/target/plan/j2ee-tomcat-plan.xml"-->
            <!--            />-->

            <!-- building server corba configuration-->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/j2ee-server-corba-plan.xml"
                />
            <!-- building app client corba configuration-->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/j2ee-client-corba-plan.xml"
                />
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/j2ee-client-security-plan.xml"
                />


            <!-- building tranql connector default database configuration-->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/default-database-plan.xml"
                module="${maven.repo.local}/tranql/rars/tranql-connector-derby-embed-xa-${tranql_vendors_version}.rar"/>

            <!-- building system database configuration-->
            <ant:echo>Building system database configuration</ant:echo>
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/system-database-plan.xml"
                module="${maven.repo.local}/tranql/rars/tranql-connector-derby-embed-xa-${tranql_vendors_version}.rar"/>

            <!-- building system activemq configuration-->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/system-activemq-plan.xml"
                />

            <!-- building system jms configuration-->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/system-jms-plan.xml"
                module="${maven.repo.local}/activemq/rars/activemq-ra-${activemq_version}.rar"
                />

            <!-- build the spring runtime configuration -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/spring-runtime-plan.xml"
                />

            <!-- build the spring deployer configuration -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/spring-deployer-plan.xml"
                />

            <!-- build the J2EEServer secure configuration -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/j2ee-secure-plan.xml"
                />

            <!-- build the J2EE client configuration -->
            <!--            <deploy:distribute-->
            <!--                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"-->
            <!--                username="system"-->
            <!--                password="manager"-->
            <!--                plan="${basedir}/target/plan/j2ee-client-plan.xml"-->
            <!--                />-->

            <!-- build the directory server configuration -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/directory-server-plan.xml"/>

            <!-- build the Demo configuration -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                module="${maven.repo.local}/geronimo/wars/geronimo-demo-${pom.currentVersion}.war"
                />

            <!-- build the Welcome site configuration -->
            <ant:echo>Building welcome website configuration</ant:echo>
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/welcome-jetty-plan.xml"
                module="${maven.repo.local}/geronimo/wars/geronimo-welcome-${pom.currentVersion}.war"/>
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/welcome-tomcat-plan.xml"
                module="${maven.repo.local}/geronimo/wars/geronimo-welcome-${pom.currentVersion}.war"/>

            <!-- Management console -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/webconsole-jetty-plan.xml"
                module="${maven.repo.local}/geronimo/ears/geronimo-console-${pom.currentVersion}.ear"/>
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/webconsole-tomcat-plan.xml"
                module="${maven.repo.local}/geronimo/ears/geronimo-console-${pom.currentVersion}.ear"/>

            <!-- Debug Tool -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                module="${maven.repo.local}/geronimo/wars/geronimo-jmxdebug-${pom.currentVersion}.war"/>

            <!-- UDDI -->
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/uddi-server-jetty-plan.xml"
                module="${maven.repo.local}/geronimo/wars/geronimo-uddi-server-${pom.currentVersion}.war"/>
            <deploy:distribute
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"
                plan="${basedir}/target/plan/uddi-server-tomcat-plan.xml"
                module="${maven.repo.local}/geronimo/wars/geronimo-uddi-server-${pom.currentVersion}.war"/>

            <!-- create SystemDatabase -->
            <!--            <attainGoal name="init-database"/>-->

            <deploy:stopRemoteServer
                uri="deployer:geronimo:jmx:rmi://localhost/jndi/rmi:/JMXConnector"
                username="system"
                password="manager"/>
            <echo message="server has stopped"/>

            <!-- re-copy in persistent config list -->
            <echo message="refreshing persistent configuration list"/>
            <ant:copy tofile="${geronimo.assembly.dir}/var/config/config.xml"
                file="${geronimo.assembly.dir}/var/config/config.both.xml"
                overwrite="true"/>
        </j:if>

    </goal>

    <goal name="assembly" prereqs="assembly:build" description="Build a complete distribution."/>

    <goal name="assembly:build-setup" description="Set up directories for a distribution build">
        <ant:delete dir="${geronimo.assembly.distributions.dir}"/>
        <ant:mkdir dir="${geronimo.assembly.distributions.dir}"/>
    </goal>

    <goal name="assembly:build" prereqs="assembly:build-setup,assembly:prepare-filesystem" description="Build the binary distribution.">
        <!-- Create a tar.gz file -->
        <m:makeRelativePath var="geronimo.assembly.dir.name"
            basedir="${geronimo.assembly.dir}/.."
            path="${geronimo.assembly.dir}"/>
        <j:if test="${context.getVariable('geronimo.assembly.tar') == 'true'}">
            <ant:tar longfile="gnu" compression="gzip" tarfile="${geronimo.assembly.distributions.dir}/${maven.final.name}.tar.gz">
                <ant:tarfileset dir="${geronimo.assembly.dir}/..">
                    <ant:include name="${geronimo.assembly.dir.name}/**"/>
                </ant:tarfileset>
            </ant:tar>
            <checksum file="${geronimo.assembly.distributions.dir}/${maven.final.name}.tar.gz" algorithm="MD5" fileext=".md5"/>
            <checksum file="${geronimo.assembly.distributions.dir}/${maven.final.name}.tar.gz" algorithm="SHA" fileext=".sha"/>
        </j:if>

        <!-- Create a zip file -->
        <j:if test="${context.getVariable('geronimo.assembly.zip') == 'true'}">
            <ant:zip zipfile="${geronimo.assembly.distributions.dir}/${maven.final.name}.zip">
                <ant:zipfileset dir="${geronimo.assembly.dir}/..">
                    <ant:include name="${geronimo.assembly.dir.name}/**"/>
                    <ant:exclude name="${geronimo.assembly.dir.name}/**/var/log/*.log"/>
                </ant:zipfileset>
            </ant:zip>
            <checksum file="${geronimo.assembly.distributions.dir}/${maven.final.name}.zip" algorithm="MD5" fileext=".md5"/>
            <checksum file="${geronimo.assembly.distributions.dir}/${maven.final.name}.zip" algorithm="SHA" fileext=".sha"/>
        </j:if>
    </goal>

    <!-- ================================================================== -->
    <!-- I N S T A L L   D I S T R I B U T I O N                            -->
    <!-- ================================================================== -->

    <!-- Maven artifict tags are broken so we must copy by hand -->
    <goal name="assembly:install" description="Deploy a binary distribution" prereqs="assembly:build">
        <j:if test="${context.getVariable('geronimo.assembly.tar') == 'true'}">
            <ant:mkdir dir="${maven.repo.local}/${pom.groupId}/distributions"/>
            <ant:copy file="${geronimo.assembly.distributions.dir}/${maven.final.name}.tar.gz"
                todir="${maven.repo.local}/${pom.groupId}/distributions"/>
            <!--            <artifact:install-->
            <!--                artifact="${geronimo.assembly.distributions.dir}/${maven.final.name}.tar.gz"-->
            <!--                type="distribution-targz"-->
            <!--                project="${pom}"-->
        </j:if>

        <j:if test="${context.getVariable('geronimo.assembly.zip') == 'true'}">
            <ant:mkdir dir="${maven.repo.local}/${pom.groupId}/distributions"/>
            <ant:copy file="${geronimo.assembly.distributions.dir}/${maven.final.name}.zip"
                todir="${maven.repo.local}/${pom.groupId}/distributions"/>
            <!--            <artifact:install-->
            <!--                artifact="${geronimo.assembly.distributions.dir}/${maven.final.name}.zip"-->
            <!--                type="distribution-zip"-->
            <!--                project="${pom}"-->
        </j:if>
    </goal>

    <!-- ================================================================== -->
    <!-- D E P L O Y   D I S T R I B U T I O N                              -->
    <!-- ================================================================== -->

    <!--    <goal name="assembly:deploy" description="Deploy a binary distribution" prereqs="assembly:build">-->
    <!--        <j:if test="${context.getVariable('geronimo.assembly.tar') == 'true'}">-->
    <!--            <artifact:deploy-->
    <!--                artifact="${geronimo.assembly.distributions.dir}/${maven.final.name}.tar.gz"-->
    <!--                type="distribution-targz"-->
    <!--                project="${pom}"-->
    <!--                typeHandler="${distTypeHandler}"/>-->
    <!--        </j:if>-->
    <!---->
    <!--        <j:if test="${context.getVariable('geronimo.assembly.zip') == 'true'}">-->
    <!--            <artifact:deploy-->
    <!--                artifact="${geronimo.assembly.distributions.dir}/${maven.final.name}.zip"-->
    <!--                type="distribution-zip"-->
    <!--                project="${pom}"-->
    <!--                typeHandler="${distTypeHandler}"/>-->
    <!--        </j:if>-->
    <!--    </goal>-->

    <goal name="init-database">
        <ant:delete dir="${derby.system.home}"/>
        <ant:mkdir dir="${derby.system.home}"/>

        <!-- setup the lame system properties that derby needs -->
        <j:invokeStatic className="java.lang.System" method="setProperty">
            <j:arg type="java.lang.String" value="derby.system.home"/>
            <j:arg type="java.lang.String" value="${derby.system.home}"/>
        </j:invokeStatic>
        <j:invokeStatic className="java.lang.System" method="setProperty">
            <j:arg type="java.lang.String" value="derby.storage.fileSyncTransactionLog"/>
            <j:arg type="java.lang.String" value="true"/>
        </j:invokeStatic>
        <ant:sql driver="org.apache.derby.jdbc.EmbeddedDriver"
            url="jdbc:derby:SystemDatabase;create=true"
            userid="" password=""
            autocommit="true"
            onerror="abort"
            delimiter=";">
            <ant:fileset dir="src/sql"/>
            <ant:classpath>
                <ant:pathelement location="${maven.repo.local}/org.apache.derby/jars/derby-${derby_version}.jar"/>
            </ant:classpath>
        </ant:sql>
    </goal>
</project>
