/*
 * Copyright 2001-2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.geronimo.axis;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.jar.JarFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.management.ObjectName;

import org.apache.geronimo.deployment.ConfigurationBuilder;
import org.apache.geronimo.deployment.DeploymentException;
import org.apache.geronimo.gbean.GBeanInfo;
import org.apache.geronimo.gbean.GBeanInfoBuilder;
import org.apache.geronimo.gbean.WaitingException;
import org.apache.geronimo.gbean.jmx.GBeanMBean;
import org.apache.geronimo.j2ee.deployment.EARConfigBuilder;
import org.apache.geronimo.kernel.config.Configuration;
import org.apache.geronimo.kernel.config.ConfigurationStore;

/**
 * This Class should build Configurations out of deployment Module. 
 */
public class WSConfigBuilder implements ConfigurationBuilder {
    private boolean hasEJB = false;

    private final EARConfigBuilder earConfigBuilder;
    private final ConfigurationStore store;
    private ObjectName configName = null;
    

    public WSConfigBuilder(EARConfigBuilder earConfigBuilder,
                           ConfigurationStore store) {
        this.earConfigBuilder = earConfigBuilder;
        this.store = store;
    }

    public void doStart() throws WaitingException, Exception {
    }

    public Object getDeploymentPlan(File planFile, JarFile jarFile) throws DeploymentException {
        return null;
    }

    public List buildConfiguration(Object plan, JarFile earFile, File outfile) throws IOException, DeploymentException {
        //TODO this is not implemented as the current code need the location of the file 
        //where this gives a Zip file. For the time been the method is override and used.  
        return null;
    }

    public List buildConfiguration(Object plan, 
            File earFile, 
            File outfile) throws Exception {
        ObjectName wsconf = new ObjectName("geronimo.test:name=" + earFile.getName());
        ObjectName ejbconf = new ObjectName("geronimo.test:name=" + earFile.getName() + "EJB");

        Enumeration entires = new JarFile(earFile).entries();
        while (entires.hasMoreElements()) {
            ZipEntry zipe = (ZipEntry) entires.nextElement();
            String name = zipe.getName();
            if (name.endsWith("/ejb-jar.xml")) {
                hasEJB = true;
                System.out.println("entry found " + name + " the web service is based on a ejb.");
                //log.info("the web service is based on a ejb.");
                break;
            }
        }
        GBeanMBean[] confBeans = null;
        if (hasEJB) {
            return installEJBWebService(earFile, outfile,wsconf,ejbconf);
            
        } else {
            return installPOJOWebService(earFile, outfile,wsconf);

        }
    }


    /**
     * @param module      Web Service module generated by EWS
     * @param unpackedDir for WS
     * @return the file to where Module is copied in to
     */
    private List installPOJOWebService(File module, File unpackedDir,ObjectName pojoWSGbeanName) throws Exception {
        List installedConfig = new ArrayList();
        File out = new File(unpackedDir, module.getName());
        copyTheFile(module, out);

        GBeanMBean gbean = new GBeanMBean(POJOWSGBean.getGBeanInfo());
        //TODO fill up the POJOWSGBean info
        ArrayList classList = AxisGeronimoUtils.getClassFileList(new ZipFile(module));
        gbean.setAttribute("classList", classList);
        gbean.setAttribute("moduleURL", module.toURL());
        Map gbeans = new HashMap();
        gbeans.put(pojoWSGbeanName, gbean);
        
        
        byte[] state = Configuration.storeGBeans(gbeans);
        GBeanMBean config = new GBeanMBean(Configuration.GBEAN_INFO);
        config.setAttribute("ID", new URI("test"));
        config.setReferencePatterns("Parent", null);
        config.setAttribute("classPath", Collections.EMPTY_LIST);
        config.setAttribute("gBeanState", state);
        config.setAttribute("dependencies", Collections.EMPTY_LIST);
        installedConfig.add(AxisGeronimoUtils.saveConfiguration(config,store));
        return installedConfig;
    }

    private List installEJBWebService(File module, 
                File unpackedDir,
                ObjectName wSGbeanName,
                ObjectName ejbConfGBeanName) throws Exception {
        List installedConfig = new ArrayList();

        JarFile jarFile = new JarFile(module);
        Object plan = earConfigBuilder.getDeploymentPlan(null, jarFile);
        earConfigBuilder.buildConfiguration(plan, jarFile, unpackedDir);
        GBeanMBean ejbGBean = AxisGeronimoUtils.loadConfig(unpackedDir);
        installedConfig.add(AxisGeronimoUtils.saveConfiguration(ejbGBean,store));
        
        GBeanMBean wsGbean = new GBeanMBean(EJBWSGBean.getGBeanInfo());
        ArrayList classList = AxisGeronimoUtils.getClassFileList(new ZipFile(module));
        wsGbean.setAttribute("classList", classList);
        wsGbean.setReferencePattern("ejbConfig", ejbConfGBeanName);
        Map gbeans = new HashMap();
        gbeans.put(wSGbeanName, wsGbean);
        gbeans.put(ejbConfGBeanName, ejbGBean);
        
        byte[] state = Configuration.storeGBeans(gbeans);
        GBeanMBean config = new GBeanMBean(Configuration.GBEAN_INFO);
        config.setAttribute("ID", new URI("test"));
        config.setReferencePatterns("Parent", null);
        config.setAttribute("classPath", Collections.EMPTY_LIST);
        config.setAttribute("gBeanState", state);
        config.setAttribute("dependencies", Collections.EMPTY_LIST);

        
        installedConfig.add(AxisGeronimoUtils.saveConfiguration(config,store));
        return installedConfig;
    }


    private void copyTheFile(File inFile, File outFile) throws IOException {
        if (!outFile.exists())
            outFile.getParentFile().mkdirs();
        FileOutputStream out = new FileOutputStream(outFile);
        FileInputStream in = new FileInputStream(inFile);
        try {
            byte[] buf = new byte[1024];
            int val = in.read(buf);
            while (val > 0) {
                out.write(buf, 0, val);
                val = in.read(buf);
            }
        } finally {
            in.close();
            out.close();
        }
    }

    public static final GBeanInfo GBEAN_INFO;

    static {
        GBeanInfoBuilder infoFactory = new GBeanInfoBuilder(WSConfigBuilder.class);
        infoFactory.addInterface(ConfigurationBuilder.class);
        infoFactory.addReference("EARConfigBuilder", EARConfigBuilder.class);
        infoFactory.addReference("Store", ConfigurationStore.class);
        infoFactory.setConstructor(new String[]{
            "EARConfigBuilder",
            "Store"
        });
        GBEAN_INFO = infoFactory.getBeanInfo();
    }

    public static GBeanInfo getGBeanInfo() {
        return GBEAN_INFO;
    }
}

