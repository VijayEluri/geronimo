<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
	    targetNamespace="http://org.apache.geronimo/xml/ns/j2ee"
	    xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"
	    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	    elementFormDefault="qualified"
	    attributeFormDefault="unqualified"
	    version="1.5">
  <xsd:annotation>
    <xsd:documentation>
        <![CDATA[
        documents using this schema should start like:
        <connector xmlns="http://org.apache.geronimo/xml/ns/j2ee"
            xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
            xsi:SchemaLocation="http://org.apache.geronimo/xml/ns/j2ee geronimo-connector_1_5.xsd">

      @(#)geronimo-connector_1_5.xsds
	]]>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:annotation>
    <xsd:documentation>


    </xsd:documentation>
  </xsd:annotation>

  <xsd:annotation>
    <xsd:documentation>
      <![CDATA[

	This is the XML Schema for the geronimo Connector 1.5 deployment
	descriptor.  The deployment descriptor must be named
	"META-INF/geronimo-ra.xml" in the connector's rar file.
	      ...
	    </connector>

How is this specified in dds?
	]]>
    </xsd:documentation>
  </xsd:annotation>


  <xsd:include schemaLocation="j2ee_1_4.xsd"/>


<!-- **************************************************** -->


  <xsd:element name="connector" type="j2ee:connectorType">
    <xsd:annotation>
      <xsd:documentation>

	The connector element is the root element of the deployment
	descriptor for the resource adapter. This element includes
      </xsd:documentation>
    </xsd:annotation>

  </xsd:element>

<!-- **************************************************** -->

  <xsd:complexType name="activationspecType">
    <xsd:annotation>
      <xsd:documentation>

	The activationspecType specifies an activation
	specification.  The information includes fully qualified
	Java class name of an activation specification and a set of
	required configuration property names.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="activationspec-class"
		   type="j2ee:fully-qualified-classType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[

Class of activation spec to create
	      ]]>
	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
      <xsd:element name="activation-spec-name"
		   type="j2ee:xsdStringType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[
unique name for activation spec instance.  Used in object name of mbean for it.
	      ]]>
	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
      <xsd:element name="required-config-property-setting"
		   type="j2ee:config-property-settingType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="adminobjectType">
    <xsd:annotation>
      <xsd:documentation>

	The adminobjectType specifies information about an
	administered object.  Administered objects are specific to a
	messaging style or message provider.  This contains
	information on the Java type of the interface implemented by
	an administered object, its Java class name and its
	configuration properties.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="adminobject-interface"
		   type="j2ee:fully-qualified-classType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[

	      The element adminobject-interface specifies the
	      fully qualified name of the Java type of the
	      interface implemented by an administered object.

	      Example:
		<adminobject-interface>javax.jms.Destination
		</adminobject-interface>

	      ]]>
	  </xsd:documentation>
	</xsd:annotation>

      </xsd:element>
      <xsd:element name="adminobject-class"
		   type="j2ee:fully-qualified-classType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[

	      The element adminobject-class specifies the fully
	      qualified Java class name of an administered object.

	      Example:
		  <adminobject-class>com.wombat.DestinationImpl
		  </adminobject-class>

	      ]]>
	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>

      <!--xsd:element name="admin-object-name"
		   type="j2ee:xsdStringType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[
unique name for admin object instance.  Used in object name of mbean for it.
	      ]]>
	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element-->
      <xsd:element name="config-property-setting"
		   type="j2ee:config-property-settingType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="authentication-mechanismType">
    <xsd:annotation>
      <xsd:documentation>

	The authentication-mechanismType specifies an authentication
	mechanism supported by the resource adapter. Note that this
	support is for the resource adapter and not for the
	underlying EIS instance. The optional description specifies
	any resource adapter specific requirement for the support of
	security contract and authentication mechanism.

	Note that BasicPassword mechanism type should support the
	javax.resource.spi.security.PasswordCredential interface.
	The Kerbv5 mechanism type should support the
	org.ietf.jgss.GSSCredential interface or the deprecated
	javax.resource.spi.security.GenericCredential interface.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="description"
		   type="j2ee:descriptionType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
      <xsd:element name="authentication-mechanism-type"
		   type="j2ee:xsdStringType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[

	      The element authentication-mechanism-type specifies
	      type of an authentication mechanism.

	      The example values are:

	      <authentication-mechanism-type>BasicPassword
	      </authentication-mechanism-type>

	      <authentication-mechanism-type>Kerbv5
	      </authentication-mechanism-type>

	      Any additional security mechanisms are outside the
	      scope of the Connector architecture specification.

	      ]]>
	  </xsd:documentation>
	</xsd:annotation>

      </xsd:element>
      <xsd:element name="credential-interface"
		   type="j2ee:credential-interfaceType"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="config-property-settingType">
    <xsd:annotation>
      <xsd:documentation>

	The config-property-settingType contains a name-value pair for a
	config-property or required-config-property

      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:xsdStringType"/>
    </xsd:simpleContent>
	<xsd:attribute name="name" type="j2ee:xsdStringType"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="connection-definitionType">
    <xsd:annotation>
      <xsd:documentation>

	The connection-definitionType defines a set of connection
	interfaces and classes pertaining to a particular connection
	type. This also includes configurable properties for
	ManagedConnectionFactory instances that may be produced out
	of this set.

	The name element uniquely identifies this instance

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="connectionfactory-interface"
		   type="j2ee:fully-qualified-classType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[

connectionfactory-interface is unique in ra.xml so is used to index into ra.xml
	      ]]>
	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
      <xsd:element name="name"
           type="j2ee:xsdStringType"/>
      <xsd:element name="config-property-setting"
		   type="j2ee:config-property-settingType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
      <xsd:element name="connectionmanager-factory"
		   type="connectionmanager-factoryType">
      </xsd:element>
        <!-- will be bound in ger: context if present -->
      <xsd:element name="global-jndi-name"
                   type="j2ee:xsdStringType"
                   minOccurs="0"/>

    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="connectionmanager-factoryType">
    <xsd:annotation>
      <xsd:documentation>

Specification of factory that will construct the ConnectionManager for us.
      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="connectionmanagerfactory-descriptor"
		   type="j2ee:string">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[
location of the GeronimoMbeanInfo xml for the Class that implements getConnectionFactory and lifecycle methods.
	      ]]>
	  </xsd:documentation>
	</xsd:annotation>
      </xsd:element>
        <!--realm-bridge is an object name-->
      <xsd:element name="realm-bridge"
                   type="j2ee:xsdStringType"
                   minOccurs="0"/>
      <xsd:element name="config-property-setting"
		   type="config-property-settingType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="connectorType">
    <xsd:annotation>
      <xsd:documentation>

	The connectorType defines a resource adapter.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:group ref="j2ee:descriptionGroup"/>
      <xsd:element name="resourceadapter"
		   type="j2ee:resourceadapterType"/>

    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="credential-interfaceType">
    <xsd:annotation>
      <xsd:documentation>

	The credential-interfaceType specifies the
	interface that the resource adapter implementation
	supports for the representation of the
	credentials. This element(s) that use this type,
	i.e. credential-interface,  should be used by
	application server to find out the Credential
	interface it should use as part of the security
	contract.

	The possible values are:

	javax.resource.spi.security.PasswordCredential
	org.ietf.jgss.GSSCredential
	javax.resource.spi.security.GenericCredential

      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:fully-qualified-classType">
	<xsd:enumeration
	     value="javax.resource.spi.security.PasswordCredential"/>
	<xsd:enumeration
	     value="org.ietf.jgss.GSSCredential"/>
	<xsd:enumeration
	     value="javax.resource.spi.security.GenericCredential"/>
      </xsd:restriction>
    </xsd:simpleContent>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="inbound-resourceadapterType">
    <xsd:annotation>
      <xsd:documentation>

	The inbound-resourceadapterType specifies information
	about an inbound resource adapter. This contains information
	specific to the implementation of the resource adapter
	library as specified through the messageadapter element.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="messageadapter"
		   type="j2ee:messageadapterType"
		   minOccurs="0">
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->


  <xsd:complexType name="messageadapterType">
    <xsd:annotation>
      <xsd:documentation>

	The messageadapterType specifies information about the
	messaging capabilities of the resource adapter. This
	contains information specific to the implementation of the
	resource adapter library as specified through the
	messagelistener element.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="messagelistener"
		   type="j2ee:messagelistenerType"
		   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="messagelistenerType">
    <xsd:annotation>
      <xsd:documentation>

	The messagelistenerType specifies information about a
	specific message listener supported by the messaging
	resource adapter. It contains information on the Java type
	of the message listener interface and an activation
	specification.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="messagelistener-type"
		   type="j2ee:fully-qualified-classType">
	<xsd:annotation>
	  <xsd:documentation>
	    <![CDATA[

	      The element messagelistener-type specifies the fully
	      qualified name of the Java type of a message
	      listener interface.

	      Example:

		<messagelistener-type>javax.jms.MessageListener
		</messagelistener-type>

	      ]]>
	  </xsd:documentation>
	</xsd:annotation>

      </xsd:element>
      <xsd:element name="message-endpoint-factory"
		   type="j2ee:string"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>

<!-- **************************************************** -->

  <xsd:complexType name="outbound-resourceadapterType">
    <xsd:annotation>
      <xsd:documentation>

	The outbound-resourceadapterType specifies information about
	an outbound resource adapter. The information includes fully
	qualified names of classes/interfaces required as part of
	the connector architecture specified contracts for
	connection management, level of transaction support
	provided, one or more authentication mechanisms supported
	and additional required security permissions.

	If there is no authentication-mechanism specified as part of
	resource adapter element then the resource adapter does not
	support any standard security authentication mechanisms as
	part of security contract. The application server ignores
	the security part of the system contracts in this case.

      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="connection-definition"
		   type="j2ee:connection-definitionType"
		   maxOccurs="unbounded"/>
      <xsd:element name="transaction-support"
		   type="j2ee:transaction-supportType"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>


<!-- **************************************************** -->

  <xsd:complexType name="resourceadapterType">

    <xsd:sequence>
	  <xsd:element name="workmanager-name"
	  	   type="j2ee:string"/>
      <xsd:element name="config-property-setting"
		   type="j2ee:config-property-settingType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
	  <xsd:element name="bootstrapcontext-name"
	  	   type="j2ee:string"
	  	   minOccurs="0"/>
      <xsd:element name="outbound-resourceadapter"
		   type="j2ee:outbound-resourceadapterType"
		   minOccurs="0">
      </xsd:element>
      <xsd:element name="inbound-resourceadapter"
		   type="j2ee:inbound-resourceadapterType"
		   minOccurs="0"/>
      <xsd:element name="adminobject"
		   type="j2ee:adminobjectType"
		   minOccurs="0"
		   maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:ID"/>
  </xsd:complexType>


<!-- **************************************************** -->

  <xsd:complexType name="transaction-supportType">
    <xsd:annotation>
      <xsd:documentation>

	The transaction-supportType specifies the level of
	transaction support provided by the resource adapter. It is
	used by transaction-support elements.

	The value must be one of the following:

	    NoTransaction
	    LocalTransaction
	    XATransaction

      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:restriction base="j2ee:string">
	<xsd:enumeration value="NoTransaction"/>
	<xsd:enumeration value="LocalTransaction"/>
	<xsd:enumeration value="XATransaction"/>
      </xsd:restriction>
    </xsd:simpleContent>
  </xsd:complexType>

</xsd:schema>

