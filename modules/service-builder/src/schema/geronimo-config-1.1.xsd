<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2004 The Apache Software Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<xs:schema
    targetNamespace="http://geronimo.apache.org/xml/ns/deployment-1.1"
    xmlns:sys="http://geronimo.apache.org/xml/ns/deployment-1.1"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    >
    <xs:annotation>
        <xs:documentation>
            Schema for Geronimo Services deployment plans.
            Instance documents should begin with the element:

            &gt;gbeans xmlns="http://geronimo.apache.org/xml/ns/deployment-1.1"&lt;
        </xs:documentation>
    </xs:annotation>

    <xs:element name="configuration" type="sys:configurationType"/>

    <xs:complexType name="configurationType">
        <xs:sequence>
            <xs:element ref="sys:environment"/>
            <xs:element ref="sys:gbean" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="environment" type="sys:environmentType">
<!--    TODO figure out why this doesn't work
        <xs:key name="name-key-key">
            <xs:annotation>
                <xs:documentation>
                    name-key-key assures that key-values for the names of services in this configuration will
                    have unique key names.
                </xs:documentation>
            </xs:annotation>
            <xs:selector xpath="sys:name-key"/>
            <xs:field xpath="sys:name-key/key"/>
        </xs:key>
-->
    </xs:element>
    <xs:element name="client-environment" type="sys:environmentType"/>
    <xs:element name="server-environment" type="sys:environmentType"/>

    <xs:complexType name="environmentType">
        <xs:sequence>
            <xs:element name="configId" type="sys:artifactType" minOccurs="0" >
                <xs:annotation>
                    <xs:documentation>
                        "configId" holds elements for the groupId, artifactId, and version of the configuration
                        version can be ommitted in which case a timestamp is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="properties" type="sys:propertiesType" minOccurs="0"/>
            <xs:element name="dependencies" type="sys:dependenciesType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        "dependences" holds all classloader and dependency configuration information for the configuration
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="hidden-classes" type="sys:classFilterType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        A list of classes which will never be loaded from parent ClassLoaders of this
                        module.  For example, if Log4J was listed here, the module would never see
                        Geronimo's copy of Log4J.  If the module provided it's own Log4J JAR it would
                        use that, otherwise it would not be able to load Log4J at all.

                        The form of this is a comma-separated list of fully-qualified class names or
                        prefixes.  Essentially, any class that starts with one of the prefixes listed
                        here will be treated as hidden.  For example, if you set this value to
                        "java.util,java.lang" then you would really screw up your application.  :)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="non-overridable-classes" type="sys:classFilterType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        A list of classes which will only be loaded from parent ClassLodaers of this
                        module (never from the module's own ClassLoader).  For example, this is used
                        to prevent a web application from redefining "javax.servlet", so those
                        classes will *always* be loaded from the server instead of from the web
                        web application's own ClassPath.

                        The form of this is a comma-separated list of fully-qualified class names or
                        prefixes.  Essentially, any class that starts with one of the prefixes listed
                        here will be treated as hidden.  For example, setting this to
                        "javax.servlet,javax.ejb" would protect some of the core J2EE classes from
                        being overridden.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="inverse-classloading" type="sys:emptyType" minOccurs="0"/>
            <xs:element name="suppress-default-environment" type="sys:emptyType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="propertiesType">
        <xs:sequence>
            <xs:element name="property" type="sys:propertyType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="propertyType">
        <xs:annotation>
            <xs:documentation>
                property holds name and value for the deployment system.  When written the only use for this
                is to supply part of an object-name like name for the gbeans in the configuration
                These name-keys will be repeated in child configurations of this configuration.  Normally these
                are domain and server for jsr-77 style object names.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="name" type="xs:string"/>
            <xs:element name="value" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="dependenciesType">
        <xs:sequence>
            <xs:element name="dependency" type="sys:artifactType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        "dependency" holds an artifact locating an artifact in a repo or config store.
                        Depending on the type of artifact and value of the import element, the artifact may be
                        included in the current classpath, be loaded as a parent, may require the services
                        in the artifact to be started, or may not be added to the classpath.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="emptyType"/>

     <xs:element name="gbean" type="sys:gbeanType">
        <xs:annotation>
            <xs:documentation>
                Adds a new custom component to the server.  The component will be deployed
                when this application module is deployed, but it is not in any way protected,
                so once it is up and running, other modules can refer to it normally.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="classFilterType">
        <xs:sequence>
            <xs:element name="filter" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="artifactType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                Refers to either another module (aka configuration) running in the server, or
                an entry in the server's Repository.  In either case this effectively uses a
                URI.

                When this is pointing to a repository entry, the URI must have a form
                acceptable to the repository, which is currently a URI consisting of
                Maven-style identifiers separated by slashes (groupId/artifactId/version/type,
                for example, the URI "postgresql/postgresql-8.0-jdbc/313/jar" for a file like
                "repository/postgresql/postgresql-8.0-jdbc-313.jar").

                When this is pointing to a module/configuration, the URI should match the
                module's configId.  This also looks
                like a Maven-style URI discussed above.

                The artifactType element can take either a straight URI (as in the examples
                above), or maven-style identifier fragments (groupId, type, artifactId, and
                version), which it will compose into a URI by adding up the fragments with
                slashes in between.

                There is a correspondence between the xml format and a URI.  For example, the URI

                postgresql/postgresql-8.0-jdbc/313/jar

                corresponds to the xml:

                <groupId>postgresql</groupId>
                <artifactId>postgresql-8.0-jdbc</artifactId>
                <version>313</version>
                <type>jar</type>

          ]]></xs:documentation>
        </xs:annotation>
            <xs:sequence>
                <!-- TODO not sure if groupId can in fact be optional -->
                <xs:element name="groupId" type="xs:string" minOccurs="0"/>
                <xs:element name="artifactId" type="xs:string"/>
                <xs:element name="version" type="xs:string" minOccurs="0"/>
                <xs:element name="type" type="xs:string" minOccurs="0"/>
                <xs:element name="import" type="sys:importType" minOccurs="0"/>

            </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="importType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="classes"/>
            <xs:enumeration value="services"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="gbeanType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="attribute" type="sys:attributeType"/>
            <xs:element name="xml-attribute" type="sys:xml-attributeType"/>
            <xs:element name="reference" type="sys:referenceType"/>
            <xs:element name="references" type="sys:referencesType"/>
            <xs:element name="xml-reference" type="sys:xml-attributeType"/>
            <xs:element name="dependency" type="sys:patternType"/>
        </xs:choice>
        <!-- todo try to eliminate explicit gbeanName -->
        <xs:attribute name="gbeanName" type="xs:string"/>
        <xs:attribute name="name" type="xs:string"/>
        <xs:attribute name="class" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="attributeType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="name" type="xs:string"/>
                <xs:attribute name="type" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="xml-attributeType">
        <xs:sequence>
            <xs:any namespace="##any" processContents="lax"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="referencesType">
        <xs:sequence>
            <xs:element name="pattern" type="sys:patternType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="patternType">
        <xs:sequence>
            <xs:group ref="sys:gbean-nameGroup"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="referenceType">
        <xs:complexContent>
            <xs:extension base="sys:patternType">
                <xs:attribute name="name" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:group name="gbean-nameGroup">
        <xs:annotation>
            <xs:documentation>This group contains the components of a jsr-77 object name</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:sequence>
                <xs:element name="domain" type="xs:string" minOccurs="0"/>
                <xs:element name="server" type="xs:string" minOccurs="0"/>
                <xs:element name="application" type="xs:string" minOccurs="0"/>
                <xs:element name="moduleType" type="xs:string" minOccurs="0"/>
                <xs:element name="module" type="xs:string" minOccurs="0"/>
                <xs:element name="type" type="xs:string" minOccurs="0"/>
                <xs:element name="name" type="xs:string"/>
            </xs:sequence>
            <!-- todo try to eliminate explicit gbean-name -->
            <xs:element name="gbean-name" type="xs:string"/>
        </xs:choice>
    </xs:group>
    
    <xs:element name="service" type="sys:serviceType"/>

    <xs:complexType name="serviceType">
        <xs:sequence>
            <xs:element name="dependency" type="sys:artifactType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

</xs:schema>