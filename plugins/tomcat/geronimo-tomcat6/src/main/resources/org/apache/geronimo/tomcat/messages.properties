#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
TomcatManagerImpl.0=Tomcat BIO HTTP Connector
TomcatManagerImpl.1=Tomcat BIO HTTPS Connector
TomcatManagerImpl.2=Tomcat NIO HTTP Connector
TomcatManagerImpl.3=Tomcat NIO HTTPS Connector
TomcatManagerImpl.4=Tomcat APR HTTP Connector
TomcatManagerImpl.5=Tomcat APR HTTPS Connector
TomcatManagerImpl.6=Tomcat AJP Connector
TomcatManagerImpl.11=Protocol which may be used for communicating with clients.
TomcatManagerImpl.14=Ciphers which may be used for communicating with clients.
TomcatManagerImpl.17=Name of the file that contains the server certificate. The format is PEM-encoded.
TomcatManagerImpl.19=Name of the file that contains the server private key.
TomcatManagerImpl.21=Pass phrase for the encrypted private key.
TomcatManagerImpl.24=Ask client for certificate.
TomcatManagerImpl.26=Maximum verification depth for client certificates.
TomcatManagerImpl.28=File of concatenated PEM-encoded CA Certificates for Client Auth.
TomcatManagerImpl.30=Directory of PEM-encoded CA Certificates for Client Auth.
TomcatManagerImpl.32=File of PEM-encoded Server CA Certificates.
TomcatManagerImpl.34=File of concatenated PEM-encoded CA CRLs for Client Auth.
TomcatManagerImpl.36=Directory of PEM-encoded CA CRLs for Client Auth.
TomcatManagerImpl.40=The host name or IP to bind to. The normal values are 0.0.0.0 (all interfaces) or localhost (local connections only)
TomcatManagerImpl.42=The network port to bind to.
TomcatManagerImpl.44=The maximum queue length for incoming connection requests when all possible request processing threads are in use.
TomcatManagerImpl.46=Buffer size
TomcatManagerImpl.48=Connection timeout in milliseconds
TomcatManagerImpl.50=Keep alive timeout in milliseconds
TomcatManagerImpl.52=The maximum number of threads this connector should use to handle incoming requests
TomcatManagerImpl.54=Minimum spare threads
TomcatManagerImpl.56=Maximum spare threads
TomcatManagerImpl.58=If set to true, the TCP_NO_DELAY option will be set on the server socket, which improves performance under most circumstances.
TomcatManagerImpl.60=If set to true, the authetication will be done in Geronimo. Otherwise, the authenticated principal will be propagated from the native webaserver and used for authorization in Geronimo.
TomcatManagerImpl.80=A boolean value which can be used to enable or disable the TRACE HTTP method.
TomcatManagerImpl.82=If set to true, all paths for session cookies will be set to /. This can be useful for portlet specification implementations, but will greatly affect performance if many applications are accessed on a given server by the client.
TomcatManagerImpl.84=Set to true if you want calls to request.getRemoteHost() to perform DNS lookups in order to return the actual host name of the remote client. Set to false to skip the DNS lookup and return the IP address in String form instead (thereby improving performance).
TomcatManagerImpl.86=The maximum size in bytes of the POST which will be handled by the container FORM URL parameter parsing. The limit can be disabled by setting this attribute to a value less than or equal to 0.
TomcatManagerImpl.88=The maximum size in bytes of the POST which will be saved/buffered by the container during FORM or CLIENT-CERT authentication. For both types of authentication, the POST will be saved/buffered before the user is authenticated. For CLIENT-CERT authentication, the POST is buffered for the duration of the SSL handshake and the buffer emptied when the request is processed. For FORM authentication the POST is saved whilst the user is re-directed to the login form and is retained until the user successfully authenticates or the session associated with the authentication request expires. The limit can be disabled by setting this attribute to -1. Setting the attribute to zero will disable the saving of POST data during authentication.
TomcatManagerImpl.90=If this Connector is being used in a proxy configuration, configure this attribute to specify the server name to be returned for calls to request.getServerName().
TomcatManagerImpl.92=If this Connector is being used in a proxy configuration, configure this attribute to specify the server port to be returned for calls to request.getServerPort().
TomcatManagerImpl.94=If this Connector is supporting non-SSL requests, and a request is received for which a matching <security-constraint> requires SSL transport, Catalina will automatically redirect the request to the port number specified here.
TomcatManagerImpl.97=This specifies the character encoding used to decode the URI bytes, after %xx decoding the URL.
TomcatManagerImpl.99=This specifies if the encoding specified in contentType should be used for URI query parameters, instead of using the URIEncoding. This setting is present for compatibility with Tomcat 4.1.x, where the encoding specified in the contentType, or explicitely set using Request.setCharacterEncoding method was also used for the parameters from the URL.
TomcatManagerImpl.101=Set this attribute to true to cause Tomcat to use the IP address that the request was recieved on to determine the Host to send the request to.
TomcatManagerImpl.103=Set this attribute to true to cause Tomcat to advertise support for the Servlet specification using the header recommended in the specification.
TomcatManagerImpl.105=The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused.
TomcatManagerImpl.108=The host name or IP to bind to. The normal values are 0.0.0.0 (all interfaces) or localhost (local connections only).
TomcatManagerImpl.110=The size (in bytes) of the buffer to be provided for input streams created by this connector.
TomcatManagerImpl.113=The value is a comma separated list of MIME types for which HTTP compression may be used.
TomcatManagerImpl.116=The Connector may use HTTP/1.1 GZIP compression in an attempt to save server bandwidth. The acceptable values for the parameter is <i>off</i> (disable compression), <i>on</i> (allow compression, which causes text data to be compressed), <i>force</i> (forces compression in all cases), or a numerical integer value (which is equivalent to <i>on</i>, but specifies the minimum amount of data before the output is compressed). If the content-length is not known and compression is set to <i>on</i> or more aggressive, the output will also be compressed.
TomcatManagerImpl.118=The number of milliseconds during which the sockets used by this Connector will linger when they are closed. The default value is -1 (socket linger is disabled).
TomcatManagerImpl.120=The number of milliseconds this Connector will wait, after accepting a connection, for the request URI line to be presented.
TomcatManagerImpl.122=A reference to the name in an Executor element. If this attribute is enabled, and the named executor exists, the connector will use the executor, and all the other thread attributes will be ignored.
TomcatManagerImpl.124=The number of milliseconds this Connector will wait for another HTTP request before closing the connection. 
TomcatManagerImpl.126=This flag allows the servlet container to use a different, longer connection timeout while a servlet is being executed, which in the end allows either the servlet a longer amount of time to complete its execution, or a longer timeout during data upload.
TomcatManagerImpl.128=The maximum size of the request and response HTTP header, specified in bytes.
TomcatManagerImpl.130=The maximum number of HTTP requests which can be pipelined until the connection is closed by the server. Setting this attribute to 1 will disable HTTP/1.0 keep-alive, as well as HTTP/1.1 keep-alive and pipelining. Setting this to -1 will allow an unlimited amount of pipelined or keep-alive HTTP requests.
TomcatManagerImpl.132=The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 40. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool.
TomcatManagerImpl.134=Minimum spare threads
TomcatManagerImpl.136=Maximum spare threads
TomcatManagerImpl.139=The value is a comma separated list of regular expressions matching user-agents of HTTP clients for which compression should not be used, because these clients, although they do advertise support for the feature, have a broken implementation.
TomcatManagerImpl.141=The TCP port number on which this Connector  will create a server socket and await incoming connections. Your operating system will allow only one server application to listen to a particular port number on a particular IP address.
TomcatManagerImpl.144=The value is a comma separated list of regular expressions matching user-agents of HTTP clients for which HTTP/1.1 or HTTP/1.0 keep alive should not be used, even if the clients advertise support for these features. 
TomcatManagerImpl.147=The Server header for the http response.
TomcatManagerImpl.149=The size (in bytes) of the buffer to be provided for socket output buffering. -1 can be specified to disable the use of a buffer.
TomcatManagerImpl.151=If set to true, the TCP_NO_DELAY option will be set on the server socket, which improves performance under most circumstances.
TomcatManagerImpl.153=The priority of the request processing threads within the JVM.
TomcatManagerImpl.155=The certificate encoding algorithm to be used.
TomcatManagerImpl.157=Set to true if you want the SSL stack to require a valid certificate chain from the client before accepting a connection. Set to want if you want the SSL stack to request a client Certificate, but not fail if one isn't presented. A false  value (which is the default) will not require a certificate chain unless the client requests a resource protected by a security constraint that uses CLIENT-CERT authentication.
TomcatManagerImpl.160=The file that holds the keystore (relative to the Geronimo install dir)
TomcatManagerImpl.162=Set the password used to access the keystore file. This is also the password used to access the server private key within the keystore (so the two passwords must be set to be the same on the keystore).
TomcatManagerImpl.165=Set the keystore type. There is normally no reason not to use the default (JKS).
TomcatManagerImpl.168=Set the HTTPS protocol. This should normally be set to TLS, though some (IBM) JVMs don't work properly with popular browsers unless it is changed to SSL.
TomcatManagerImpl.171=A comma seperated list of the encryption ciphers that may be used. If not specified, then any available cipher may be used.
TomcatManagerImpl.173=The alias used to for the server certificate in the keystore. If not specified the first key read in the keystore will be used.
TomcatManagerImpl.175=The TrustStore file to use to validate client certificates.
TomcatManagerImpl.177=The password to access the TrustStore.
TomcatManagerImpl.179=Set the truststore type. There is normally no reason not to use the default (JKS).
TomcatManagerImpl.181=Use this attribute to enable or disable sendfile capability.
TomcatManagerImpl.183=Set to true to use the NIO thread pool executor. The default value is true. If set to false, it uses a thread pool based on a stack for its execution. Generally, using the executor yields a little bit slower performance, but yields a better fairness for processing connections in a high load environment as the traffic gets queued through a FIFO queue. If set to true(default) then the max pool size is the maxThreads attribute and the core pool size is the minSpareThreads. This value is ignored if the executor attribute is present and points to a valid shared thread pool.
TomcatManagerImpl.185=The number of threads to be used to accept connections. Increase this value on a multi CPU machine, although you would never really need more than 2. Also, with a lot of non keep alive connections, you might want to increase this value as well. 
TomcatManagerImpl.187=The number of threads to be used to run for the polling events.
TomcatManagerImpl.189=The priority of the poller threads.
TomcatManagerImpl.191=The priority of the acceptor threads. The threads used to accept new connections.
TomcatManagerImpl.193=The time in milliseconds to timeout on a select() for the poller. This value is important, since connection clean up is done on the same thread, so dont set this value to an extremely high one.
TomcatManagerImpl.195=Whether to allow comet servlets or not.
TomcatManagerImpl.197=The protocol handler caches Http11NioProcessor objects to speed up performance. This setting dictates how many of these objects get cached. -1 means unlimited, default is 200. Set this value somewhere close to your maxThreads value.
TomcatManagerImpl.199=Whether to use direct ByteBuffers or java mapped ByteBuffers. Default is false. When you are using direct buffers, make sure you allocate the appropriate amount of memory for the direct memory space. On Sun's JDK that would be something like -XX:MaxDirectMemorySize=256m
TomcatManagerImpl.201=The socket receive buffer (SO_RCVBUF) size in bytes.
TomcatManagerImpl.203=The socket send buffer (SO_SNDBUF) size in bytes.
TomcatManagerImpl.205=Each connection that is opened up in Tomcat get associated with a read and a write ByteBuffer This attribute controls the size of these buffers. By default this read buffer is sized at 8192 bytes. For lower concurrency, you can increase this to buffer more data. For an extreme amount of keep alive connections, decrease this number or increase your heap size.
TomcatManagerImpl.207=Each connection that is opened up in Tomcat get associated with a read and a write ByteBuffer This attribute controls the size of these buffers. By default this write buffer is sized at 8192 bytes. For low concurrency you can increase this to buffer more response data. For an extreme amount of keep alive connections, decrease this number or increase your heap size.
TomcatManagerImpl.209=The Nio connector uses a class called NioChannel that holds elements linked to a socket. To reduce garbage collection, the Nio connector caches these channel objects. This value specifies the size of this cache. The default value is 500, and represents that the cache will hold 500 NioChannel objects. Other values are -1. unlimited cache, and 0, no cache.
TomcatManagerImpl.211=The NioChannel pool can also be size based, not used object based. The size is calculated as follows: <br>NioChannel buffer size = read buffer size + write buffer size <br>SecureNioChannel buffer size = application read buffer size + application write buffer size + network read buffer size + network write buffer size
TomcatManagerImpl.213=Tomcat will cache SocketProcessor objects to reduce garbage collection. The integer value specifies how many objects to keep in the cache at most. The default is 500. Other values are -1. unlimited cache, and 0, no cache.
TomcatManagerImpl.215=Tomcat will cache KeyAttachment objects to reduce garbage collection. The integer value specifies how many objects to keep in the cache at most. The default is 500. Other values are -1. unlimited cache, and 0, no cache.
TomcatManagerImpl.217=Tomcat will cache PollerEvent objects to reduce garbage collection. The integer value specifies how many objects to keep in the cache at most. The default is 500. Other values are -1. unlimited cache, and 0, no cache.
TomcatManagerImpl.219=Same as the standard setting tcpNoDelay.
TomcatManagerImpl.221=Boolean value for the socket's keep alive setting (SO_KEEPALIVE).
TomcatManagerImpl.223=Boolean value for the socket OOBINLINE setting.
TomcatManagerImpl.225=Boolean value for the sockets reuse address option (SO_REUSEADDR). 
TomcatManagerImpl.227=Boolean value for the sockets so linger option (SO_LINGER). This option is paired with the soLingerTime value.
TomcatManagerImpl.229=Value in seconds for the sockets so linger option (SO_LINGER). This option is paired with the soLinger value.
TomcatManagerImpl.231=Value in milliseconds for the sockets read timeout (SO_TIMEOUT). 
TomcatManagerImpl.233=Value between 0 and 255 for the traffic class on the socket, 0x04 | 0x08 | 0x010
TomcatManagerImpl.235=The first value for the performance settings.
TomcatManagerImpl.237=The second value for the performance settings.
TomcatManagerImpl.239=The third value for the performance settings.
TomcatManagerImpl.241=The max selectors to be used in the pool, to reduce selector contention. Use this option when the command line org.apache.tomcat.util.net.NioSelectorShared value is set to false.
TomcatManagerImpl.243=The max spare selectors to be used in the pool, to reduce selector contention. When a selector is returned to the pool, the system can decide to keep it or let it be GC:ed. Use this option when the command line org.apache.tomcat.util.net.NioSelectorShared value is set to false.
TomcatManagerImpl.245=The following command line options are available for the NIO connector: <i>-Dorg.apache.tomcat.util.net.NioSelectorShared=true|false</i>. Set this value to false if you wish to use a selector for each thread. the property. If you do set it to false, you can control the size of the pool of selectors by using the selectorPool.maxSelectors attribute
TomcatManagerImpl.247=The NIO connector implements an OutOfMemoryError strategy called parachute. It holds a chunk of data as a byte array. In case of an OOM, this chunk of data is released and the error is reported. This will give the VM enough room to clean up. The oomParachute represent the size in bytes of the parachute(the byte array). The default value is 1024*1024(1MB). Please note, this only works for OOM errors regarding the Java Heap space, and there is absolutely no guarantee that you will be able to recover at all. If you have an OOM outside of the Java Heap, then this parachute trick will not help.
TomcatManagerImpl.249=Duration of a poll call. Lowering this value will slightly decrease latency of connections being kept alive in some cases, but will use more CPU as more poll calls are being made.
TomcatManagerImpl.251=Amount of sockets that the poller responsible for polling kept alive connections can hold at a given time. Extra connections will be closed right away.
TomcatManagerImpl.253=Use kernel level sendfile for certain static files.
TomcatManagerImpl.255=Amount of sockets that the poller responsible for sending static files asynchronously can hold at a given time. Extra connections will be closed right away without any data being sent (resulting in a zero length file on the client side). Note that in most cases, sendfile is a call that will return right away (being taken care of synchonously by the kernel), and the sendfile poller will not be used, so the amount of static files which can be sent concurrently is much larger than the specified amount.
