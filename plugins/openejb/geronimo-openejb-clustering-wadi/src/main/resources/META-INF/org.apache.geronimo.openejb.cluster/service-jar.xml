<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- $Rev: 610927 $ $Date: 2008-01-11 07:48:37 +1100 (Fri, 11 Jan 2008) $ -->

<ServiceJar>

  <!--
  # ==========================================================
  # Default Clustered Stateful Container
  # ==========================================================
  -->
  <ServiceProvider
          id="Default Clustered Stateful Container"
          service="Container"
          types="STATEFUL"
          constructor="id, securityService"
          class-name="org.apache.geronimo.openejb.cluster.container.stateful.ClusteredStatefulContainer">

  </ServiceProvider>
  
  <!--
  # ==========================================================
  # Default Clustered Stateless Container
  # ==========================================================
  -->
  <ServiceProvider
          id="Default Clustered Stateless Container"
          service="Container"
          types="STATELESS"
          constructor="id, securityService, AccessTimeout, CloseTimeout, PoolSize, StrictPooling"
          class-name="org.apache.geronimo.openejb.cluster.container.stateless.ClusteredStatelessContainer">

    # Specifies the time to wait between invocations. This
    # value is measured in milliseconds. A value of 5 would
    # result in a time-out of 5 milliseconds between invocations.
    # A value of zero would mean no timeout.

    AccessTimeout 0 milliseconds
    
    # PostConstruct methods are invoked on all instances in the pool
    # when the bean is undeployed and its pool is closed.  The
    # CloseTimeout specifies the maximum time to wait for the pool to
    # close and PostConstruct methods to be invoked.
    #
    # Usable time units: nanoseconds, microsecons, milliseconds,
    # seconds, minutes, hours, days.  Or any combination such as
    # "1 hour and 27 minutes and 10 seconds"

    CloseTimeout = 5 minutes    

    # Specifies the size of the bean pools for this
    # stateless SessionBean container.

    PoolSize 10

    # StrictPooling tells the container what to do when the pool
    # reaches it's maximum size and there are incoming requests
    # that need instances.
    #
    # With strict pooling, requests will have to wait for instances
    # to become available. The pool size will never grow beyond the
    # the set PoolSize value.
    #
    # Without strict pooling, the container will create temporary
    # instances to meet demand. The instances will last for just one
    # method invocation and then are removed.

    StrictPooling true
    
    # Specifies the minimum number of bean instances that should be
    # in the pool for each bean.  Pools are prefilled to the minimum
    # on startup.  Pool "shrinking" is achived through SoftReferences
    # and natural vm garbage collection. All but the minimum are allowed
    # to be garbage collected by the VM when memory is needed.
    #
    # The minimum pool size is rigidly maintained.  The minimum side
    # of the pool is not eligible for IdleTimeout, but is subject to
    # MaxAge and flushing.  When the pool is flushed, the pool is
    # immediately refilled to the minimum size with MaxAgeOffset
    # applied.  When an instance from the minimum side of the pool
    # reaches it's MaxAge, it is also immediately replaced.
    # Replacement is done in a background queue using the number of
    # threads specified by CallbackThreads.
    
    PoolMin 0
    

  </ServiceProvider>

</ServiceJar>
