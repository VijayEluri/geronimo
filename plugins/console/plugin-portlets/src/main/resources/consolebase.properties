#=====================================================================
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#=====================================================================
# $Rev$ $Date$

ajax.progressbar.processing = Processing...

apache.jk.ajpPort.networkPort                = Network Port for AJP
apache.jk.ajpPort.networkPortExplanation     = <tt>mod_jk</tt> talks to the Geronimo web container using a protocol called AJP.  Currently, you do not have an AJP protocol listener configured for the web container.  Select a network port here, and an AJP protocol listener will be added for you.
apache.jk.ajpPort.title                      = <b>Apache mod_jk</b> -- AJP Port
apache.jk.config.logFileLocation             = <tt>mod_jk</tt> log file location
apache.jk.config.logFileLoctionExplanation   = <tt>mod_jk</tt> writes to a log file in a location you choose.  The log file location needs to be set in the Apache configuration.   Please select the location where the <tt>mod_jk</tt> log file should be written.
apache.jk.config.operatingSystem             = Operating System
apache.jk.config.operatingSystemExplanation  = The process for installing <tt>mod_jk</tt> depends on the operating system. For some, we can provide specific guidance. For others, you'll have to install <tt>mod_jk</tt> on your own.
apache.jk.config.pathToProperties            = Path to <tt>workers.properties</tt>
apache.jk.config.pathToPropertiesExplanation = <tt>mod_jk</tt> requires a file called <tt>workers.properties</tt> to specify which app servers can be contacted on which network ports, etc.   This tool will generate the contents for the <tt>workers.properties</tt> file,  but it also needs to point to this file in the Apache configuration data,  so we need to know where you plan to put this file.
apache.jk.config.title                       = <b>Apache mod_jk</b> -- Basic Configuration
apache.jk.index.frag1                        = This tool walks you through the process of configuring access to Geronimo through the Apache 2 HTTP server using the <tt>mod_jk</tt> Apache module. There are several steps needed to do this:
apache.jk.index.frag2                        = By answering a few questions here, we can give you specific guidance and generate configuration information you can use.
apache.jk.index.getStarted                   = Get Started
apache.jk.index.notes                        = </li></ul><p>Notes:</p><ul><li>Geronimo does not remember previous settings generated using this tool;you'll need to reenter all the data each time, or just paste the new information into your existing configuration files.</li>  <li>Any web applications to be exposed via Apache must be running when you run this tool, and of course must be running to be accessed from Apache.</li></ul>
apache.jk.index.severalSteps                 = <ol><li>Configure the Geronimo web container to support the AJP protocol</li><li>Install the <tt>mod_jk.so</tt> Apache module (compiling it if necessary)</li><li>Create a <tt>workers.properties</tt> configuration file to point Apache to the Geronimo AJP connector</li><li>Add Apache configuration information indicating which URLs should be sent to Geronimo and whether Apache should serve static content (leaving only dynamic content within the web application to Geronimo)</li></ol>
apache.jk.results.alreadyHasAJPListener      = This Geronimo configuration already has an AJP listener running on port {0}. Nothing further needs to be done here.
apache.jk.results.anAJPLisstnerAdded         = An AJP lisstner was added on port {0}.  Nothing further needs to be done here.
apache.jk.results.canActivateIt              = Once the <tt>mod_jk</tt> RPM is installed, you can activate it by
apache.jk.results.followingInfoToConfig      = The following information needs to go into your Apache Configuration.
apache.jk.results.howToActivateOthers        = adding the following line to <tt>/etc/httpd/conf/httpd.conf</tt>:</p><pre>LoadModule jk_module modules/mod_jk.so</pre> <p>Then you can start Apache by running <tt>service httpd start</tt>  (or <tt>service httpd restart</tt>).
apache.jk.results.howToActivateifOsSuSE      = editing <tt>/etc/sysconfig/apache2</tt> and adding <tt>jk</tt> to the value configured for  <tt>APACHE_MODULES</tt> and then running (as root) <tt>SuSEconfig</tt> followed by  <tt>rcapache2 start</tt> (or <tt>rcapache2 restart</tt>).
apache.jk.results.noInstructionsToInstall    = </p><p>Based on your operating system selection, I don't have specific instructions to install <tt>mod_jk</tt>.  You may be able to get a binary release from  <a href="http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/"> http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/</a>.  Otherwise, you'll have to build from source.</p><p>To enable <tt>mod_jk</tt> in Apache,  you typically need to install the <tt>.so</tt> (Linux/UNIX/Mac OS X)  or <tt>.dll</tt>  (Windows) and then add a line to the <tt>httpd.conf</tt> file like this:</p> <pre> LoadModule jk_module modules/mod_jk.so</pre> <p>Finally, start or restart Apache.</p>
apache.jk.results.saveFollowingToFile        = You've decided to save this file at <tt> {0} </tt>.  Please save the following content to that file.
apache.jk.results.saveWhereIfSuSE            = For SuSE, this should be saved to a file in the Apache conf.d dir, e.g.write this content to <tt>/etc/apache2/conf.d/geronimo-jk.conf</tt>
apache.jk.results.saveWhereOthwise           = This information should be added to the Apache configuration file.  This is often at a location such as <tt>/etc/httpd/conf/httpd.conf</tt>
apache.jk.results.step1                      = Step 1: Configure Geronimo for AJP
apache.jk.results.step2                      = Step 2: Install <tt>mod_jk</tt>
apache.jk.results.step2_installUsingRPM      = On {0}, you can install <tt>mod_jk</tt> using an RPM.  This does not activate it in Apache,but it at least installs the binary in the right location.  To install, find the following RPM on your install media and run a command like this\uFF1A
apache.jk.results.step3                      = Step 3: Create a <tt>workers.properties</tt> file
apache.jk.results.step4                      = Step 4: Apache Configuration<h2>
apache.jk.results.step5                      = Step 5: Restart Apache
apache.jk.results.step5Content               = With those steps completed, Apache should be ready to go!  Start Geronimo and restart Apache and try accessing a Geronimo web application through an Apache URL.  If there are any problems, check the Apache error log, and the mod_jk error log (at <tt>{0}</tt>).
apache.jk.results.summary                    = This page lists the things you must do to enable <tt>mod_jk</tt> in Apache and configure it to talk to Geronimo.
apache.jk.results.title                      = <b>Apache mod_jk</b> -- Configuration Results
apache.jk.webApps.dynamicPaths               = Dynamic Paths
apache.jk.webApps.select                     = <p>For each web application <i>currently running</i> in Geronimo, select:</p><dl>  <dt><b>Through Apache</b></dt>  <dd>Whether the web application should be exposed through Apache</dd>  <dt><b>Static Content</b></dt>  <dd>Whether Apache should serve static content for the web application  (instead of all    content being handled by Geronimo)</dd>  <dt><b>Dynamic Paths</b></dt> <dd>If Apache is serving static content, which URL paths should be passed to Geronimo       (e.g. <tt>/servlet/*</tt> or <tt>*.jsp</tt>)</dd></dl>
apache.jk.webApps.staticContent              = Static Content
apache.jk.webApps.throughApache              = Through Apache
apache.jk.webApps.title                      = <b>Apache mod_jk</b> -- Web App Selection
apache.jk.webApps.webApplication             = Web Application

ca.caDetails.summary                                = This screen shows the details of CA's certificate and keypair.  <i>Highest Serial Number</i> shows the highest of serial number of any certificate issued by this CA.  <i>Certificate Text</i> shows the CA's certificate in base64 encoded form.  This text can be used by the certificate requestors to designate this CA as a trusted CA in their software.
ca.caDetails.title                                  = Certification Authority Details
ca.certReqDetails.summary                           = This screen shows the details of the Certficate Signing Request (CSR) and allows you to input the validity period and signature algorithm for the certificate to be issued.  The certificate serial number is automatically generated by incrementing the serial number of the last certificate issued.   The next screen will allow you to review & confirm these details and issue a certificate. 
ca.certReqDetails.title                             = <b>Issue New Certificate</b> - Step 2: Review Request and enter Certificate details
ca.common.CSRText                                   = CSR Text
ca.common.Division_BusinessUnit                     = Division/Business Unit
ca.common.aliasForCAKeypair                         = Alias for CA's keypair
ca.common.backToCAHome                              = Back to CA home
ca.common.base64EncodedCertText                     = Base64 encoded Certificate Text
ca.common.certAuthorityIdentity                     = Certification Authority's Identity
ca.common.certRequestorDetails                      = Certificate Requestor Details
ca.common.certRequests                              = Certificate Requests
ca.common.certSerialNo                              = Certificate Serial Number.
ca.common.certSerialNumber                          = Certificate Serial Number
ca.common.certificateDetails                        = Certificate Details
ca.common.city_Locality                             = City/Locality
ca.common.commonName                                = Common Name
ca.common.company_Organization                      = Company/Organization
ca.common.countryCode                               = Country Code
ca.common.criticalExt                               = critical ext
ca.common.detailsOfCert                             = Details of the Certificate to be issued
ca.common.fingerPrints                              = Finger prints
ca.common.highestSerialNumber                       = Highest Serial Number
ca.common.issueNewCert                              = Issue New Certificate
ca.common.issuer                                    = Issuer
ca.common.keyAlgorithm                              = Key Algorithm
ca.common.keyDetails                                = Key Details
ca.common.keySize                                   = Key Size
ca.common.lockCA                                    = Lock CA
ca.common.noRequests                                = There are no requests.
ca.common.nonCriticalExt                            = non-critical ext
ca.common.processCSR                                = Process CSR
ca.common.publicKey                                 = Public Key
ca.common.publicKeyAlg                              = Public Key Alg
ca.common.reviewCADetails                           = Review CA Details
ca.common.reviewClientCertDetails                   = Review Client Cert Details
ca.common.serialNumber                              = Serial Number
ca.common.setupCertAuthority                        = Setup Certification Authority
ca.common.signatureAlg                              = Signature Alg
ca.common.signatureAlgorithm                        = Signature Algorithm
ca.common.state_Province                            = State/Province
ca.common.subject                                   = Subject
ca.common.title                                     = View Certificate
ca.common.unlockCA                                  = Unlock CA
ca.common.unlockCertAuthority                       = Unlock Certification Authority
ca.common.validFrom                                 = Valid From
ca.common.validFromDate                             = Valid From Date
ca.common.validTo                                   = Valid To
ca.common.validToDate                               = Valid To Date
ca.common.viewCADetails                             = View CA Details
ca.common.viewIssuedCert                            = View Issued Certificate
ca.confirmCA.summary                                = This screen lets you review the CA details entered in the previous screen.  If you need to modify any information shown here, please go back to the previous screen.  Upon clicking the <i>Setup Certification Authority</i> button, a keypair and a self-signed certificate will be generated and stored in a keystore.  CA's certificate serial number is stored in a text file and the number is incremented each time a CSR is processed by the CA.
ca.confirmCA.title                                  = <b>Setup Certification Authority</b> - Step 2: Review and Confirm CA details
ca.confirmCertReq.approveCSR                        = Approve CSR
ca.confirmCertReq.confirmCertRequest                = Confirm Certificate Request
ca.confirmCertReq.rejectCSR                         = Reject CSR
ca.confirmCertReq.summary                           = This screen shows the details of the Certficate Signing Request (CSR) and allows you to approve the request.Once the request is approved, it will be considered for issue of a certificate.
ca.confirmClientCert.issueCert                      = Issue Certificate
ca.confirmClientCert.summary                        = This screen shows the CSR details and the certificate details entered in the previous screen.  Upon clicking the <i>Issue Certificate</i> button, a certificate will be issued and stored.  The next screen will show the details of the certificate issued.
ca.confirmClientCert.title                          = <b>Issue New Certificate</b> - Step 3: Confirm and Issue Certificate
ca.index.CAFunctionsAccessed                        = CA functions can be accessed using the links provided below.
ca.index.CAInitialized                              = CA has been initialized.
ca.index.CALocked                                   = But, the CA is locked.  Please unlock the CA to access CA functions.
ca.index.CANotInitialized                           = CA is not running or the CA may not have been initialized.  Please initialize the CA using the link provided below.
ca.index.publishCACert                              = Publish CA Certificate
ca.index.requestsToBeFulfilled                      = Requests to be fulfilled
ca.index.requestsToBeVerified                       = Requests to be verified
ca.index.title                                      = This portlet allows you to setup a Certification Authority (CA) and issue certificates in reply to Certificate Signing Requests (CSRs).   <i>Setup Certification Authority</i> function allows to initialize the CA by providing CA Identity details,   algorithm parameters for CA's key pair and self-signed certificate and a password to protect the CA's private key. This password is to be used to unlock the CA to access CA functions. Once the CA is initialized,CSRs can be processed using <i>Issue New Certificate</i> function.  Previously issued certificates can be viewed using <i>View Issued Certificate</i> function.
ca.listRequestsIssue.CertRequestsAwaiting           = Certificate Requests awaiting fulfillment
ca.listRequestsIssue.CertRequestsAwaitingExp        = This screen shows the certificate requests waiting to be fulfilled.
ca.listRequestsVerify.certRequestsAwaitingVerify    = Certificate Requests awaiting verification
ca.listRequestsVerify.certRequestsAwaitingVerifyExp = This screen shows the certificate requests waiting for verification.
ca.processCSR.pastePkcs10here                       = ...paste pkcs10 encoded certificate request here...
ca.processCSR.summary                               = This screen lets you process Certificate Signing Request (CSR) text and view the details of the requestor.  Paste the content of CSR text file you received from the requestor and click on<i>Process CSR</i> button.  The next screen will show the details of the requestor and allow you to input information required to issue a certificate.
ca.processCSR.title                                 = <b>Issue New Certificate</b> - Step 1: Process Certificate Signing Request (CSR)\r\n
ca.setupCA.summary                                  = On this screen you can enter the Certification Authority (CA) details, algorithm parameters for CA's keypair, algorithm for CA's self signed certificate and a password to protect the CA's private key. The next screen will let you review this information before generating the CA's keypair and self-signed certificate.
ca.setupCA.title                                    = <b>Setup Certification Authority</b> - Step 1: Enter CA details
ca.unlockCA.enterCAPrivateKeyPassword               = Enter the CA's private key password
ca.unlockCA.summary                                 = This screen lets you unlock the CA by providing the password used to protect the CA's private key.  Once unlocked, the CA functions will be available.
ca.viewCertificate.enterSerialNumber                = Enter the serial number of the certificate to be viewed and click on <i>View Certificate</i> button.
ca.viewCertificate.screenShows                      = This screen shows the details of a certificate issued by the CA.  The base64 encoded certificate text should be sent to the requestor as a reply to their Certificate Signing Request (CSR).

car.addRepository.currentlyPluginRepositories = The currently available plugin repositories are
car.addRepository.downloadRunningCongfig      = You can also download running configurations from another Geronimo server just as if you're browsing and installing third-party plugins. If you want to point to a remote Geronimo server, enter a URL such as <tt>http://geronimo-server:8080/console-standard/maven-repo/</tt>
car.addRepository.howToAddPluginRepositories  = To add a new plugin repository to this list, enter the URL to the repository. The repository must have a <tt>geronimo-plugins.xml</tt> file in the root directory listing the available plugins in the repository.
car.addRepository.title                       = Add Plugin Repository
car.common.addRepository                      = Add Repository
car.common.author                             = Author
car.common.category                           = Category
car.common.createGeronimoPlugin               = Create Geronimo Plugin
car.common.dependencies                       = Dependencies
car.common.downloadRepositories               = Download Repositories
car.common.exportPlugin                       = Export Plugin
car.common.geronimoVersions                   = Geronimo Versions
car.common.group                              = Group
car.common.license                            = License
car.common.moduleID                           = Module ID
car.common.newRepository                      = New Repository
car.common.obsoletes                          = Obsoletes
car.common.openSource                         = Open Source
car.common.pluginURL                          = Plugin URL
car.common.prereq1Description                 = Prereq 1 Description
car.common.prereq2Description                 = Prereq 2 Description
car.common.prereq3Description                 = Prereq 3 Description
car.common.prerequisite1ID                    = Prerequisite 1 ID
car.common.prerequisite1Type                  = Prerequisite 1 Type
car.common.prerequisite2ID                    = Prerequisite 2 ID
car.common.prerequisite2Type                  = Prerequisite 2 Type
car.common.prerequisite3ID                    = Prerequisite 3 ID
car.common.prerequisite3Type                  = Prerequisite 3 Type
car.common.prerequisites                      = Prerequisites
car.common.proprietary                        = Proprietary
car.common.removePlugins                      = Remove Geronimo Plugins
car.common.repository                         = Repository
car.common.savePluginData                     = Save Plugin Data
car.common.searchForPlugins                   = Show Plugins in selected repository
car.common.uniqueID                           = Unique ID
car.common.viewDetails                        = View Details
car.common.webSite                            = Web Site
car.confirmExport.title                       = <b>Export Plugin</b> -- Save to Disk
car.confirmExport.useBtnBelow                 = Use the button below to save the plugin "{0}" to disk.
car.download.foundDependencies                = Found the following dependencies for this plugin.  Any missing dependencies will be installed for you automatically if you proceed.
car.download.processing                       = Processing {0}...
car.downloadStatus.processing                 = Processing {0}...
car.index.createGeronimoPluginExp             = Choose a configuration in the current Geronimo server to export as a Geronimo plugin.  The configuration will be saved as a CAR file to your local filesystem.<i>Note: at present, you must manually add a <tt>META-INF/geronimo-plugin.xml</tt> file to the CAR  after you export it in order for it to be a valid plugin.</i>
car.index.optionalAuthentication              = Optional Authentication
car.index.removePluginsExp                    = To remove a plugin, use the categories under <b>Applications</b> to locate the plugin module and uninstall it.
car.index.summary                             = <p>This portlet lets you install or create Geronimo plugins. This can be used to install new features into a Geronimo server at runtime.</p> <h2>Install Geronimo Plugins</h2> <p>Choose a remote repository to inspect for available Geronimo plugins.  The repository must have a <tt>geronimo-plugins.xml</tt> file in the root directory listing the available plugins in the repository.</p> <p>You can also download running configurations from another Geronimo server  just as if you're browsing and installing third-party plugins.  If you want to point to a remote Geronimo server,  enter a URL such as <tt>http://geronimo-server:8080/console-standard/maven-repo/</tt>  and the enter the administrator username and password in the optional authentication fields.</p>
car.index.updateRepositoryList                = Update Repository List
car.list.noPlugins                            = No plugins are listed at this repository.
car.list.pluginRepo                           = Plugins listed at 
car.pluginParams.JVMVersionsExp               = An optional list of JVM version prefixes supported by this plugin.  If no values are listed, the plugin can be installed in Geronimo running in any version of the JVM.  Otherwise, list one acceptable JVM version perfix per line, like "1.4.2&nbsp;\r\n&nbsp;1.5&nbsp;\r\n&nbsp;..." (ideally, of course, this means you've actually tested the plugin with Geronimo on each JVM version listed here).
car.pluginParams.authorExp                    = The author of the plug, which may be a person, company, open source project, etc.
car.pluginParams.categoryExp                  = The category this plugin falls into.  Plugins in the same category will be listed together. If this plugin is intended to be listed on geronimoplugins.com then you should use one of the category names there if any of them fit.  Otherwise, you can select this freely, or according to the categories acceptable to the repository where you plan to post this.
car.pluginParams.dependenciesExp              = A list of JARs or other module IDs that this plugin depends on.  These will be downloaded automatically when this plugin is installed.  Normally you shouldn't change this list.  However, you can move entries from the dependency list to the <b>prerequisite</b> list if the user must install the dependency manually before installing the plugin  (e.g. for a database pool where a plugin wouldn't know what server to connect to).<br /><br />  Each entry in this list should use the Unique ID format like is used for this plugin above. You may remove the version number if you'd like to work with any version of the dependency, though that may be risky. Each value should be on a separate line.
car.pluginParams.descriptionExp               = A description of this plugin.  You should use plain text only, with blank lines to separate paragraphs.
car.pluginParams.downloadRepositoriesExp      = A list of repositories to check for any dependencies that need to be downloaded. This should be a list of one URL per line, with values such as <tt>http://geronimoplugins.com/repository/</tt> and <tt>http://www.ibiblio.org/maven2/</tt>. Note that the repository this plugin is deployed to should typically be the first one listed.
car.pluginParams.geronimoVersionsExp          = An optional list of Geronimo versions supported by this plugin.  If no values are listed, the plugin can be installed in any version of Geronimo. Otherwise, list one acceptable Geronimo version per line, like "1.1&nbsp;\r\n&nbsp;1.1.1&nbsp;\r\n&nbsp;1.1.2&nbsp;\r\n&nbsp;..." (ideally, of course, this means you've actually tested the plugin with each Geronimo version listed here).
car.pluginParams.humanReadableName            = Human Readable Name
car.pluginParams.humanReadableNameExp         = A human-readable name that will be displayed for this plugin.
car.pluginParams.licenseExp                   = The name of the license that this plugin is covered by.  Ideally, it would be prefixed by the class of license, like "BSD -- (name)" or "GPL -- (name)".
car.pluginParams.obsoletesExp                 = A list of module IDs that this plugin replaces.  Those plugins or modules will be removed when this one is installed. That may include previous versions of this plugin if you want installing it to "upgrade" rather than just offering an additional alternative.  This should be a list with one module ID per line.
car.pluginParams.openSourceExp                = Check this box if the license is an OSI-approved open source license (see <a href="http://www.opensource.org/licenses/index.php">http://www.opensource.org/licenses/index.php</a>).
car.pluginParams.pluginURLExp                 = A URL to get more information about the plugin (e.g. the plugin home page).
car.pluginParams.prereqDescriptionExp         = A longer description of what the user needs to do to comply with this prerequisite (for example, instructions to set up a database pool listing the supported database products and telling the user where to find a script to initialize the database).  This should be plain text with empty lines to separate paragraphs.
car.pluginParams.prerequisiteIDExp            = The module ID of a prerequisite for this plugin.  This is a module that must be present in the server before the plugin can be installed.  It may be something like a specific web container for a web application (<tt>geronimo/jetty/*/car</tt>) or something like a database pool or security realm that the user must install  because the plugin author can't create a value that will be valid in the destination server.  You may want to leave out as many segments of the module ID as possible in order to accomodate more users (e.g. <tt>*/mypool/*/*</tt> rather than <tt>myapp/mypool/1.2/car</tt>).
car.pluginParams.prerequisiteTypeExp          = A brief description of the type of prerequisite this is (for the benefit of the user).  Examples could include <tt>Database Pool</tt> or <tt>Web Container</tt>.
car.pluginParams.title                        = <b>Export Plugin</b> -- Configure Plugin Data
car.pluginParams.uniqueIDExp                  = The globally unique ID for this plugin.  This is determined from the installation in the server you're exporting.  This defines the version number for the plugin, so make sure it's correct.
car.results.filesProcessed                    = Files Processed
car.results.title                             = The plugin {0} has been installed.
car.viewForDownload.author                    = Author
car.viewForDownload.dependencies              = Dependencies
car.viewForDownload.description               = Description
car.viewForDownload.geronimoVersions          = Geronimo-Versions
car.viewForDownload.group                     = Group
car.viewForDownload.installable               = Installable
car.viewForDownload.jvmVersions               = JVM Versions
car.viewForDownload.license                   = License
car.viewForDownload.moduleId                  = Module ID
car.viewForDownload.obsoletes                 = Obsoletes
car.viewForDownload.prerequisites             = Prerequisites
car.viewForDownload.website                   = Web Site

configmanager.common.archive                     = Archive
configmanager.common.plan                        = Plan
configmanager.common.startAppAfterInstall        = Start app after install
configmanager.deploy.migratedPlan                = Migrated plan
configmanager.deploy.migratedPlanSummary         = The deployment plan you provided appears to be for a previous version of the application server.A migrated version of your plan is provided below for your convenience.  Not all deployment plans can be fully migrated so some manual editing may be required before the migrated plan can be deployed.
configmanager.deploy.originalPlan                = Original plan
configmanager.deploy.redeployApplication         = Redeploy application
configmanager.deploy.saveLocally                 = Save this plan locally
configmanager.deploy.showMigratedPlan            = Show Migrated plan
configmanager.deploy.showOriginalPlan            = Show original plan
configmanager.deployHelp.archiveExp              = Browse to select the war file in the Archive box.
configmanager.deployHelp.installApplication      = Install the application in the Geronimo server.
configmanager.deployHelp.planExp                 = If the deployment plan is separate from the war file, then browse to select it.
configmanager.deployHelp.startAppAfterInstallExp = Check this to automatically start the application when it is installed. Otherwise, the user can start the application by clicking on the associated &quot;Start&quot; toggle in the&quot;Installed Applications&quot; window. By default this checkbox is checked and newly installed applications will automatically be started.
configmanager.deployHelp.title                   = This portlet allows the user to deploy new applications on Geronimo. Web applications require deployment plans, which are either packaged with the war file or kept in a separate file which is typically called geronimo-web.xml.
configmanager.help.stopStart                     = Stop/Start
configmanager.help.stopStartExp                  = The stop/start toggle can be clicked to stop or start an application. If the toggle says &quot;Stop&quot; the application is running so clicking on the Stop toggle will stop the application and vice versa.
configmanager.help.title                         = This page lists the applications that have been installed in the server and whether they are running or stopped. There are four columns; two provide information and the other two allow user action. The first column indicates the state of the application, either &quot;stopped&quot; or &quot;running.&quot; The fourth column shows the configID of the application. The two remaining columns are:
configmanager.help.uninstallExp                  = The uninstall link will undeploy/remove the application from Geronimo.
configmanager.normal.childComponents             = Child Components
configmanager.normal.componentName               = Component Name
configmanager.normal.parentComponents            = Parent Components

consolebase.common.JVMVersions     = JVM Versions
consolebase.common.actions         = Actions
consolebase.common.alias           = Alias
consolebase.common.cancel          = Cancel
consolebase.common.commands        = Commands
consolebase.common.confirmPassword = Confirm Password
consolebase.common.date            = Date
consolebase.common.delete          = Delete
consolebase.common.department      = Department
consolebase.common.deployedAs      = Deployed As
consolebase.common.description     = Description
consolebase.common.done            = Done
consolebase.common.edit            = Edit
consolebase.common.email           = Email
consolebase.common.enable          = enable
consolebase.common.familyName      = Family Name
consolebase.common.file            = File
consolebase.common.filterCriteria  = Filter Criteria
consolebase.common.finish          = Finish
consolebase.common.givenName       = Given Name
consolebase.common.group           = Group
consolebase.common.groupName       = Group Name
consolebase.common.install         = Install
consolebase.common.monitor         = Monitor
consolebase.common.name            = Name
consolebase.common.next            = Next
consolebase.common.password        = Password
consolebase.common.refresh         = Refresh
consolebase.common.reset           = Resets
consolebase.common.restart         = Restart
consolebase.common.return          = Return
consolebase.common.save            = Save
consolebase.common.size            = Size
consolebase.common.start           = Start
consolebase.common.stop            = Stop
consolebase.common.state           = State
consolebase.common.type            = Type
consolebase.common.uninstall       = Uninstall
consolebase.common.update          = Update
consolebase.common.usage           = usage
consolebase.common.user            = User
consolebase.common.userID          = UserID
consolebase.common.userName        = Username
consolebase.common.users           = Users
consolebase.common.version         = Version

infomanager.javaSysHelp.body                   = This page displays the values of the system properties available to the server process.
infomanager.svrInfoHelp.body                   = This page provides information about the uptime of the server and the resources being used by the JVM.
infomanager.svrInfoNormal.architecture         = Architecture
infomanager.svrInfoNormal.availableProcessors  = Available Processors
infomanager.svrInfoNormal.startTime            = Start Time
infomanager.svrInfoNormal.version              = Version
infomanager.svrInfoNormal.cookiesMustBenabled  = Error: Cookies must be enabled
infomanager.svrInfoNormal.currentMemoryUsed    = Current Memory Used
infomanager.svrInfoNormal.java                 = Java
infomanager.svrInfoNormal.javaVendor           = Vendor
infomanager.svrInfoNormal.javaVersion          = Java Version
infomanager.svrInfoNormal.jvm                  = JVM
infomanager.svrInfoNormal.locale               = Locale
infomanager.svrInfoNormal.mostMemoryUsed       = Most Memory Used
infomanager.svrInfoNormal.node                 = Node
infomanager.svrInfoNormal.notAvailable         = Not Yet Available
infomanager.svrInfoNormal.operatingSystem      = Operating System
infomanager.svrInfoNormal.patchLevel           = Patch Level
infomanager.svrInfoNormal.server               = Server
infomanager.svrInfoNormal.totalMemoryAllocated = Total Memory Allocated
infomanager.svrInfoNormal.upTime               = Up Time
infomanager.svrInfoNormal.vendorInfo           = Vendor Information

keystore.certificateDetails.backToKeystore     = Back to keystore
keystore.certificateDetails.certificateInfo    = Certificate Info
keystore.certificateDetails.criticalExt        = critical ext
keystore.certificateDetails.deleteEntry        = Delete Entry
keystore.certificateDetails.generateCSR        = Generate CSR
keystore.certificateDetails.importCAReply      = Import CA reply
keystore.certificateDetails.nonCriticalExt     = non-critical ext
keystore.certificateDetails.publicKeyAlg       = Public Key Alg
keystore.certificateDetails.reallyDelete       = Are you sure you want to delete {0}?
keystore.certificateDetails.signatureAlg       = Signature Alg
keystore.certificateDetails.validFrom          = Valid From
keystore.certificateDetails.validTo            = Valid To
keystore.changePassword.changePassword         = Change Password
keystore.changePassword.changePwdForKeystore   = Change password for keystore
keystore.changePassword.changePwdForPriKey     = Change password for private key
keystore.changePassword.confirmPassword        = Confirm new password
keystore.changePassword.newPassword            = New password
keystore.changePassword.oldPassword            = Old password
keystore.common.alias                          = Alias
keystore.common.identity                       = Identity
keystore.common.issuer                         = Issuer
keystore.common.keyType                        = Key Type
keystore.common.keystore                       = Keystore
keystore.common.serialNumber                   = Serial Number
keystore.common.subject                        = Subject
keystore.common.trustedCertificate             = Trusted Certificate
keystore.common.unlockPrivateKey               = Unlock Private Key
keystore.common.validity                       = Validity
keystore.common.version                        = Version
keystore.configureKey.algorithm                = Algorithm
keystore.configureKey.aliasForKey              = Alias for new key
keystore.configureKey.certificateIdentity      = Certificate Identity
keystore.configureKey.city_Locality            = City/Locality
keystore.configureKey.company_Org              = Company/Organization
keystore.configureKey.country_Code             = Country Code
keystore.configureKey.division_BusinessUnit    = Division/Business Unit
keystore.configureKey.keySize                  = Key Size
keystore.configureKey.passwordForKey           = Password for new key
keystore.configureKey.reviewKeyData            = Review Key Data
keystore.configureKey.serverHostname           = Server Hostname
keystore.configureKey.state_Province           = State/Province
keystore.configureKey.title                    = On this screen you can configure the settings to generate a new private key. The next screen will let you review this information before generating the private key and accompanying certificate. 
keystore.configureKey.validFor                 = Valid for (# of days)
keystore.confirmCertificate.certificateDetails = Certificate Details
keystore.confirmCertificate.fingerprint        = Fingerprint
keystore.confirmCertificate.importCertificate  = Import Certificate
keystore.confirmCertificate.title              = Please confirm that this is the correct certificate to import:
keystore.confirmKey.generateKey                = Generate Key
keystore.confirmKey.title                      = Please confirm that this is the correct information for the key I'm about to generate:
keystore.createKeystore.createKeystore         = Create Keystore
keystore.createKeystore.keystoreFileName       = Keystore file name
keystore.createKeystore.passwordForKeystore    = Password for new keystore
keystore.generateCSR.PKCS10CertificatioRequest = PKCS10 Certification Request
keystore.importCAReply.PKCS7CertificateReply   = PKCS7 Certificate Reply
keystore.importCAReply.pasteHere               = \ ...paste pkcs7 encoded certificate reply here...
keystore.index.available                       = Available
keystore.index.contents                        = Contents
keystore.index.continueLocking                 = This keystore is currently in use.  Locking it may prevent the server from starting.  Continue?
keystore.index.editable                        = Editable
keystore.index.explanation                     = Keystores start out as locked against editing and also not available for usage by other components in the server.  The <b>Editable</b> flag indicates whether the keystore has been unlocked for editing  (by entering the keystore password), which lasts for the current login session.   The <b>Available</b> flag indicates whether that password has been saved in order to make the keystore available to other components in the server.
keystore.index.keystoreFile                    = Keystore File
keystore.index.keystoreLocked                  = Keystore locked
keystore.index.locked                          = Locked
keystore.index.newKeystore                     = New Keystore
keystore.index.noKeystores                     = There are no keystores defined
keystore.index.title                           = This tool walks you through the process of configuring keystores to use with SSL connectors (for the web container, etc.).
keystore.index.unlocked                        = Unlocked
keystore.unlockKey.title                       = The keystore has been unlocked.  However, a private key within the keystore also needs to be unlocked in order for SSL to work properly.  Please specify the password for the private key within the keystore.
keystore.unlockKey.unlockPrivateKey            = Unlock Private Key
keystore.unlockKeystore.enterKeystorePassword  = Enter keystore password
keystore.uploadCertificate.aliasForCertificate = Alias for certificate
keystore.uploadCertificate.pasteHere           = ...paste trusted certificate text here...
keystore.uploadCertificate.reviewCertificate   = Review Certificate
keystore.uploadCertificate.title               = This screen lets you input a certificate to import into the keystore.  Paste the content of the certificate file in the text area and specify an alias to store it under in the keystore.  The next step will let you review the certificate before committing it to the keystore.
keystore.viewKeystore.addtrustCertificate      = Add Trust Certificate
keystore.viewKeystore.certificateFingerprint   = Certificate Fingerprint
keystore.viewKeystore.changePassword           = Change keystore password
keystore.viewKeystore.createprivateKey         = Create Private Key
keystore.viewKeystore.privateKey               = Private Key
keystore.viewKeystore.returnToKeystoreList     = Return to keystore list
keystore.viewKeystore.title                    = This screen lists the contents of a keystore.

logmanager.common.configFile                      = Config File
logmanager.common.filterCriteria                  = Filter Criteria:
logmanager.common.logLevel                        = Log Level<i>
logmanager.common.refreshPeriod                   = Refresh Period
logmanager.help.configFileExplanation             = Another configuration file can be used by entering a different path and file name in the Config file text box.
logmanager.help.introduction                      = <p>This portlet allows the user to temporarily select a configuration file for logging and/or change the log level and Refresh period. The default &quot;Config file&quot; is a standard log4j file and defines the location where the Geronimo Server will log Geronimo output. The configuration file also defines the log level, the maximum log file size,  and other attributes associated with logging. <br> <br>   Gereonimo Console will display output from the Geronimo log file in the Server Log Viewer portlet in the next window pane.</p>
logmanager.help.logLevelExplanation               = The user may select a level for logging from the drop-down menu.
logmanager.help.refreshPeriodExplanation          = By default Geronimo checks every 60 seconds to see if the configuration file has changed. The user may modify the refresh period.
logmanager.help.resetExplanation                  = Resets the &quot;Config File&quot;, &quot;Refresh Period&quot; and &quot;Log Level&quot; to their settings at the last &quot;Update.&quot; It does not reset to the Geronimo Server defaults.
logmanager.help.updateExplanation                 = Make changes take effect until next server restart.
logmanager.search.containingText                  = Containing text
logmanager.search.fileterLog                      = Filter Log
logmanager.search.go                              = Go 
logmanager.search.level                           = Level
logmanager.search.lines                           = Lines
logmanager.search.maxResults                      = Max Results
logmanager.search.messagesMatched                 = {0} total message(s) in log file. {1} matched your criteria
logmanager.search.noLogs                          = No logs found with the specified criteria.
logmanager.search.numberOfResultsCapped           = number of results capped
logmanager.search.to                              = To
logmanager.search.withExceptions                  = With Exceptions
logmanager.viewhelp.filterResultsExplanationFrag1 = Allows the user to customize the filtering criteria. The user can display any line of the log file starting at the first line of the log file through the end. Note: A browser may limit how many lines can be displayed at once.
logmanager.viewhelp.filterResultsExplanationFrag2 = The user may filter on the log level to display only log lines at that level.
logmanager.viewhelp.filterResultsExplanationFrag3 = The user may also enter a string of text to search for.
logmanager.viewhelp.introduction                  = This portlet displays the Geronimo server log and is helpful for debugging problems with the Geronimo Console and with deployed applications.
logmanager.viewhelp.refreshExplanation            = Resets the filtering criteria to Geronimo Console's defaults and displays the latest 11 lines in the Geronimo log file.

realmwizard._sql.JDBCDriverClassExp              = The fully-qualified JDBC driver class name.  This driver must be located in the JAR specified in the next field.
realmwizard._sql.JDBCPasswordExp                 = The password used to connect to the database
realmwizard._sql.JDBCUrlExp                      = The JDBC URL that specifies the details of the database to connect to.  This has a different form for each JDBC driver.
realmwizard._sql.JDBCUsernameExp                 = The username used to connect to the database
realmwizard._sql.databasePoolExp                 = A database pool that the login module will use to connect to the database.  If this is specified, none of the rest of the settings after this are necessary.
realmwizard._sql.digestAlgorithmExp              = Message Digest algorithm (e.g. MD5, SHA1, etc.) used on the passwords.  Leave this field empty if no digest algorithm is used.
realmwizard._sql.digestEncodingExp               = Encoding to use for digests (e.g. hex, base64).  This is used only if a Message Digest algorithm is specified.If no encoding is specified, hex will be used.
realmwizard._sql.driverJARExp                    = The JAR holding the selected JDBC driver.  Should be installed under GERONIMO/repository/ to appear in this list.
realmwizard._sql.eitherPoolOrJDBC                = A SQL security realm must either have a database pool or JDBC connectivity settings to  connect to the database.  Please select EITHER the database pool, OR the rest of the JDBC settings.
realmwizard._sql.groupSelectSQLExp               = A SQL statement to load group information for a user.  It should return 2 columns, the first holding a username and the second holding a group name.  The statement may use the PreparedStatement syntax of ? for a parameter,  in which case the username will be set for every parameter.  A typical setting would be  <tt>SELECT username, group_name FROM user_groups WHERE username=?</tt> or  for a more normalized schema,   <tt>SELECT u.username, g.name FROM app_users u, groups g, user_groups ug WHERE ug.user_id=users.id AND ug.group_id=g.id AND u.username=?</tt>
realmwizard._sql.selectDatabasePool              = A SQL security realm must either have a database pool or JDBC connectivity settings to  connect to the database.  Please select EITHER the database pool, OR the rest of the JDBC settings.
realmwizard._sql.userSelectSQLExp                = A SQL statement to load user/password information.  It should return 2 columns, the first holding a username and the second holding a password.   The statement may use the PreparedStatement syntax of ? for a parameter,   in which case the username will be set for every parameter.    A typical setting would be <tt>SELECT username, password FROM app_users WHERE username=?</tt> 
realmwizard.advanced.AuditEnabledExp             = If enabled, every login attempt will be recorded to the specified file.  The path should be relative to the Geronimo home directory (a typical value would be <tt>var/log/login-attempts.log</tt>).
realmwizard.advanced.credentialName              = Credential Name
realmwizard.advanced.credentialNameExp           = If enabled, the realm will store each username and password in a private credential in the Subject under a specified credential name.
realmwizard.advanced.failuresWithin              = failures within
realmwizard.advanced.failuresWithinSeconds       = seconds
realmwizard.advanced.keepAccountLockedFor        = and keep the account locked for
realmwizard.advanced.keepAccountLockedForSeconds = seconds
realmwizard.advanced.lockUserAfter               = Lock a user after
realmwizard.advanced.lockoutEnabledExp           = If enabled, a certain number of failed logins in a particular time frame will cause a user's account to be locked for a certain period of time.  This is a defense against brute force account cracking attacks.
realmwizard.advanced.namedCredential             = Named Credential
realmwizard.advanced.storePasswordEnabledExp     = If enabled, the realm will store each user's password in a private credential in the Subject. This will allow access to the password later after the login process has completed.  This is not normally required.
realmwizard.advanced.title                       = <b>Create Security Realm</b> -- Step 3: Advanced Configuration
realmwizard.common.JDBCDriverClass               = JDBC Driver Class
realmwizard.common.JDBCPassword                  = JDBC Password
realmwizard.common.JDBCUrl                       = JDBC URL
realmwizard.common.JDBCUsername                  = JDBC Username
realmwizard.common.addSecurityRealm              = Add new security realm
realmwizard.common.addToEAR                      = Add to EAR
realmwizard.common.configurationOptions          = Configuration Options
realmwizard.common.controlFlag                   = Control Flag
realmwizard.common.databasePool                  = Database Pool
realmwizard.common.deploy                        = Deploy
realmwizard.common.deployCommand                 = Deploy Command
realmwizard.common.deployRealm                   = Deploy Realm
realmwizard.common.deploymentPlan                = Deployment Plan
realmwizard.common.digestAlgorithm               = Digest Algorithm
realmwizard.common.digestEncoding                = Digest Encoding
realmwizard.common.driverJAR                     = Driver JAR
realmwizard.common.editRealm                     = Edit Realm
realmwizard.common.editSettings                  = Edit Settings
realmwizard.common.enableAuditing                = Enable Auditing
realmwizard.common.enableLockout                 = Enable Lockout
realmwizard.common.groupSelectSQL                = Group SELECT SQL
realmwizard.common.logFile                       = Log File
realmwizard.common.loginDomainName               = Login Domain Name
realmwizard.common.loginModule                   = Login Module
realmwizard.common.loginModuleClass              = Login Module Class
realmwizard.common.nameOfSecurityRealm           = Name of Security Realm
realmwizard.common.principals                    = Principals
realmwizard.common.realmName                     = Realm Name
realmwizard.common.realmType                     = Realm Type
realmwizard.common.serverSide                    = Server-Side
realmwizard.common.serverWide                    = Server-wide
realmwizard.common.showPlan                      = Show Plan
realmwizard.common.skipTestAndDeploy             = Skip Test and Deploy
realmwizard.common.skipTestAndShowPlan           = Skip Test and Show Plan
realmwizard.common.storePassword                 = Store Password
realmwizard.common.supportAdvancedMapping        = Support Advanced Mapping
realmwizard.common.testAgain                     = Test Again
realmwizard.common.testLogin                     = Test a Login
realmwizard.common.userSelectSQL                 = User SELECT SQL
realmwizard.configure.title                      = <b>Create Security Realm</b> -- Step 2: Configure Login Module
realmwizard.edit.configurationOptionsExp         = Any configuration options necessary for the login module, in the standard Java properties format (one per line, <tt>name=value</tt>)
realmwizard.edit.controlFlagExp                  = The control flag for the login module, which controls what happens to the overall login processing if this login module succeeds or fails.  For more information see 
realmwizard.edit.ifLeaveBlank                    = If you don't need to use as many login modules as there are entries below,just leave the extra ones blank.
realmwizard.edit.loginDomainExp                  = The login domain for this login module, which must be unique among all modules in the security realm. This can be used to distinguish principals from two otherwise identical login modules (for example, from two LDAP login modules pointing to two different LDAP servers)
realmwizard.edit.loginModuleClassExp             = The fully-qualified class name for the login module.
realmwizard.edit.loginModuleJAR                  = Login Module JAR
realmwizard.edit.loginModuleJARExp               = The jar containing Login Module and Principal classes.
realmwizard.edit.realmNameExp                    = A name that is different than the name for any other security realms in the server (no spaces in the name please). Other components will use this name to refer to the security realm.
realmwizard.edit.serverSideExp                   = Server-side login modules are executed within the application server (this is normally correct).  Client-side login modules are executed in the client's environment, for example, in order to use single sign-on features of the client OS.
realmwizard.edit.summary                         = <p>This page edits a new or existing security realm.</p><p>A security realm may have one or more login modules.  Many simple realms have only one login module.  Additional login modules may be used to access more underlying security information stores, or to add functionality such as auditing to a realm without affecting the authentication process for the realm.</p>
realmwizard.edit.supportAdvancedMappingExp       = Normally Geronimo can't distinguish between two different principals that have the same name and same principal class but were produced by two different login modules.  If this option is enabled, Geronimo will "wrap" principals to track which login module and realm each principal came from. This lets you use the "realm-principal" and "login-domain-principal" elements in your security mapping in Geronimo deployment plans.
realmwizard.list.noSecurityRealms                = There are no security realms defined
realmwizard.list.seeExamples                     = For each realm listed, you can click the <b>usage</b> link to see examples of how to use the realm from your application.\r\n
realmwizard.list.title                           = This page lists all the available security realms.  Server-wide security realms can be edited, while security realms deployed as part of a single application cannot (change the deployment plan in the application instead).
realmwizard.selectType.nameOfSecurityRealmExp    = A name that is different than the name for any other security realms in the server (no spaces in the name please). Other components will use this name to refer to the security realm.
realmwizard.selectType.realmTypeExp              = The type of login module used as the master for this security realm. Select "Other" for manual configuration options including custom login modules and realms that use multiple login modules to populate user principals.
realmwizard.selectType.title                     = <b>Create Security Realm</b> -- Step 1: Select Name and Type
realmwizard.showPlan.addToEARExp                 = Instead of deploying as a top-level security realm, you can deploy this realm as part of an EAR. To add a security realm to an EAR using this plan, create a <tt>META-INF/geronimo-application.xml</tt> file in your EAR that has the <tt>dependency</tt> elements (if any) and  <tt>gbean</tt> elements from the plan above.  It should look something like this:
realmwizard.showPlan.deployCommandExp            = To deploy a security realm from the command line using this plan, copy and paste it to a file (say, <tt>security-realm.xml</tt>) and save it.  Then run a command like:
realmwizard.showPlan.title                       = <b>Create Security Realm</b> -- Show Deployment Plan
realmwizard.testLogin.passwordExp                = The password to use to log in to the realm.
realmwizard.testLogin.summary                    = From here you can enter a username and password for the main login module in the realm, and see if the login is successful and which Principals are generated for the user. This is menat to be an indication of whether the settings for the main login module are correct.  It does not invoke advanced features such as auditing or lockout.
realmwizard.testLogin.title                      = <b>Create Security Realm</b> -- Step 4: Test Login
realmwizard.testLogin.usernameExp                = The username to use to log in to the realm.
realmwizard.testResults.testResults              = Test Results
realmwizard.testResults.title                    = <b>Create Security Realm</b> -- Step 5: Login Results
realmwizard.usage.applicationCode                = Application Code
realmwizard.usage.applicationCodeExp             = <p>No special application code is required to work with security roles.</p><p>If an application calls <tt>HttpServletRequest.getUserPrincipal()</tt>, Geronimo will return a principal where the principal class implements <tt>GeronimoCallerPrincipal</tt> -- normally a username (since <tt>GeronimoUserPrincipal</tt> implements <tt>GeronimoCallerPrincipal</tt>).  If you're using a custom login module and getting the wrong results for <tt>getUserPrincipal</tt>, try making your user principal class implement <tt>GeronimoCallerPrincipal</tt>.</p> <p>If an application calls <tt>HttpServletRequest.isUserInRole(role)</tt>, Geronimo will return true or false depending on whether any of the principals assigned to that user by the realm's login modules were listed in the role mapping above.</p>
realmwizard.usage.geronimoWebXmlLater            = <p>This example indicated that {0} will be used to handle all logins to the web application.  Then it maps the <tt>admin</tt> role to a combination of one user (<tt>root</tt>) and one group (<tt>administrators</tt>), using a combination of the principal classes and principal names.  (Note that if {0} uses a custom login module, the principal classes may be different, but the ones listed above are used for users and groups by all the standard Geronimo login modules.)</p> <p>It's also possible to configure separate login modules to use separate login domain names,  and then use the login domain names in the role mapping (so a user "root" from login domain "Foo" is different from a user "root" from login domain "Bar"), but this is only important if you have multiple login modules assigning principals to the users.</p> <p> Finally, if the <tt>security</tt> section is declared in an EAR <tt>application.xml</tt> deployment descriptor, there's no need to repeat it in any of the modules inside the EAR -- they'll all share the same role mapping information.</p>
realmwizard.usage.geronimoWebXmlPreface          = <p>To configure the security realm and the members of each role, the web application needs to have a <tt>geronimo-web.xml</tt> deployment plan. That may be packaged in the WAR in the <tt>WEB-INF</tt> directory, or it may be provided separately on the command line to the deploy tool.</p> <p>The <tt>geronimo-web.xml</tt> plan should have a <tt>security-realm-name</tt> element indicating which realm will be used to authenticate logins to the web application. It also needs to have a <tt>security</tt> element listing the users or groups who should be members of each <tt>security-role</tt> listed in <tt>web.xml</tt>.</p>
realmwizard.usage.title                          = This page talks about how to use the security realm {0} from a J2EE application. The example here is a web application, but other application modules would work similarly.
realmwizard.usage.webXmlShouldHave               = <p>The <tt>web.xml</tt> should have</p><ul>  <li>One or more <tt>security-constraint</tt> blocks designating the protected pages or URLs</li>  <li>A <tt>login-config</tt> section configuring the login style for the application</li>  <li>One or more <tt>security-role</tt> blocks listing the security roles used by the application</li></ul>

repository.help.addDependencyElement       = To use an artifact in an application, add a dependency element into it's deployment plan. For example, to use Castor XML add the following XML to the plan:
repository.help.browseExplanation          = Browse to select the artifact to be added.
repository.help.installExplanation         = Click on this button to install the artifact.
repository.help.title                      = This page displays the artifacts installed in the server's repository. The layout of the repository is the same as that used by Apache Maven making it possible to easily copy files over. The Geronimo Console provides a method for adding artifacts:
repository.normal.addArchiveToRepository   = Add Archive to Repository
repository.normal.artifact                 = Artifact
repository.normal.currentRepositoryEntries = Current Repository Entries
repository.normal.title                    = Add Archive to Repository
repository.normal.toViewUsage              = Click on an entry to view usage.
repository.usage.content                   = To use <b>${0}</b> in an application or a module, add a dependency element under dependencies in environment element in it's deployment plan as shown below:
repository.usage.title                     = Usage for {0}

securityrealmmanager.common.groupNameExp                   = The name of the group.
securityrealmmanager.derby.groups.addmaximized.addGroup    = ADD GROUP
securityrealmmanager.derby.groups.addmaximized.noUsers     = No available users.
securityrealmmanager.derby.groups.addmaximized.updateGroup = UPDATE GROUP
securityrealmmanager.derby.groups.help.addNewGroupBtnExp   = Clicking this button will create the new group. If users had been put in the new group, clicking &quot;Add&quot; will create the new group with the selected users in it.
securityrealmmanager.derby.groups.help.cancelUserBtnExp    = Will cancel the creation of the new group and return the previous page to the browser.
securityrealmmanager.derby.groups.help.descriptionExp      = The description of the group.
securityrealmmanager.derby.groups.help.title               = This portlet lists all the Application Realm groups and allows the user to add, modify and delete them. To add a new group click on the &quot;Create New Group&quot; link and fill in the fields on that page. To modify an existing group, click on the group link and change the field(s) on the page. To delete a group, click on the &quot;Delete&quot; link to the right of the group to be deleted. <br>  <br>   Clicking on the &quot;Create New Group&quot; link allows creation of a new group by filling in the fields and  clicking on the &quot;Add&quot; button.
securityrealmmanager.derby.groups.help.usersExp            = The box on the left lists all the current user accounts. Selecting a user and then clicking the &quot;Add&gt;&gt;&quot; button will put the user in the group. Selecting a user in the list to the right and clicking on the &quot;&lt;&lt;Remove&quot; button will delete the user from the group.
securityrealmmanager.derby.groups.maximized.createNewGroup = Create New Group
securityrealmmanager.derby.users.addmaximized.addUser      = ADD USER
securityrealmmanager.derby.users.addmaximized.updateUser   = UPDATE USER
securityrealmmanager.derby.users.help.addUserBtnExp        = To add the new user click the &quot;Add&quot; button.
securityrealmmanager.derby.users.help.cancelUserBtnExp     = To cancel an add this button must be clicked before the &quot;Add&quot; button.
securityrealmmanager.derby.users.help.confirmPasswordExp   = Re-enter the new user's password.
securityrealmmanager.derby.users.help.createUserBtnExp     = Click on this button to create the new user and return to the main &quot;Console Realm Users&quot; page. The new user will be listed there.
securityrealmmanager.derby.users.help.departmentExp        = The user's department.
securityrealmmanager.derby.users.help.emailExp             = The user's email address.
securityrealmmanager.derby.users.help.familyNameExp        = The user's last name.
securityrealmmanager.derby.users.help.givenNameExp         = The user's first name.
securityrealmmanager.derby.users.help.passwordExp          = Password for the new user.
securityrealmmanager.derby.users.help.title                = This page lists all the application realm users and allows you to add, modify and delete them. To add a new user click on the &quot;Create New User&quot; link and fill in the fields on that page. To modify a user's account, click on the username link for the user and change the field(s) on the page. To delete a user, click on the &quot;Delete&quot;  link to the right of the user to be deleted. <br>  <br>  Clicking on the &quot;Create New User&quot; link allows adding users by filling in the fields and clicking on the &quot;Add&quot; button. The fields are defined as follows:
securityrealmmanager.derby.users.help.usernameExp          = The username for the user.
securityrealmmanager.derby.users.maximized.createNewUser   = Create New User
securityrealmmanager.se.groups.addmaximized.addGroup       = ADD GROUP
securityrealmmanager.se.groups.help.addNewGroupBtnExp      = Clicking this button will create the new group. If users had been put in the new group, clicking &quot;Add&quot; will create the new group with the selected users in it.
securityrealmmanager.se.groups.help.cancelNewGroupBtnExp   = Cancel the current operation.
securityrealmmanager.se.groups.help.title                  = This portlet lists all the Console Realm groups and allows the user to add, modify and delete them. To add a new group click on the &quot;Create New Group&quot; link and fill in the fields on that page. To modify an existing group, click on the group link and change the field(s) on the page. To delete a group, click on the &quot;Delete&quot; link to the right of the group to be deleted. <br>  <br>Clicking on the &quot;Create New Group&quot; link allows the user to add a new   group. The fields are defined as follows:
securityrealmmanager.se.groups.help.usersExp               = The box on the left lists all the current user accounts. Selecting a user and then clicking the &quot;Add&gt;&gt;&quot; button will put the user in the group. Selecting a user in the list to the right and clicking on the &quot;&lt;&lt;Remove&quot; button will delete the user from the group.
securityrealmmanager.se.groups.maximized.createNewGroup    = Create New Group
securityrealmmanager.se.groups.maximized.createNewUser     = Create New User
securityrealmmanager.se.groups.maximized.noUsers           = No available users.
securityrealmmanager.se.groups.maximized.updateGroup       = UPDATE GROUP
securityrealmmanager.se.users.addmaximized.addGroup        = ADD GROUP
securityrealmmanager.se.users.addmaximized.addUser         = ADD USER
securityrealmmanager.se.users.addmaximized.updateUser      = UPDATE USER
securityrealmmanager.se.users.help.cancelUserBtnExp        = Cancel the current operation.
securityrealmmanager.se.users.help.confirmPasswordExp      = Re-enter the new user's password.
securityrealmmanager.se.users.help.createUserBtnExp        = Click on this button to create the new user and return to the main &quot;Console Realm Users&quot; page. The new user will be listed there.
securityrealmmanager.se.users.help.passwordExp             = Password for the new user.
securityrealmmanager.se.users.help.title                   = This portlet lists all the console realm users and allows the user to add, modify and delete them. To add a new user click on the &quot;Create New User&quot; link and fill in the fields on that page. To modify a user's account, click on the username link for the user and change the field(s) on the page. To delete a user, click on the &quot;Delete&quot; link to the right of the user to be deleted.<br> <br> Clicking on the Create New User link brings up a page that allows adding users by filling in the fields  and clicking on the&quot;Add&quot; button. The fields are defined as follows:
securityrealmmanager.se.users.help.usernameExp             = The username for the user.
securityrealmmanager.se.users.maximized.createNewUser      = Create New User

servermanager.help.shutdownHelpBody   = <p>This portlet give the admin the ability to remotely shutdown the Geronimo server.</p><p>A shutdown will shutdown the server and cause the JVM to exit.To continue using the Geronimo Console after a shutdown, Geronimo must be restarted.</p>
servermanager.normal.areYouSure       = Are you sure you want to shutdown the server (last chance)?
servermanager.normal.proceedOnlyIf    = Proceed only if you are certain you want to terminate the server.
servermanager.normal.shutdown         = Shutdown
servermanager.normal.warning          = WARNING: A shutdown of the server will disable this Web Console!
servermanager.shutdown.shutdownIssued = Server shutdown has been issued.

threads.list.title                        = This page lists the thread pools defined in the Geronimo server.  <i>Note: Currently not all threads used by Geronimo come from one of these thread pools.  We're working on migrating the different components of Geronimo toward these thread pools.</i>
threads.monitor.currentConsumersOfThreads = Current consumers of threads in this pool
threads.monitor.description               = Description
threads.monitor.highestRecorded           = Highest Recorded
threads.monitor.lowestRecorded            = Lowest Recorded
threads.monitor.ofThreads                 = # of Threads
threads.monitor.poolMax                   = Pool Max
threads.monitor.threadsInUse              = Threads in Use
threads.monitor.title                     = Thread pools statistics for {0}:

webaccesslogmanager.common.authenticatedUser  = Authenticated User
webaccesslogmanager.common.from               = From (MM/DD/YYYY)
webaccesslogmanager.common.ignoreDates        = Ignore Dates
webaccesslogmanager.common.remoteAddress      = Remote Address
webaccesslogmanager.common.request            = Request
webaccesslogmanager.common.requestMethod      = Request Method
webaccesslogmanager.common.requestedURI       = Requested URI
webaccesslogmanager.common.to                 = To (MM/DD/YYYY)
webaccesslogmanager.help.authenticatedUserExp = A username, such as &quot;system.&quot;
webaccesslogmanager.help.fromTo               = From/To
webaccesslogmanager.help.fromToExp            = Display log output from the dates specified.\r\n
webaccesslogmanager.help.ignoreDatesExp       = If this checkbox is checked, filtering will not be done using the date. All log lines that match the other filtering criteria will be displayed regardless of the date.\r\n
webaccesslogmanager.help.refreshExp           = Retrieves the latest lines from the log file while retaining the user's filtering criteria.\r\n
webaccesslogmanager.help.remoteAddressExp     = A specific remote host can be entered in this field using it's IP address, e.g., 192.168.1.1.\r\n
webaccesslogmanager.help.requestMethodExp     = This drop-down box allows the user to filter on &quot;ANY&quot;, &quot;POST&quot; and &quot;GET&quot; methods.\r\n
webaccesslogmanager.help.requestedURIExp      = Filtering can be done on the Requested URI field by entering a URI, such as, http://localhost:8080/cviewer/jsp/viewclass.jsp\r\n
webaccesslogmanager.help.title                = This portlet displays and filters the Jetty log file. The Jetty log file contains HTTP accesses and messages from JSP and servlet applications that are running on Geronimo. By default this portlet displays the contents of the log file for the current date. The user can apply filtering criteria to view only data of interest.The user may enter information into any/all/none of the fields, which are defined next.
webaccesslogmanager.view.container            = Container
webaccesslogmanager.view.filterResults        = Filter results
webaccesslogmanager.view.foundMatches         = Found {0} matches in logfile ({1} lines searched).
webaccesslogmanager.view.go                   = Go
webaccesslogmanager.view.identity             = Identity
webaccesslogmanager.view.ignoreDates          = Ignore Dates
webaccesslogmanager.view.maxResults           = Max Results
webaccesslogmanager.view.noLogEntries         = No log entries found.
webaccesslogmanager.view.request              = Request
webaccesslogmanager.view.resultSize           = Result Size
webaccesslogmanager.view.searchResult         = Found {0} matches in logfile ({1} lines searched).
webaccesslogmanager.view.searchWebContainer   = Search Web Container
webaccesslogmanager.view.searchWebLog         = Search Web Log
webaccesslogmanager.view.startResult          = Start Result

webmanager.common.HTTPSAlgorithm                     = HTTPS Algorithm
webmanager.common.HTTPSProtocol                      = HTTPS Protocol
webmanager.common.SSLSettings                        = SSL Settings
webmanager.common.acceptCount                        = AcceptCount
webmanager.common.acceptCountExp                     = The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 10.
webmanager.common.all                                = all
webmanager.common.allowTrace                         = AllowTrace
webmanager.common.bufferSize                         = BufferSize
webmanager.common.bufferSizeExp                      = The size (in bytes) of the buffer to be provided for input streams created by this connector. By default, buffers of 2048 bytes will be provided.
webmanager.common.ciphers                            = Ciphers
webmanager.common.ciphersExp                         = A comma seperated list of the encryption ciphers that may be used.If not specified, then any available cipher may be used.
webmanager.common.clientAuthRequired                 = Client Auth Required
webmanager.common.compressableMimeType               = CompressableMimeType
webmanager.common.compressableMimeTypeExp            = The value is a comma separated list of MIME types for which HTTP compression may be used. The default value is text/html,text/xml,text/plain.
webmanager.common.compression                        = Compression
webmanager.common.compressionExp                     = The Connector may use HTTP/1.1 GZIP compression in an attempt to save server bandwidth. The acceptable values for the parameter is "off" (disable compression), "on" (allow compression, which causes text data to be compressed), "force" (forces compression in all cases), or a numerical integer value (which is equivalent to "on", but specifies the minimum amount of data before the output is compressed). If the content-length is not known and compression is set to "on" or more aggressive, the output will also be compressed. If not specified, this attribute is set to "off".
webmanager.common.confirmPassword                    = Confirm Password
webmanager.common.connectionLinger                   = ConnectionLinger
webmanager.common.connectionLingerExp                = The number of milliseconds during which the sockets used by this Connector will linger when they are closed. The default value is -1 (socket linger is disabled).
webmanager.common.connectionTimeout                  = ConnectionTimeout
webmanager.common.connectionTimeoutExp               = The number of milliseconds this Connector will wait, after accepting a connection, for the request URI line to be presented. The default value is 60000 (i.e. 60 seconds).
webmanager.common.disableUploadTimeout               = DisableUploadTimeout
webmanager.common.disableUploadTimeoutExp            = This flag allows the servlet container to use a different, longer connection timeout while a servlet is being executed, which in the end allows either the servlet a longer amount of time to complete its execution, or a longer timeout during data upload. If not specified, this attribute is set to "true".
webmanager.common.emptySessionPath                   = EmptySessionPath
webmanager.common.emptySessionPathExp                = If checked, all paths for session cookies will be set to /.\r\n
webmanager.common.enableLookups                      = EnableLookups
webmanager.common.enableLookupsExp                   = Check if you want calls to request.getRemoteHost() to perform DNS lookups in order to return the actual host name of the remote client.  By default, DNS lookups are enabled.\r\n
webmanager.common.fields                             = fields
webmanager.common.host                               = Host
webmanager.common.hostExp                            = The host name or IP to bind to. The normal values are <tt>0.0.0.0</tt> (all interfaces) or <tt>localhost</tt> (local connections only)\r\n
webmanager.common.keepAliveTimeout                   = KeepAliveTimeout
webmanager.common.keepAliveTimeoutExp                = The number of milliseconds this Connector will wait, subsequent request before closing the connection. The default value is to use the value that has been set for the connectionTimeout.
webmanager.common.keyStore                           = Key Store
webmanager.common.keystoreFile                       = Keystore File
webmanager.common.keystorePassword                   = Keystore Password\r\n
webmanager.common.keystoreType                       = Keystore Type
webmanager.common.list                               = list
webmanager.common.listConnectors                     = List connectors
webmanager.common.maxHttpHeaderSize                  = MaxHttpHeaderSize
webmanager.common.maxHttpHeaderSizeExp               = The maximum size of the request and response HTTP header, specified in bytes. If not specified, this attribute is set to 4096 (4 KB).
webmanager.common.maxKeepAliveRequests               = MaxKeepAliveRequests
webmanager.common.maxKeepAliveRequestsExp            = The maximum number of HTTP requests which can be pipelined until the connection is closed by the server. Setting this attribute to 1 will disable HTTP/1.0 keep-alive, as well as HTTP/1.1 keep-alive and pipelining. Setting this to -1 will allow an unlimited amount of pipelined or keep-alive HTTP requests. If not specified, this attribute is set to 100.
webmanager.common.maxPostSize                        = MaxPostSize
webmanager.common.maxPostSizeExp                     = The maximum size in bytes of the POST which will be handled by the container FORM URL parameter parsing. The limit can be disabled by setting this attribute to a value less than or equal to 0. Default value is 2097152 (2 megabytes)
webmanager.common.maxSavePostSize                    = MaxSavePostSize
webmanager.common.maxSavePostSizeExp                 = The maximum size in bytes of the POST which will be saved/buffered by the container during FORM or CLIENT-CERT authentication. The limit can be disabled by setting this attribute to -1. Setting the attribute to zero will disable the saving of POST data during authentication . Default value is 4096 (4 kilobytes).
webmanager.common.maxSpareThreads                    = MaxSpareThreads
webmanager.common.maxSpareThreadsExp                 = The maximum number of unused request processing threads that will be allowed to exist until the thread pool starts stopping the unnecessary threads. The default value is 50.
webmanager.common.maxThreads                         = Max Threads
webmanager.common.maxThreadsExp                      = The maximum number of threads this connector should use to handle incoming requests\r\n
webmanager.common.minSpareThreads                    = MinSpareThreads
webmanager.common.minSpareThreadsExp                 = The number of request processing threads that will be created when this Connector is first started. The connector will also make sure it has the specified number of idle processing threads available. This attribute should be set to a value smaller than that set for maxThreads. The default value is 4.
webmanager.common.minThreads                         = Min Threads
webmanager.common.minThreadsExp                      = The minimum number of threads this connector should use to handle incoming requests
webmanager.common.noCompressionUserAgents            = NoCompressionUserAgents
webmanager.common.noCompressionUserAgentsExp         = The value is a comma separated list of regular expressions matching user-agents of HTTP clients for which compression should not be used, because these clients, although they do advertise support for the feature, have a broken implementation. The default value is an empty String (regexp matching disabled).
webmanager.common.portExp                            = The network port to bind to.
webmanager.common.proxyName                          = ProxyName
webmanager.common.proxyNameExp                       = If this Connector is being used in a proxy configuration, configure this attribute to specify the server name to be returned for calls to request.getServerName().
webmanager.common.proxyPort                          = ProxyPort
webmanager.common.proxyPortExp                       = If this Connector is being used in a proxy configuration, configure this attribute to specify the server port to be returned for calls to request.getServerPort().
webmanager.common.redirectPort                       = RedirectPort
webmanager.common.redirectPortExp                    = If this Connector is supporting non-SSL requests, and a request is received for which a matching <security-constraint> requires SSL transport, Catalina will automatically redirect the request to the port number specified here.
webmanager.common.restrictedUserAgents               = RestrictedUserAgents
webmanager.common.restrictedUserAgentsExp            = The value is a comma separated list of regular expressions matching user-agents of HTTP clients for which HTTP/1.1 or HTTP/1.0 keep alive should not be used, even if the clients advertise support for these features. The default value is an empty String (regexp matching disabled).
webmanager.common.server                             = Server
webmanager.common.serverExp                          = The Server header for the http response. Unless your paranoid, you won't need this feature. (No offense.  The description is taken from Tomcat documentation.)
webmanager.common.show                               = Show
webmanager.common.showAllFieldsExp                   = Check this box to view and configure all attributes.  Uncheck to hide. Note: Hiding will not remove the field values.\r\n\r\n
webmanager.common.socketBuffer                       = SocketBuffer
webmanager.common.socketBufferExp                    = The size (in bytes) of the buffer to be provided for socket output buffering. -1 can be specified to disable the use of a buffer. By default, a buffers of 9000 bytes will be used.
webmanager.common.strategy                           = Strategy
webmanager.common.strategyExp                        = The thread pooling strategy which will be used. The default strategy does not use a master thread, but a more conventional strategy using a master listener thread can be used by setting "ms" as this attribute's value. The master strategy will work significantly better using the threadPriority attribute, which will apply only to the thread which listens on the server socket. This is set to lf by default.
webmanager.common.string                             = String
webmanager.common.tcpNoDelay                         = TcpNoDelay
webmanager.common.tcpNoDelayExp                      = If checked, the TCP_NO_DELAY option will be set on the server socket, which improves performance under most circumstances.
webmanager.common.threadPriority                     = ThreadPriority
webmanager.common.threadPriorityExp                  = The priority of the request processing threads within the JVM. The default value is java.lang.Thread#NORM_PRIORITY. See the JavaDoc for the java.lang.Thread class for more details on what this priority means.
webmanager.common.traceExp                           = Check to enable the TRACE HTTP method.\r\n
webmanager.common.trustStore                         = Trust Store
webmanager.common.truststoreFile                     = Truststore File
webmanager.common.truststorePassword                 = Truststore Password
webmanager.common.truststoreType                     = Truststore Type
webmanager.common.uniqueName                         = Unique Name
webmanager.common.uniqueNameExp                      = A name that is different than the name for any other web connectors in the server (no spaces in the name please)
webmanager.common.uriEncoding                        = URIEncoding
webmanager.common.uriEncodingExp                     = This specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. Default is ISO-8859-1.
webmanager.common.useBodyEncodingForURI              = UseBodyEncodingForURI
webmanager.common.useBodyEncodingForURIExp           = Check this if the encoding specified in contentType should be used for URI query parameters, instead of using the URIEncoding.
webmanager.common.useIPVHosts                        = UseIPVHosts
webmanager.common.useIPVHostsExp                     = Check this to cause Tomcat to use the IP address that the request was recieved on to determine the Host to send the request to.
webmanager.common.xPoweredBy                         = XpoweredBy
webmanager.common.xPoweredByExp                      = Check this to cause Tomcat to advertise support for the Servlet specification using the header recommended in the specification.
webmanager.connector.editConnector.addNew            = Add a new {0}
webmanager.connector.editConnector.editConnector     = Edit connector {0}
webmanager.connector.editConnector.requiredAttribute = denotes a required attribute
webmanager.connector.editHTTP.addNewListener         = Add new {0} listener for {1}
webmanager.connector.help.content                    = The Connector Manager displays connections of all types and provide the capability to modify connections for this web server. \r\n
webmanager.connector.normal.addNew                   = Add new
webmanager.connector.normal.addNewListener           = =Add new {0} listener for {1}
webmanager.connector.normal.connectorsFor            = =Connectors for {0}
webmanager.connector.normal.consoleNavailable        = Console application will not be available if {0} is stopped.  Stop {1} ?
webmanager.connector.normal.noConnectorsDefined      = =There are no connectors defined for {0}
webmanager.connector.normal.noWebContainers          = =There are no Web Containers defined
webmanager.connector.normal.reallyDelete             = =Are you sure you want to delete {0} ?
webmanager.help.disable                              = =disable
webmanager.help.disableExplanation                   = =Turn off statistics gathering and return the user to the main page.
webmanager.help.refreshExplanation                   = =Update the display with the latest statistics.
webmanager.help.resetExplanation                     = =Reset all counts, totals, averages, etc., to 0 and start gathering statistics again.
webmanager.help.title                                = =Geronimo Console will collect statistics on the number of requests received by Geronimo Console and on the number of connections made to the Geronimo server. Click on the enable link to monitor the performance of the Geronimo server.
webmanager.normal.activeRequestCount                 = =Active Request Count
webmanager.normal.avgTime                            = Avg Time (ms)
webmanager.normal.connectionDuration                 = =Connection Duration
webmanager.normal.connectionRequestCount             = =Connection Request Count
webmanager.normal.count                              = Count
webmanager.normal.current                            = =Current
webmanager.normal.elapsedTime                        = Elapsed Time Since Collection Started (hh:mm:ss:SSS)
webmanager.normal.high                               = =High
webmanager.normal.low                                = =Low
webmanager.normal.maxTime                            = Max Time (ms)
webmanager.normal.minTime                            = Min Time (ms)
webmanager.normal.requestDuration                    = =Request Duration
webmanager.normal.statistic                          = =Statistic
webmanager.normal.total1xxResp                       = Total 1xx Responses
webmanager.normal.total2xxResp                       = Total 2xx Responses
webmanager.normal.total3xxResp                       = Total 3xx Responses
webmanager.normal.total4xxResp                       = Total 4xx Responses
webmanager.normal.total5xxResp                       = Total 5xx Responses
webmanager.normal.totalConnectionCount               = =Total Connection Count
webmanager.normal.totalErrorCount                    = Total Error Count
webmanager.normal.totalRequestCount                  = Total Request Count
webmanager.normal.totalTime                          = Total Time

welcome.welcomeMaximized.fragment1   = The welcome portlet is the first page that users see when they log in to the Administrative Console. It contains introductory information about the Administrative Console.\r\n\r\n
welcome.welcomeMaximized.fragment2   = To return to the main Welcome panel select the "view" link from the header of this portlet.\r\n\r\n
welcome.welcomeMaximized.title       = Welcome to the Apache Geronimo&#8482;<BR>Administration Console!
welcome.welcomeNormal.about1         = The administration console provides a convenient, user friendly way to administer many aspects of the Geronimo Server.  It is currently a work in progress, and will continue to evolve over time.  The navigation panel on the left-hand side of the screen provides easy access to the individual tasks available in the console.
welcome.welcomeNormal.about2         = This space is the main content area where the real work happens.  Each view contains one or more portlets (self contained view fragments) that typically include a link for help in the header.  Look at the top of this portlet for an example and try it out.
welcome.welcomeNormal.about3         = The references on the right are provided so that you can learn more about Apache Geronimo, its capabilities, and what might be coming in future releases.
welcome.welcomeNormal.about4         = Mailing lists are available to get involved in the development of Apache Geronimo or to ask questions of the community:
welcome.welcomeNormal.about5         = So share your experiences with us and let us know how we can make Geronimo even better.
welcome.welcomeNormal.addiDoc        = Additional Documentation
welcome.welcomeNormal.commonActions  = Common Console Actions
welcome.welcomeNormal.deployNew      = Deploy New Applications
welcome.welcomeNormal.devMaillist    = Developers Mailing List Archive
welcome.welcomeNormal.doc            = Geronimo Documentation
welcome.welcomeNormal.faq            = FAQ
welcome.welcomeNormal.forDevelopers  = for developers working on Geronimo
welcome.welcomeNormal.forUsers       = for general questions related to configuring and using Geronimo
welcome.welcomeNormal.homePage       = The Geronimo Home Page
welcome.welcomeNormal.irc            = Geronimo IRC chat
welcome.welcomeNormal.online         = Geronimo Online
welcome.welcomeNormal.problemTracker = Problem Tracking Database
welcome.welcomeNormal.serverInfo     = Server Information
welcome.welcomeNormal.thanks         = Thanks for using Geronimo!
welcome.welcomeNormal.userMaillist   = Users Mailing List Archive
welcome.welcomeNormal.webServerPorts = Web Server Ports
welcome.welcomeNormal.wiki           = Wiki
