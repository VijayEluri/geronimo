#=====================================================================
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#=====================================================================

dbwizard.basicParams.driverConnectionProperties  = Driver Connection Properties
dbwizard.basicParams.propertyExp                 = A property used to connect to {0}.  May be optional (see JDBC driver documentation).
dbwizard.basicParams.seeDocumentation            = See the documentation for your JDBC driver.
dbwizard.basicParams.title                       = <b>Create Database Pool</b> -- Step 2: Select Driver, JAR, Parameters
dbwizard.basicParams.typicalJDBCURL              = Typical JDBC URL
dbwizard.basicParams.unableToLoadDriver          = Unable to load driver from selected JARs!
dbwizard.common.DBPassword                       = DB Password
dbwizard.common.DBPasswordExp                    = The password used to connect to the database
dbwizard.common.DBUserName                       = DB User Name
dbwizard.common.DBUserNameExp                    = The username used to connect to the database
dbwizard.common.JDBCConnectURL                   = JDBC Connect URL
dbwizard.common.JDBCDriverClass                  = JDBC Driver Class
dbwizard.common.URLFits                          = Make sure the generated URL fits the syntax for your JDBC driver.
dbwizard.common.actions                          = Actions
dbwizard.common.blockingTimeout                  = Blocking Timeout
dbwizard.common.cancel                           = Cancel
dbwizard.common.configFile                       = Config File
dbwizard.common.confirmAndDeploy                 = Confirm and Deploy
dbwizard.common.confirmPassword                  = Confirm Password
dbwizard.common.connectionPoolParameters         = Connection Pool Parameters
dbwizard.common.delete                           = Delete
dbwizard.common.deploy                           = Deploy
dbwizard.common.downloadDriver                   = Download a Driver
dbwizard.common.driverJAR                        = Driver JAR
dbwizard.common.driverJARExplanation             = The JAR(s) required to make a connection to the database.  Use CTRL-click or SHIFT-click to select multiple jars.<br>The JAR(s) should already be installed under GERONIMO/repository/ (or
dbwizard.common.driverTransactionTypes           = Type of transactions that this connection pool supports.
dbwizard.common.edit                             = Edit
dbwizard.common.editSettings                     = Edit Settings
dbwizard.common.finish                           = Finish
dbwizard.common.idleTimeout                      = Idle Timeout
dbwizard.common.import                           = {0} Import
dbwizard.common.importFromJBoss                  = Import from JBoss 4
dbwizard.common.importFromWebLogic               = Import from WebLogic 8.1
dbwizard.common.inMilliseconds                   = in milliseconds
dbwizard.common.inMinutes                        = in minutes
dbwizard.common.maxNoOfCon                       = The maximum number of connections in the pool.  The default is 10.
dbwizard.common.name                             = Name
dbwizard.common.next                             = Next
dbwizard.common.poolMaxSize                      = Pool Max Size
dbwizard.common.poolMinSize                      = Pool Min Size
dbwizard.common.returnToList                     = Return To List
dbwizard.common.save                             = Save
dbwizard.common.showPlan                         = Show Plan
dbwizard.common.skipRemainingPools               = Skip Remaining Pools
dbwizard.common.skipTestAndDeploy                = Skip Test and Deploy
dbwizard.common.skipTestAndShowPlan              = Skip Test and Show Plan
dbwizard.common.state                            = State
dbwizard.common.testConnection                   = Test Connection
dbwizard.common.transactionType                  = Transaction Type
dbwizard.common.usingPoolWizard                  = Using the Geronimo database pool wizard
dbwizard.confirmURL.blockingTimeoutExp           = The length of time a caller will wait for a connection.  Leave blank for default.
dbwizard.confirmURL.driverStatus                 = Driver Status
dbwizard.confirmURL.idleTimeoutExp               = How long a connection can be idle before being closed.  Leave blank for default.
dbwizard.confirmURL.loadedSuccessfully           = Loaded Successfully
dbwizard.confirmURL.maxNoOfCon                   = The maximum number of connections in the pool.  Leave blank for default.
dbwizard.confirmURL.minimumNoOfCon               = The minimum number of connections in the pool.  Leave blank for default.
dbwizard.confirmURL.title                        = <b>Create Database Pool</b> -- Step 3: Final Pool Configuration
dbwizard.downloadStatus.summary                  = This page monitors the driver download progress.
dbwizard.downloadStatus.title                    = <b>Create Database Pool</b> -- Driver Download
dbwizard.edit.basicConProperties                 = Basic Connection Properties
dbwizard.edit.blockingTimeoutExp                 = The length of time a caller will wait for a connection.  The default is 5000.
dbwizard.edit.errorDeploying                     = Error Deploying
dbwizard.edit.idleTimeoutExp                     = How long a connection can be idle before being closed.  The default is 15.
dbwizard.edit.maxNoOfCon                         = The maximum number of connections in the pool.  The default is 10.
dbwizard.edit.minimumNoOfCon                     = The minimum number of connections in the pool.  The default is 0.
dbwizard.edit.poolName                           = Pool Name
dbwizard.edit.poolNameExp                        = A name that is different than the name for any other database pools in the server (no spaces in the name please).
dbwizard.edit.poolType                           = Pool Type
dbwizard.edit.seeDocumentation                   = See the documentation for your JDBC driver.
dbwizard.edit.seeLog                             = see the log for details
dbwizard.edit.summary                            = This page edits a new or existing database pool.
dbwizard.edit.unableToLoadDriver                 = Unable to load driver from selected JARs!
dbwizard.importStatus.currentPools               = Current Pools in Server
dbwizard.importStatus.importFailed               = The import failed or did not discover any usable database pools!
dbwizard.importStatus.importMessages             = Import Messages
dbwizard.importStatus.importStatus               = Import Status
dbwizard.importStatus.originalJNDI               = Original JNDI
dbwizard.importStatus.originalName               = Original Name
dbwizard.importStatus.summary                    = The list of recognized database pools appears below.  You can deploy any pools to  Geronimo that were configured as plain JDBC pools, or XA pools where Geronimo has  a supported XA adapter.  Below the pool list is the list of status messages from  the import process.
dbwizard.importStatus.title                      = <b>Import Database Pools</b> -- Step 2: Review Imported Data 
dbwizard.importUpload.aboutWebLogic              = If WebLogic 8.1 is installed on the same machine as Geronimo, and the WebLogic domain directory is readable by the user running Geronimo, you can also point directly to the WebLogic installation and domain directories. This has the advantage that the import process can read the database passwords,  whereas if you just import a <tt>config.xml</tt> above you'll need to re-enter all the passwords.
dbwizard.importUpload.alternateImport            = Alternate {0} Import
dbwizard.importUpload.domainDirectoryPath        = Domain directory path
dbwizard.importUpload.domainDirectoryPathExp     = Please enter the full path to the WebLogic domain directory (containing the <tt>config.xml</tt> file) for your WebLogic domain .
dbwizard.importUpload.enterFullPath              = Please enter the full path to the <tt>weblogic81/server/lib</tt> directory  for your WebLogic 8.1 installation .
dbwizard.importUpload.path                       = path
dbwizard.importUpload.pleaseSelect               = Please select the
dbwizard.importUpload.summary                    = This page starts the process of importing database pools from another application server. To do the import, you'll need to upload a configuration file from the other server using the fields below.   After that, we'll convert the values we can, and ask you to confirm the configuration for each pool  we find in the configuration.
dbwizard.importUpload.title                      = <b>Import Database Pools</b> -- Step 1: Upload Configuration File
dbwizard.list.createPool                         = Create a new database pool
dbwizard.list.deployedAs                         = Deployed As
dbwizard.list.hasDatabasePools                   = For each pool listed, you can click the <b>usage</b> link to see examples of how  to use the pool from your application.
dbwizard.list.noDatabasePools                    = There are no database pools defined
dbwizard.list.serverWide                         = Server-wide
dbwizard.list.summary                            = This page lists all the available database pools.
dbwizard.list.usage                              = Usage
dbwizard.selectDatabase.databaseType             = Database Type
dbwizard.selectDatabase.databaseTypeExp          = The type of database the pool will connect to.
dbwizard.selectDatabase.nameOfPool               = Name of Database Pool
dbwizard.selectDatabase.nameOfPoolExplanation    = A name that is different than the name for any other database pools in the server (no spaces in the name please).
dbwizard.selectDatabase.title                    = <b>Create Database Pool</b> -- Step 1: Select Name and Database
dbwizard.selectDownload.otherJDBCDrivers         = Here are some other JDBC drivers you might want to download on your own (just save them somewhere under geronimo/repository/)
dbwizard.selectDownload.selectDriver             = Select Driver
dbwizard.selectDownload.selectDriverExp          = A driver that Geronimo can download automatically for you.
dbwizard.selectDownload.selectOtherDatabase      = Select "other" database
dbwizard.selectDownload.selectPredefinedDatabase = Select predefined database
dbwizard.selectDownload.summary                  = <p>This page lets you automatically download a driver for a database where the driver JARs are available online without login or registration.</p><p><i>If this page took a very long time to load and there are no drivers listed in the box below, it probably means your Geronimo installation can't connect to apache.org to retrieve the driver download configuration file.  Sorry for the inconvenience,you'll have to try again later or install the driver by hand (copy it to a directory under geronimo/repository/)</i></p>
dbwizard.selectDownload.title                    = <b>Create Database Pool</b> -- Step 2: Select Driver, JAR, Parameters
dbwizard.showPlan.addToEAR                       = Add to EAR
dbwizard.showPlan.deployAsPartEAR                = Instead of deploying as a top-level database pool, you can deploy this pool as part of an EAR.  To add a database pool to an EAR using this plan:<ol>  <li>Copy and paste the plan to a file</li>  <li>Save the plan file to the top level of your EAR</li>  <li>Copy the RAR file from <tt>GERONIMO_HOME/{0}</tt>    to the top level of your EAR</li>  <li>Create a <tt>META-INF/geronimo-application.xml</tt> file in your EAR    that has a <tt>module</tt> entry like this (substituting the correct  RAR file name and plan file name):</li></ol>
dbwizard.showPlan.deployCommand                  = Deploy Command
dbwizard.showPlan.deployPool                     = Deploy Pool
dbwizard.showPlan.deployPoolFromCommandLine      = To deploy a database pool from the command line using this plan,copy and paste it to a file (say, <tt>plan-file.xml</tt>) and save it.  Then run a command like:
dbwizard.showPlan.deploymentPlan                 = Deployment Plan
dbwizard.showPlan.title                          = <b>Create Database Pool</b> -- Show Deployment Plan
dbwizard.testConnection.connectedTo              = Connected to
dbwizard.testConnection.connectionError          = Connection Error (see below)
dbwizard.testConnection.deployAnyway             = Deploy Anyway
dbwizard.testConnection.testAgain                = Test Again
dbwizard.testConnection.testError                = Test Error
dbwizard.testConnection.testResult               = Test Result
dbwizard.testConnection.title                    = <b>Create Database Pool</b> -- Step 4: Test Connection
dbwizard.usage.applicationCode                   = Application Code
dbwizard.usage.geronimo_webExp                   = <p>To point the resource reference to a specific database pool in Geronimo, the web application needs to have a <tt>geronimo-web.xml</tt> deployment plan.  That may be packaged in the WAR in the <tt>WEB-INF</tt> directory, or it may be provided separately on the command line to the deploy tool.  The <tt>geronimo-web.xml</tt> plan should have a <tt>dependency</tt> element pointing to the database pool module, and a <tt>resource-ref</tt> block corresponding to the <tt>web.xml</tt> <tt>resource-ref</tt> above, which maps the resource reference to a specific database pool.  In that block, the <tt>ref-name</tt> must match the <tt>res-ref-name</tt> from the <tt>web.xml</tt> (above) and the <tt>resource-link</tt> must point to the database pool by name.</p> <p><i>If you have only one pool named {0} deployed in Geronimo, you can point to it like this.</i></p>
dbwizard.usage.moreThanOnePool                   = If you have more than one pool named {0} (for example, two dependencies that <b>each</b> include a component named {1}), then you can specify the pool to use more explicitly like this:
dbwizard.usage.resource_refSection               = The <tt>web.xml</tt> should have a <tt>resource-ref</tt> section declaring the database pool, like this. Note the <tt>res-ref-name</tt>, which is what we'll need to map the reference to a pool, and also what the application will need in order to access the pool.
dbwizard.usage.searchOnlyOne                     = That will search for a pool named {0} in the current application and any modules listed as dependencies (and their dependencies, etc.).
dbwizard.usage.title                             = This page talks about how to use the database pool {0} from a J2EE application. The example here is a web application, but other application modules would work in the same way.
dbwizard.usage.usingInCode                       = To get a reference to the database pool, your application can use code like this.  Note that the JNDI lookup string is <tt>java:comp/env/</tt> plus the <tt>res-ref-name</tt> used in <tt>web.xml</tt> (above).

derbylogmanager.help.title                 = This portlet views the log file for Geronimo's internal database, Derby.
derbylogmanager.view.Lines                 = Lines
derbylogmanager.view.containingText        = Containing text
derbylogmanager.view.filterLog             = Filter Log
derbylogmanager.view.filterResults         = Filter results
derbylogmanager.view.matchCriterial        = {0} total message(s) in log file. {1} matched your criteria
derbylogmanager.view.maxResults            = Max Results
derbylogmanager.view.noEntries             = No entries found with the specified criteria.
derbylogmanager.view.numberOfResultsCapped = number of results capped
derbylogmanager.view.refresh               = Refresh
derbylogmanager.view.to                    = To

internaldb.common.DB                          = DB
internaldb.common.DBMajorVersion              = DB Major Version
internaldb.common.DBMinorVersion              = DB Minor Version
internaldb.common.DBProductName               = DB Product Name
internaldb.common.DBProductVersion            = DB Product Version
internaldb.common.Item                        = Item
internaldb.common.JDBCMajorVersion            = JDBC Major Version
internaldb.common.JDBCMinorVersion            = JDBC Minor Version
internaldb.common.SQLCommands                 = SQL Command/s
internaldb.common.SQLStateType                = SQL State Type
internaldb.common.Value                       = Value
internaldb.common.application                 = Application
internaldb.common.create                      = Create
internaldb.common.createDB                    = Create DB
internaldb.common.databases                   = Databases
internaldb.common.defaultTransactionIsolation = Default Transaction Isolation
internaldb.common.delete                      = Delete
internaldb.common.deleteDB                    = Delete DB
internaldb.common.driver                      = Driver
internaldb.common.driverMajorVersion          = Driver Major Version
internaldb.common.driverMinorVersion          = Driver Minor Version
internaldb.common.driverName                  = Driver Name
internaldb.common.driverVersion               = Driver Version
internaldb.common.empty                       = Empty
internaldb.common.etc                         = Etc
internaldb.common.functions                   = Functions
internaldb.common.note                        = Note
internaldb.common.numericFunctions            = Numeric Functions
internaldb.common.queryResult                 = Query Result
internaldb.common.readOnly                    = Read Only
internaldb.common.result                      = Result
internaldb.common.resultSetHoldability        = Result Set Holdability
internaldb.common.schemas                     = Schemas
internaldb.common.stringFunctions             = String Functions
internaldb.common.supportedSQLKeywords        = Supported SQL Keywords
internaldb.common.supportedTypes              = Supported Types
internaldb.common.system                      = System
internaldb.common.systemFunctions             = System Functions
internaldb.common.table                       = Table
internaldb.common.tableTypes                  = Table Types
internaldb.common.tables                      = Tables
internaldb.common.timeDateFunctions           = Time Date Functions
internaldb.common.useDB                       = Use DB
internaldb.common.useDS                       = Use DataSource
internaldb.common.userName                    = Username
internaldb.common.viewContents                = View Contents
internaldb.common.viewDatabases               = View Databases
internaldb.common.viewTables                  = View Tables
internaldb.dbViewerHelp.content               = Displays all the available databases and their tables and displays the contents of the tables. From the main window, to view the tables in a database, click on the database link. This will show all the tables in the database. To view the contents of the tables, click on the "View Contents" link. At the bottom of the DB Viewer window pane there will be links to take the user back to other views, e.g., "View Databases" and/or "View Tables."
internaldb.internalDBHelp.content             = This page provides information about the internal database, such as, the product name, the version of the database, the supported functions and the supported SQL commands, among other things. Scroll to the bottom to see all the information.
internaldb.listDatabases.nodatabases          = No databases
internaldb.listDatabases.title                = Database List
internaldb.listTables.noTables                = No tables
internaldb.runSQLHelp.createDBExp             = Enter the name of the new database to be created, then click on the &quot;Create&quot; button.
internaldb.runSQLHelp.deleteDBExp             = Delete an existing database, by selecting it from the pull-down menu and then clicking on &quot;Delete.&quot;
internaldb.runSQLHelp.runSQLExp               = Enter the SQL commands, separated by semicolons, in the "SQL Command/s" text box. To run the SQL command(s), click on the "Run SQL" button.
internaldb.runSQLHelp.summary                 = Allows the user to run SQL commands to manipulate the data in the tables, create a new database or delete a database. The user can enter the SQL commands in the &quot;SQL Command(s)&quot; text box and click on &quot;Run SQL.&quot;
internaldb.runSQLHelp.useDBExp                = Select a database to use from the pull-down menu.
internaldb.runSQLHelp.useDSExp                = Select a datasource to use from the pull-down menu.
internaldb.runSQLNormal.note1                 = 1) Use ';' to separate multiple statements
internaldb.runSQLNormal.note2                 = 2) Query results will be displayed for single 'Select' statement
internaldb.runSQLNormal.note3                 = 3) Use single quotes to encapsulate literal strings
internaldb.runSQLNormal.reallyDeleteDatabase  = Are you sure you want to delete this database?
internaldb.runSQLNormal.runSQL                = Run SQL
