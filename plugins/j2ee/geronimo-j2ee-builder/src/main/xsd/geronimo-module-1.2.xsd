<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<xs:schema targetNamespace="http://geronimo.apache.org/xml/ns/deployment-1.2"
    xmlns:sys="http://geronimo.apache.org/xml/ns/deployment-1.2"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
    attributeFormDefault="unqualified">

    <xs:annotation>
        <xs:documentation>
            This is an XML Schema Definition for Geronimo service deployment
            plan. This deployment plan is used for deploying service modules
            which contains non-application GBeans like thread pool, the
            tomcat/jetty container, security manager, etc. In case the Service
            deployment plan is provided internally in the java archive, it
            should be named META-INF/geronimo-service.xml. In case the Service
            deployment plan is provided externally, the deployment descriptor
            can be named anything and provided to the deploy tool. All the
            Service deployment plan must specify the top level element as module
            with namespace specified as 
            xmlns="http://geronimo.apache.org/xml/ns/deployment-1.2". The default
            location for this document is
            http://geronimo.apache.org/xml/ns/deployment-1.2

            Typical Geronimo Service Deployment plan will look like this:
            <![CDATA[
            <?xml version="1.0" encoding="UTF-8"?>
            <module
                xmlns="http://geronimo.apache.org/xml/ns/deployment-1.2">
                <environment>
                    ...
                </environment>
                <gbean>
                    ...
                </gbean>
            </module>
            ]]>
        </xs:documentation>
    </xs:annotation>


    <xs:element name="environment" type="sys:environmentType">
        <xs:annotation>
            <xs:documentation>
                The environment element defines elements to store information
                like moduleId, dependencies, and classloader Info for the
                module. This element is used in all the Services and application
                modules deployment plans.
            </xs:documentation>
        </xs:annotation>

        <!-- TODO figure out why this doesn't work
            <xs:key name="name-key-key">
            <xs:annotation>
            <xs:documentation>
            name-key-key assures that key-values for the names of services in this module will
            have unique key names.
            </xs:documentation>
            </xs:annotation>
            <xs:selector xpath="sys:name-key"/>
            <xs:field xpath="sys:name-key/key"/>
            </xs:key>
        -->

    </xs:element>
    <xs:element name="client-environment" type="sys:environmentType">
        <xs:annotation>
            <xs:documentation>
                The client-environment element is used only by Application
                Client modules to provide client module environment setting. It
                defines elements to store information like moduleId,
                dependencies, and classloader Info for the client-side
                application module. This information is used to identify the
                module in the client container only and it should not be
                directly used by deployment process.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:element name="server-environment" type="sys:environmentType">
        <xs:annotation>
            <xs:documentation>
                The server-environment element is used only by Application
                Client modules to define server side module environment
                settings. It defines elements to store information like
                moduleId, dependencies, and classloader Info for the server-side
                of client application module. This information is used to
                identify the module in the server environment only.
            </xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="environmentType">
        <xs:sequence>
            <xs:element name="moduleId" type="sys:artifactType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        "moduleId" holds elements for the groupId, artifactId,
                        and version of the module version can be ommitted in
                        which case a timestamp is used. Module IDs are normally
                        printed with slashes between the four components, such
                        as GroupID/ArtifactID/Version/Type.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bundle-activator" type="xs:string" minOccurs="0"/>
            <xs:element name="bundle-classPath" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="import-package" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="export-package" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="require-bundle" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="dynamic-import-package" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>

        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="artifactType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[
                Refers to either another module running in the server, or
                an entry in the server's Repository.  In either case this effectively uses a
                URI.

                When this is pointing to a repository entry, the URI must have a form
                acceptable to the repository, which is currently a URI consisting of
                Maven-style identifiers separated by slashes (groupId/artifactId/version/type,
                for example, the URI "postgresql/postgresql-8.0-jdbc/313/jar" for a file like
                "repository/postgresql/postgresql-8.0-jdbc-313.jar").

                When this is pointing to a module, the URI should match the
                module's moduleId.  This also looks
                like a Maven-style URI discussed above.

                The artifactType element can take either a straight URI (as in the examples
                above), or maven-style identifier fragments (groupId, type, artifactId, and
                version), which it will compose into a URI by adding up the fragments with
                slashes in between.

                There is a correspondence between the xml format and a URI.  For example, the URI

                postgresql/postgresql-8.0-jdbc/313/jar

                corresponds to the xml:

                <groupId>postgresql</groupId>
                <artifactId>postgresql-8.0-jdbc</artifactId>
                <version>313</version>
                <type>jar</type>
	            ]]>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <!-- TODO not sure if groupId can in fact be optional -->
            <xs:element name="groupId" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The name for group containing this module. By default,
                        it is considered 'default' for declaration and wild card
                        '*' for dependencies.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="artifactId" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The name for module in a specified group. All the
                        artifactId's should be unique within a group. If no
                        articfactId is provided it will be defaulted to file
                        name of the module file.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="version" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The version number for the module formatted by dot
                        separated numbers. If no version is provided it will be
                        defaulted to numeric timestamp generated by
                        System.currentTimeMillis() at deploy time. In case of
                        dependencies latest available version will be used.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="type" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        This element defines the type of the module. The type
                        could be 'CAR', 'JAR', EAR', 'WAR', etc. If no type is
                        provided it will be defaulted appropriately by the
                        deployer depending upon type of deployed module.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>



</xs:schema>
